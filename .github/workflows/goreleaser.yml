name: goreleaser

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      skip-publish:
        description: "Skip publishing to releases.mondoo.com?"
        type: boolean
        required: false
        default: false
      use-test-cert:
        description: "Use test certificate profile (not publicly trusted)"
        required: false
        default: false
        type: boolean
      goreleaser-snapshot:
        description: "Run goreleaser in snapshot mode, which will not publish and bypass tag checks."
        required: false
        default: false
        type: boolean
      upload-artifacts:
        description: "Uploading artifacts to workflow"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io

jobs:
  goreleaser:
    permissions:
      # Add "contents" to write release
      contents: "write"
      # Add "id-token" for google-github-actions/auth
      id-token: "write"

    runs-on: self-hosted
    environment: prod
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0

      - name: Dump all inputs
        run: echo "${{ toJSON(inputs) }}"

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Skip Publish for Alpha and Beta Tags
        id: skip-publish
        if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') || inputs.skip-publish == true
        run: |
          echo "Skipping publish for alpha and beta tags"
          echo "skip-publish=true" >> $GITHUB_OUTPUT
          echo "skip-publish=true" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093" # v3.0.0
        with:
          workload_identity_provider: ${{ secrets.GCP_WIP }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Write RPM Signing Cert"
        run: |
          gpgkey="$(mktemp -t gpgkey.XXX)"
          base64 -d <<<"$GPG_KEY" > "$gpgkey"
          echo "GPG_KEY_PATH=$gpgkey" >> $GITHUB_ENV
        env:
          GPG_KEY: "${{ secrets.GPG_KEY}}"

# jsign and azure-cli are both requirements for Azure Trusted Signing and these actions to authenticate
# These packages have been installed on the self-hosted runner using ansible from the private repo

      - name: Azure login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ secrets.TSIGN_AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.TSIGN_AZURE_TENANT_ID}}
          subscription-id: ${{ vars.TSIGN_AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure AD Access Token to trusted signing
        id: get_token
        run: |
          set -e  # Stop on first error
          TSIGN_ACCESS_TOKEN=$(az account get-access-token --resource https://codesigning.azure.net --query accessToken -o tsv)

          if [ -z "$TSIGN_ACCESS_TOKEN" ]; then
            echo "Error: Access token is empty"
            exit 1
          fi
          PREFIX="${TSIGN_ACCESS_TOKEN:0:8}"
          echo "Access token prefix: ${PREFIX}..."
          echo "TSIGN_ACCESS_TOKEN=$TSIGN_ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Install Quill for Mac Signing and Notarization
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh | sh -s -- -b /tmp
          /tmp/quill help

      - name: Log in to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Run GoReleaser
      # This will build the binaries, create the docker images, and publish the release to Git
      # we are currently pinned to v2.5.1 because of a bug in v2.6.0 that causes the release to fail
      # specifically with the signing of the RPM packages
      # if you upgrade then when validating the signatures 'rpm -qpi dist/*.rpm' it will error with
      # Header RSA signature: BAD (package tag 268: invalid OpenPGP signature)
      # This is because a goreleaser dep was changed to https://github.com/goreleaser/nfpm/releases/tag/v2.41.2
      # created a discussion on the issue here https://github.com/orgs/goreleaser/discussions/5943

      - name: Run GoReleaser
        if: ${{ inputs.skip-publish != true }}
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser
          version: v2.5.1
          args: >
            release
            --config .goreleaser.yml
            --clean
            --timeout 120m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NFPM_DEFAULT_RPM_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          CERT_PASSWORD: ${{ steps.gcp_secrets.outputs.code_sign_cert_challenge }}
          QUILL_SIGN_PASSWORD: ""
          QUILL_SIGN_P12: ${{ secrets.APPLE_SIGN_P12 }}
          QUILL_NOTARY_KEY: ${{ secrets.APPLE_NOTARY_KEY }}
          QUILL_NOTARY_KEY_ID: ${{ secrets.APPLE_NOTARY_KEY_ID }}
          QUILL_NOTARY_ISSUER: ${{ secrets.APPLE_NOTARY_ISSUER }}
          TSIGN_AZURE_ENDPOINT: ${{ vars.TSIGN_AZURE_ENDPOINT }}
          TSIGN_ACCOUNT_NAME: ${{ vars.TSIGN_ACCOUNT_NAME }}
          TSIGN_CERT_PROFILE_NAME: ${{ github.event.inputs.use-test-cert == 'true' && vars.TSIGN_TEST_CERT_PROFILE_NAME || vars.TSIGN_CERT_PROFILE_NAME }}
          TSIGN_ACCESS_TOKEN: ${{ steps.get_token.outputs.TSIGN_ACCESS_TOKEN }}

      - name: Run GoReleaser unstable
        if: ${{ inputs.skip-publish == true }}
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser
          version: v2.5.1
          args: >
            release
            ${{ inputs.goreleaser-snapshot == true && '--snapshot' || '' }}
            --config .github/.goreleaser-unstable.yml
            --clean
            --timeout 120m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NFPM_DEFAULT_RPM_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          CERT_PASSWORD: ${{ steps.gcp_secrets.outputs.code_sign_cert_challenge }}
          QUILL_SIGN_PASSWORD: ""
          QUILL_SIGN_P12: ${{ secrets.APPLE_SIGN_P12 }}
          QUILL_NOTARY_KEY: ${{ secrets.APPLE_NOTARY_KEY }}
          QUILL_NOTARY_KEY_ID: ${{ secrets.APPLE_NOTARY_KEY_ID }}
          QUILL_NOTARY_ISSUER: ${{ secrets.APPLE_NOTARY_ISSUER }}
          TSIGN_AZURE_ENDPOINT: ${{ vars.TSIGN_AZURE_ENDPOINT }}
          TSIGN_ACCOUNT_NAME: ${{ vars.TSIGN_ACCOUNT_NAME }}
          TSIGN_CERT_PROFILE_NAME: ${{ github.event.inputs.use-test-cert == 'true' && vars.TSIGN_TEST_CERT_PROFILE_NAME || vars.TSIGN_CERT_PROFILE_NAME }}
          TSIGN_ACCESS_TOKEN: ${{ steps.get_token.outputs.TSIGN_ACCESS_TOKEN }}

      - name: Check RPMs
        run: |
          rpm -qpi dist/*.rpm

      - name: Upload artifacts
        if: ${{ inputs.upload-artifacts == true }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-artifacts
          path: dist/*.zip
          retention-days: 7

  trigger-installer-release:
    name: Trigger Installer Release
    if: ${{ inputs.skip-publish != true }}
    runs-on: ubuntu-latest
    needs: goreleaser
    steps:
      - name: cnspec container image present?
        id: check_release_file
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          retry_wait_seconds: 20
          timeout_seconds: 5
          max_attempts: 200
          retry_on: error
          # error on HTTP code different to 200
          command: |
            vSEMVER=${{ github.ref_name }}
            SEMVER="${vSEMVER//v}"
            curl -o /dev/null -s -w "%{http_code}\n" "https://registry.hub.docker.com/v2/repositories/mondoo/cnspec/tags/${SEMVER}-ubi-rootless" | grep 200

      # fetch a token for the mondoo-mergebot app
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.MONDOO_MERGEBOT_APP_ID }}
          private-key: ${{ secrets.MONDOO_MERGEBOT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repository: |
            mondoohq/installer
            mondoohq/cnspec

      - name: Check if pre-release
        id: is_prerelease
        run: echo "is_pre=${{ contains(github.ref_name, '-pre') }}" >> $GITHUB_OUTPUT

      - name: Trigger installer release
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
        with:
          token: ${{ steps.generate-token.outputs.token }}
          repository: "mondoohq/installer"
          event-type: trigger-release
          client-payload: '{
            "version": "${{ github.ref_name }}",
            "skip-publish": "${{ steps.is_prerelease.outputs.is_pre }}"
            }'

  mondoo-operator-cnspec:
    name: Trigger Mondoo Operator cnspec image release
    if: ${{ inputs.skip-publish != true }}
    runs-on: ubuntu-latest
    needs: goreleaser
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: mondoohq/mondoo-operator
          event-type: update
          client-payload: '{"version": "${{ github.ref_name }}"}'
