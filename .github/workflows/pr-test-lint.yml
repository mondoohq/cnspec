name: Code Test

## Only trigger tests if source is changing
on:
  push:
    paths:
      - '**.go'
      - '**.mod'
      - '**.ct'
      - 'go.sum'
      - '.github/workflows/pr-test-lint.yml'

jobs:
  # Check if there is any dirty change for go mod tidy
  go-mod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false      
      - name: Check go mod
        run: |
          go mod tidy
          git diff --exit-code go.mod


  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest
          args: --timeout=30m

  go-test:
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.tests.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false      
      # https://github.com/actions/cache/blob/main/examples.md#go---modules
      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Make provider dir
        run: mkdir -p ${PWD}/${GITHUB_JOB}/.providers
      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/${GITHUB_JOB}/.providers" >> $GITHUB_ENV
      - name: Display Provider Path
        run: echo $PROVIDERS_PATH

      - run: make test/go/plain-ci
        id: tests
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: success() || failure()        # run this step even if previous step failed
        with:                           
          name: test-results
          path: report.xml

  go-auto-approve-dependabot:
    runs-on: ubuntu-latest
    needs: [go-test, go-bench, golangci-lint, go-mod]
    # For now, we auto approve and merge:
    # - go dep PRs
    # - cnquery update PRs
    # because we have tests for this in place.
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#startswith
    if: startsWith(github.ref, 'refs/heads/dependabot/go_modules') && github.actor == 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
    steps:
      # figure out the PR for this commit
      - uses: cloudposse-github-actions/get-pr@ba7d9e7db690abb3c5b84f4337cd51e75f7cfb71 # v2.0.0
        id: pr
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          filterOutClosed: true
          filterOutDraft: true
      - name: Approve a PR
        uses: fastify/github-action-merge-dependabot@1b2ed42db8f9d81a46bac83adedfc03eb5149dff # v3.11.2
        with:
          pr-number: ${{ steps.pr.outputs.number }}

  go-auto-approve-mondoo:
    runs-on: ubuntu-latest
    needs: [go-test, go-bench, golangci-lint, go-mod]
    # For now, we auto approve and merge:
    # - go dep PRs
    # - cnquery update PRs
    # because we have tests for this in place.
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#startswith
    if: startsWith(github.ref, 'refs/heads/version/cnquery_update_v') && github.event.commits[0].author.username == 'mondoo-tools'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      # figure out the PR for this commit
      - uses: cloudposse-github-actions/get-pr@ba7d9e7db690abb3c5b84f4337cd51e75f7cfb71 # v2.0.0
        id: pr
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          filterOutClosed: true
          filterOutDraft: true
      # fetch a token for the mondoo-mergebot app
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.MONDOO_MERGEBOT_APP_ID }}
          private-key: ${{ secrets.MONDOO_MERGEBOT_APP_PRIVATE_KEY }}
      # automerge using bot token
      - name: Approve and merge a PR
        run: |
          gh pr review ${{ steps.pr.outputs.number }} --approve
          gh pr merge ${{ steps.pr.outputs.number }} --squash
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
  event_file:
    name: "Store event file"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: Event File
        path: ${{ github.event_path }}

  go-bench:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: Make provider dir
        run: mkdir -p ${PWD}/${GITHUB_JOB}/.providers
      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/${GITHUB_JOB}/.providers" >> $GITHUB_ENV
      - name: Display Provider Path
        run: echo $PROVIDERS_PATH

      - name: Run benchmark
        run: make benchmark/go | tee benchmark.txt

        # Remove log statements and leave just the benchmark results
      - name: Cleanup benchmark file
        run: sed -i -n '/goos:/,$p' benchmark.txt

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-benchmark-
      # Run `github-action-benchmark` action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@4bdcce38c94cec68da58d012ac24b7b1155efe8b # v1.20.7
        with:
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: benchmark.txt
          # Where the previous data file is stored
          external-data-json-path: ./cache/benchmark-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          summary-always: true
          fail-on-alert: true
          save-data-file: false
          alert-threshold: '150%'
