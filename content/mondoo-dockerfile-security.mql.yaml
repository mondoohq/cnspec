# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1
policies:
  - uid: mondoo-docker-security
    name: Mondoo Dockerfile Security
    version: 1.0.0
    license: BUSL-1.1
    tags:
        mondoo.com/category: security
        mondoo.com/platform: linux,docker
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
        desc: |-
          The Mondoo Dockerfile Security policy provides guidance for establishing secure Docker container configurations and deployments by securing Dockerfiles used to build container images.

          If you have questions, comments, or ways to improve this policy, please write us at hello@mondoo.com, or reach out in GitHub Discussions.

          ## Scan a Dockerfile

          ```bash
          cnspec scan docker file DOCKERFILE_PATH
          ```

          ## Join the community!

          Our goal is to build policies that are simple to deploy, accurate, and actionable.

          If you have any suggestions for how to improve this policy, or if you need support, join the community in GitHub Discussions.

    groups:
        - title: Docker Container Security
          filters: |
              asset.platform == "dockerfile"
          checks:
              - uid: mondoo-docker-security-no-management-ports
              - uid: mondoo-docker-security-no-insecure-certificate-validation-yum
              - uid: mondoo-docker-security-no-insecure-certificate-validation-apt
              - uid: mondoo-docker-security-no-insecure-certificate-validation-curl
              - uid: mondoo-docker-security-no-insecure-certificate-validation-wget
              - uid: mondoo-docker-security-no-sudo-commands
              - uid: mondoo-docker-security-no-gpg-skip-yum
              - uid: mondoo-docker-security-non-root-user
              - uid: mondoo-docker-security-use-copy-instead-of-add
              - uid: mondoo-docker-best-practice-no-latest-tag
              - uid: mondoo-docker-best-practice-use-apt-get

queries:
  - uid: mondoo-docker-security-no-management-ports
    title: Don't expose management ports
    impact: 100
    mql: |
      docker.file.stages.all(expose.all(port != 22))
      docker.file.stages.all(expose.all(port != 2375))
      docker.file.stages.all(expose.all(port != 8500))
      docker.file.stages.all(expose.all(port != 6443))
    docs:
      desc: |
        This check ensures that management ports such as SSH (port 22), Docker Remote API (port 2375), Consul (port 8500), and Kubernetes API (port 6443) are not exposed in Docker container configurations.

        **Why this matters**

        Exposing management ports in Docker containers can lead to significant security risks:

        - **Unauthorized access**: These ports are commonly targeted by attackers to gain unauthorized access to containerized environments.
        - **Increased attack surface**: Exposing these ports unnecessarily expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting access to management ports to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed management ports can lead to unintended access, service disruptions, or data breaches.

        By ensuring these ports are not exposed, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Docker container configurations.
      remediation: |
        Review and update your Dockerfile to ensure that management ports (22 for SSH, 2375 for Docker Remote API, 8500 for Consul HTTP API, 6443 for Kubernetes API) are not exposed.
        - Remove or restrict the exposure of these ports using the `EXPOSE` instruction in your Dockerfile.
        - Use Docker's port mapping options (`-p` or `--publish`) cautiously to avoid exposing these ports.
        - Ensure that any required management access is secured and appropriately managed.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-yum
    title: Ensure package manager certificate validation is enabled
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--nogpgcheck")))
      docker.file.stages.all(run.none(script.contains("--no-check-certificate")))
      docker.file.stages.all(run.none(script.contains("--no-gpg-check")))
    docs:
      desc: |
        This check ensures that package managers like YUM, DNF, APT, and others in Dockerfiles do not disable SSL certificate validation.

        **Why this matters**

        Disabling SSL certificate validation in package managers can lead to significant security risks:

        - **Man-in-the-middle attacks**: Without SSL validation, attackers can intercept and modify package data during download, potentially injecting malicious code.
        - **Integrity issues**: Disabling certificate checks undermines the integrity of the software being installed, as there is no guarantee that the packages come from trusted sources.
        - **Compliance risks**: Many security standards and best practices require SSL certificate validation to ensure secure communication and package integrity.
        - **Operational risks**: Using insecure options can lead to the installation of compromised or outdated packages, increasing the risk of vulnerabilities in the container.

        By ensuring SSL certificate validation is enabled, this check helps to maintain the integrity and security of the container's software environment, aligning with best practices and reducing potential risks.
      remediation: |
        - Review the Dockerfile and ensure that package managers are configured to use SSL certificate validation.
        - Use secure practices for package installations to maintain system integrity: Remove any insecure options such as `--nogpgcheck`, `--no-check-certificate`, `--no-gpg-check`, and similar flags.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-apt
    title: Don't disable certificate validation in APT
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--allow-insecure-repositories")))
    docs:
      desc: |
        This check ensures that the `--allow-insecure-repositories` option is not used with the APT package manager in Dockerfile `RUN` instructions.

        **Why this matters**

        Disabling certificate validation by using the `--allow-insecure-repositories` option can lead to significant security risks:

        - **Man-in-the-middle attacks**: Without proper certificate validation, attackers can intercept and modify package data during download, potentially injecting malicious code.
        - **Integrity issues**: Using insecure repositories undermines the integrity of the software being installed, as there is no guarantee that the packages come from trusted sources.
        - **Compliance risks**: Many security standards and best practices require SSL certificate validation to ensure secure communication and package integrity.
        - **Operational risks**: Installing packages from insecure repositories can lead to the inclusion of compromised or outdated software, increasing the risk of vulnerabilities in the container.

        By ensuring that the `--allow-insecure-repositories` option is not used, this check helps maintain the integrity and security of the container's software environment, aligning with best practices and reducing potential risks.
      remediation: |
        - Review the Dockerfile `RUN` instructions to ensure that APT commands do not use the `--allow-insecure-repositories` option.
        - Configure APT to use secure repositories and avoid options that bypass certificate validation.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-curl
    title: Don't disable certificate validation in curl
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--insecure")))
      docker.file.stages.all(run.none(script.contains("-k")))
    docs:
      desc: |
        This check ensures that the `--insecure` or `-k` options are not used with `curl` in Docker containers.

        **Why this matters**

        Disabling SSL certificate validation with the `--insecure` or `-k` options can lead to significant security risks:

        - **Man-in-the-middle attacks**: Without SSL validation, attackers can intercept and modify data during transmission, potentially injecting malicious content.
        - **Integrity issues**: Disabling certificate checks undermines the integrity of the data being transferred, as there is no guarantee that it comes from trusted sources.
        - **Compliance risks**: Many security standards and best practices require SSL certificate validation to ensure secure communication.
        - **Operational risks**: Using insecure options can lead to the inclusion of compromised or outdated data, increasing the risk of vulnerabilities in the container.

        By ensuring SSL certificate validation is enabled, this check helps maintain the integrity and security of the container's operations, aligning with best practices and reducing potential risks.
      remediation: |
        - Review the `CMD` or `ENTRYPOINT` commands in your Dockerfile and any scripts executed within the container.
        - Avoid using `curl` with `--insecure` or `-k` options.
        - Ensure that proper SSL certificate validation is enabled for all `curl` operations.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-wget
    title: Don't disable certificate validation in Wget
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--no-check-certificate")))
    docs:
      desc: |
        This check ensures that the `--no-check-certificate` option is not used with `wget` in Dockerfile `RUN` instructions.

        **Why this matters**

        Disabling SSL certificate validation with the `--no-check-certificate` option can lead to significant security risks:

        - **Man-in-the-middle attacks**: Without SSL validation, attackers can intercept and modify data during transmission, potentially injecting malicious content.
        - **Integrity issues**: Disabling certificate checks undermines the integrity of the data being transferred, as there is no guarantee that it comes from trusted sources.
        - **Compliance risks**: Many security standards and best practices require SSL certificate validation to ensure secure communication.
        - **Operational risks**: Using insecure options can lead to the inclusion of compromised or outdated data, increasing the risk of vulnerabilities in the container.

        By ensuring SSL certificate validation is enabled, this check helps maintain the integrity and security of the container's operations, aligning with best practices and reducing potential risks.
      remediation: |
        - Review the Dockerfile `RUN` instructions to ensure that `wget` commands do not use the `--no-check-certificate` option.
        - Configure Wget to use certificate validation to enhance the security of your container configurations.
  - uid: mondoo-docker-security-no-sudo-commands
    title: Don't run commands using sudo
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("sudo")))
    docs:
      desc: |
        This check ensures that `sudo` is not used in Dockerfiles to run commands.

        **Why this matters**

        Using `sudo` within a Dockerfile can lead to significant security risks:

        - **Privilege escalation**: `sudo` grants elevated permissions that can be exploited if not handled properly.
        - **Inconsistent behavior**: Commands requiring `sudo` may fail in environments where `sudo` is not configured or available.
        - **Security best practices**: Docker containers are designed to run with the least privileges necessary. Using `sudo` contradicts this principle and increases the attack surface.
        - **Operational risks**: Overuse of `sudo` can lead to misconfigurations or unintended privilege escalations, compromising the container's security.

        By avoiding `sudo`, this check ensures that all commands run with the default user privileges, enhancing the security and reliability of the container configuration.
      remediation: |
        - Review the Dockerfile and remove any instances of `sudo`.
        - Ensure that all commands are executed with the least privileges required.
        - Configure containers to operate with non-root users where possible, and avoid privilege escalation techniques.
  - uid: mondoo-docker-security-no-gpg-skip-yum
    title: Don't skip GPG validation in YUM/DNF
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--nogpgcheck")))
    docs:
      desc: |
        This check ensures that the `--nogpgcheck` option is not used with YUM or DNF in Dockerfile `RUN` instructions.

        **Why this matters**

        Skipping GPG validation with the `--nogpgcheck` option can lead to significant security risks:

        - **Integrity issues**: Without GPG validation, there is no guarantee that the packages being installed come from trusted sources, increasing the risk of installing compromised or malicious software.
        - **Man-in-the-middle attacks**: Disabling GPG checks makes it easier for attackers to intercept and modify package data during download.
        - **Compliance risks**: Many security standards and best practices require GPG validation to ensure the integrity and authenticity of software packages.
        - **Operational risks**: Using insecure options can lead to the installation of outdated or tampered packages, increasing the risk of vulnerabilities in the container.

        By ensuring GPG validation is enabled, this check helps maintain the integrity and security of the container's software environment, aligning with best practices and reducing potential risks.
      remediation: |
        - Review the Dockerfile `RUN` instructions to ensure that YUM or DNF commands do not use the `--nogpgcheck` option.
        - Configure YUM or DNF to perform GPG validation to enhance the security of your container configurations.
  - uid: mondoo-docker-security-non-root-user
    title: Don't run containers as root user
    impact: 100
    mql: |
      firstStageIdentifier = docker.file.stages[0].from.image
      docker.file.stages.where(from.image != firstStageIdentifier).all(user != empty)
      docker.file.stages.where(from.image != firstStageIdentifier).all(user.user != "root")
    docs:
      desc: |
        This check ensures that containers do not run as the root user for security reasons.

        **Why this matters**

        Running containers as the root user can lead to significant security risks:

        - **Privilege escalation**: If an attacker gains access to a container running as root, they may exploit this to gain elevated privileges on the host system.
        - **Increased attack surface**: Containers running as root have access to more system resources, increasing the potential impact of a security breach.
        - **Non-compliance with best practices**: Security standards and best practices recommend running containers with the least privileges necessary to perform their tasks.
        - **Operational risks**: Misconfigurations or vulnerabilities in containers running as root can lead to unintended access, data breaches, or service disruptions.

        By ensuring containers do not run as the root user, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of containerized environments.
      remediation: |
        Update your Dockerfile to use the `USER` directive in all stages after the initial build stage. Specify a non-root user to run container processes, which enhances the security posture of your containers.
        For example, you can add the following directive in Dockerfile stages where it is appropriate:

        ```dockerfile
        USER appuser
        ```
        Make sure that `appuser` is created and has the necessary permissions for the processes in that stage.
  - uid: mondoo-docker-security-use-copy-instead-of-add
    title: Use COPY instead of ADD in Dockerfiles
    impact: 100
    mql: |
      docker.file.stages.all(add == empty)
    docs:
      desc: |
        This check ensures that Dockerfiles use the `COPY` instruction instead of `ADD`, unless `ADD`'s specific features are required.

        **Why this matters**

        The `COPY` instruction is simpler and more predictable, as it only copies files from the source to the destination. In contrast, `ADD` has additional functionalities, such as fetching files from remote URLs and extracting tar archives, which can introduce security risks if misused.

        - **Security risks**: Using `ADD` for remote URL fetching or automatic extraction can expose the container to malicious files or unintended behavior.
        - **Predictability**: `COPY` provides a straightforward and consistent behavior, reducing the risk of unexpected outcomes during the build process.
        - **Best practices**: Security standards and Dockerfile best practices recommend using `COPY` for file copying tasks to minimize potential vulnerabilities.

        By ensuring the use of `COPY` instead of `ADD`, this check helps maintain a secure and predictable Dockerfile configuration, aligning with best practices and reducing potential risks.
      remediation: |
        Review the Dockerfile and replace `ADD` instructions with `COPY` where possible. Use `ADD` only when its additional functionalities (e.g., fetching files from a remote URL or extracting tar files) are specifically needed and cannot be achieved using `COPY`.
        Consider the following actions:
        - Replace `ADD` with `COPY` for file copying tasks.
        - Use `ADD` only for remote file fetching or unpacking archives if absolutely necessary.
        - Verify the necessity of each `ADD` instruction and ensure it is used correctly.
        - Perform a security review to ensure that any use of `ADD` does not introduce vulnerabilities or expose sensitive information.
  - uid: mondoo-docker-best-practice-no-latest-tag
    title: Don't build containers from latest tags
    impact: 100
    mql: |
      docker.file.stages.all(from.tag != "latest")
    docs:
      desc: |
        This check ensures that Dockerfiles do not use the `latest` tag for base images in the `FROM` instructions.

        **Why this matters**

        Using the `latest` tag for base images can lead to several issues:

        - **Unpredictable builds**: The `latest` tag may point to different versions of the base image over time, leading to inconsistent and unreliable builds.
        - **Security risks**: Newer versions of the base image may introduce vulnerabilities or breaking changes that can affect the container's functionality.
        - **Lack of control**: Explicitly specifying a version tag ensures that the container is built with a known and tested base image, providing greater control over the build process.
        - **Compliance risks**: Many security standards and best practices recommend using fixed version tags to ensure predictable and secure builds.

        By avoiding the `latest` tag and specifying explicit version tags, this check helps maintain consistent, secure, and reliable container builds, aligning with best practices and reducing potential risks.
      remediation: |
        Review the Dockerfile to ensure that explicit version tags are used for base images instead of `latest`.
        For example, use `python:3.9` instead of `python:latest` to ensure consistent and predictable builds.
  - uid: mondoo-docker-best-practice-use-apt-get
    title: Use `apt-get` instead of `apt` for consistent package management
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("apt")))
    docs:
      desc: |
        This check ensures that Dockerfiles use the `apt-get` CLI instead of `apt`.

        **Why this matters**

        Using `apt-get` instead of `apt` in Dockerfiles provides several advantages:

        - **Predictable behavior**: The `apt-get` CLI is designed for scripting and automation, offering more consistent and reliable behavior in Dockerfile contexts.
        - **Stability**: `apt-get` is considered more stable and less prone to changes in behavior compared to `apt`, which is intended for interactive use.
        - **Best practices**: Security standards and Dockerfile best practices recommend using `apt-get` for package management to ensure predictable and secure builds.
        - **Reduced risk of errors**: Using `apt-get` minimizes the risk of unexpected issues during the build process, improving the reliability of containerized environments.

        By ensuring the use of `apt-get` instead of `apt`, this check helps maintain a secure and predictable Dockerfile configuration, aligning with best practices and reducing potential risks.
      remediation: |
        Review the Dockerfile `RUN` instructions to replace any `apt` commands with `apt-get`. This ensures that package management operations are performed using the recommended and more stable CLI.
