# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-http-security
    name: Mondoo HTTP Security
    version: 1.1.1
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: host
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        The Mondoo HTTP Security policy includes checks for ensuring the security of HTTP headers.

        ## Remote scan

        Remote scans use cnspec providers to retrieve on-demand scan results without having to install any agents.

        ### Scan a host

        ```bash
        cnspec scan host <fqdn>
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - title: Headers for HTTP/HTTPS communication
        filters: asset.platform == 'host'
        checks:
          - uid: mondoo-http-security-x-content-type-options-nosniff
          - uid: mondoo-http-security-content-security-policy
          - uid: mondoo-http-security-obfuscate-server
          - uid: mondoo-http-security-no-x-powered-by
          - uid: mondoo-http-security-no-x-aspnet-version
          - uid: mondoo-http-security-no-x-aspnetmvc-version
          - uid: mondoo-http-security-no-public-key-pins
      - title: Headers for HTTPS communication
        filters: |
          asset.platform == 'host'
          tls.certificates != empty
        checks:
          - uid: mondoo-http-security-strict-transport-security
    scoring_system: highest impact
queries:
  - uid: mondoo-http-security-x-content-type-options-nosniff
    title: Set X-Content-Type-Options HTTP header to 'nosniff'
    mql: http.get.header.xContentTypeOptions == "nosniff"
    docs:
      desc: |
        This check ensures that the 'X-Content-Type-Options' HTTP header is set to 'nosniff'.

        **Why this matters**

        The 'X-Content-Type-Options' header prevents browsers from MIME type sniffing a response away from the declared content type. This is important for security because:

        - **Prevents content-type confusion**: MIME sniffing can lead to browsers interpreting files as a different type than intended, potentially exposing vulnerabilities.
        - **Mitigates XSS attacks**: Attackers may exploit MIME sniffing to execute malicious scripts by tricking the browser into treating a file as executable content.
        - **Improves content integrity**: Ensures that files are processed as intended by the server, reducing the risk of unexpected behavior.

        By setting the 'X-Content-Type-Options' header to 'nosniff', the system enforces strict content type handling, enhancing security and reducing the attack surface.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `server` or `location` block, add the following line:

                ```nginx
                add_header X-Content-Type-Options "nosniff";
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header set X-Content-Type-Options "nosniff"
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Click on `Add` in the right pane.
            4. Set the name to `X-Content-Type-Options` and the value to `nosniff`.
            5. Click OK and restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
        title: MDN Web Docs X-Content-Type-Options
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-xss-protection
        title: OWASP HTTP Security Response Headers Cheat Sheet
  - uid: mondoo-http-security-content-security-policy
    title: Set Content Security Policy (CSP) HTTP header
    mql: http.get.header.params.keys.any('Content-Security-Policy')
    docs:
      desc: |
        This check ensures that the Content Security Policy (CSP) HTTP header is set to mitigate against Cross-Site Scripting (XSS) and data injection attacks.

        **Why this matters**

        The Content Security Policy (CSP) header is a powerful tool to enhance the security of web applications by controlling the sources from which content can be loaded. This is important for several reasons:

        - **Mitigates XSS attacks**: CSP helps prevent attackers from injecting malicious scripts into web pages by restricting the sources of executable scripts.
        - **Prevents data injection**: By defining allowed content sources, CSP reduces the risk of unauthorized data being loaded into the application.
        - **Improves content integrity**: Ensures that only trusted resources are loaded, reducing the risk of compromised third-party content affecting the application.
        - **Enhances security posture**: Implementing CSP demonstrates a proactive approach to securing web applications against common vulnerabilities.

        By setting the CSP header, the system enforces strict content loading policies, reducing the attack surface and improving overall application security.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `server` or `location` block, add the following line:

                ```nginx
                add_header Content-Security-Policy "default-src 'self';";
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header set Content-Security-Policy "default-src 'self';"
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Click on `Add` in the right pane.
            4. Set the name to `Content-Security-Policy` and the value to `default-src 'self';`.
            5. Click OK and restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
        title: MDN Web Docs Content Security Policy (CSP)
  - uid: mondoo-http-security-strict-transport-security
    title: Set Strict-Transport-Security (HSTS) HTTP header
    mql: http.get.header.params.keys.any('Strict-Transport-Security')
    docs:
      desc: |
        This check ensures that the Strict-Transport-Security (HSTS) HTTP header is set to enforce secure connections.

        **Why this matters**

        The Strict-Transport-Security (HSTS) header is a critical security feature that ensures all communication between the client and server is conducted over HTTPS. This is important for several reasons:

        - **Eliminates HTTP to HTTPS redirects**: HSTS removes the need for HTTP to HTTPS redirects, reducing latency and improving performance.
        - **Protects against man-in-the-middle attacks**: By enforcing HTTPS, HSTS prevents attackers from intercepting or tampering with data during transmission.
        - **Mitigates protocol downgrade attacks**: HSTS ensures that browsers do not fall back to insecure HTTP connections, even if an attacker attempts to force a downgrade.
        - **Improves user trust**: Enforcing HTTPS demonstrates a commitment to security, enhancing user confidence in the application.

        By setting the HSTS header, the system enforces secure connections, reduces the attack surface, and strengthens the overall security posture.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `server` block, add the following line:

                ```nginx
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Click on `Add` in the right pane.
            4. Set the name to `Strict-Transport-Security` and the value to `max-age=31536000; includeSubDomains; preload`.
            5. Click OK and restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
        title: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
  - uid: mondoo-http-security-obfuscate-server
    title: Remove or obfuscate the Server header
    mql: http.get.header.params.keys.none("Server") || http.get.header.params["Server"].map(downcase).none(_ == /nginx|microsoft|apache|lsws|openresty/)
    docs:
      desc: |
        This check ensures that the X-Powered-By header is removed to enhance security.

        **Why this matters**

        The X-Powered-By header reveals information about the server software being used. This can lead to several security risks:

        - **Increased attack surface**: Exposing server details can help attackers identify potential vulnerabilities specific to the software version.
        - **Facilitates reconnaissance**: Attackers can use this information to tailor their attacks, increasing the likelihood of success.
        - **Non-compliance with security best practices**: Security guidelines recommend minimizing information disclosure to reduce risks.

        By removing the X-Powered-By header, the system reduces the attack surface, mitigates reconnaissance efforts, and aligns with security best practices.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `http` block, add the following line:

                ```nginx
                server_tokens off;
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                ServerSignature Off
                ServerTokens Prod
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Remove the `Server` header if it exists.
            4. Restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#server
        title: OWASP HTTP Security Response Headers Cheat Sheet
  - uid: mondoo-http-security-no-x-powered-by
    title: Remove all X-Powered-By headers
    mql: http.get.header.params.keys.none("X-Powered-By")
    docs:
      desc: |
        This check ensures that the X-Powered-By header is removed to enhance security.

        **Why this matters**

        The X-Powered-By header reveals information about the server software being used. This can lead to several security risks:

        - **Increased attack surface**: Exposing server details can help attackers identify potential vulnerabilities specific to the software version.
        - **Facilitates reconnaissance**: Attackers can use this information to tailor their attacks, increasing the likelihood of success.
        - **Non-compliance with security best practices**: Security guidelines recommend minimizing information disclosure to reduce risks.

        By removing the X-Powered-By header, the system reduces the attack surface, mitigates reconnaissance efforts, and aligns with security best practices.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `http` block, add the following line:

                ```nginx
                proxy_hide_header X-Powered-By;
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header unset X-Powered-By
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Remove the `X-Powered-By` header if it exists.
            4. Restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-powered-by
        title: OWASP HTTP Security Response Headers Cheat Sheet
  - uid: mondoo-http-security-no-x-aspnet-version
    title: Remove all X-AspNet-Version headers
    mql: http.get.header.params.keys.none("X-AspNet-Version")
    docs:
      desc: |
        This check ensures that the X-AspNet-Version header is removed to enhance security.

        **Why this matters**

        The X-AspNet-Version header reveals information about the server software being used. This can lead to several security risks:

        - **Increased attack surface**: Exposing server details can help attackers identify potential vulnerabilities specific to the software version.
        - **Facilitates reconnaissance**: Attackers can use this information to tailor their attacks, increasing the likelihood of success.
        - **Non-compliance with security best practices**: Security guidelines recommend minimizing information disclosure to reduce risks.

        By removing the X-AspNet-Version header, the system reduces the attack surface, mitigates reconnaissance efforts, and aligns with security best practices.

      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `http` block, add the following line:

                ```nginx
                proxy_hide_header X-AspNet-Version;
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header unset X-AspNet-Version
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Remove the `X-AspNet-Version` header if it exists.
            4. Restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-aspnet-version
        title: OWASP HTTP Security Response Headers Cheat Sheet
  - uid: mondoo-http-security-no-x-aspnetmvc-version
    title: Remove all X-AspNetMvc-Version headers
    mql: http.get.header.params.keys.none("X-AspNetMvc-Version")
    docs:
      desc: |
        This check ensures that the X-AspNetMvc-Version header is removed to enhance security.

        **Why this matters**

        The X-AspNetMvc-Version header reveals information about the server software being used. This can lead to several security risks:

        - **Increased attack surface**: Exposing server details can help attackers identify potential vulnerabilities specific to the software version.
        - **Facilitates reconnaissance**: Attackers can use this information to tailor their attacks, increasing the likelihood of success.
        - **Non-compliance with security best practices**: Security guidelines recommend minimizing information disclosure to reduce risks.

        By removing the X-AspNetMvc-Version header, the system reduces the attack surface, mitigates reconnaissance efforts, and aligns with security best practices.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `http` block, add the following line:

                ```nginx
                proxy_hide_header X-AspNetMvc-Version;
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header unset X-AspNetMvc-Version
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Remove the `X-AspNetMvc-Version` header if it exists.
            4. Restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-aspnetmvc-version
        title: OWASP HTTP Security Response Headers Cheat Sheet
  - uid: mondoo-http-security-no-public-key-pins
    title: The header Public-Key-Pins is deprecated and should not be used
    mql: http.get.header.params.keys.none("Public-Key-Pins")
    docs:
      desc: |
        This check ensures that the Public-Key-Pins (HPKP) header is not used, as it is deprecated.

        **Why this matters**

        The Public-Key-Pins (HPKP) header was originally designed to prevent man-in-the-middle attacks by allowing websites to specify which public keys should be trusted for their certificates. However, it has been deprecated due to several issues:

        - **Risk of misconfiguration**: Incorrectly pinning keys can lead to websites becoming inaccessible if the pinned key is lost or compromised.
        - **Ease of abuse**: Attackers could maliciously pin keys to lock out legitimate site owners from their domains.
        - **Better alternatives available**: Modern mechanisms like Certificate Transparency and the use of the Expect-CT header provide safer and more effective ways to achieve similar goals.

        By avoiding the use of the HPKP header, the system reduces the risk of misconfiguration, mitigates potential abuse, and aligns with current best practices for secure web communication.
      remediation:
        - id: nginx
          desc: |
            **Using NGINX**

            1. Open your NGINX configuration file (typically found at `/etc/nginx/nginx.conf` or in a site-specific file under `/etc/nginx/sites-available/`).
            2. Inside the `http` block, add the following line:

                ```nginx
                add_header "X-Frame-Options" "DENY" always;
                ```

            3. Save the file and reload NGINX:

                ```bash
                sudo nginx -s reload
                ```
        - id: apache
          desc: |
            **Using Apache HTTPD**

            1. Open your Apache configuration file or `.htaccess` file.
            2. Add the following directive:

                ```apache
                Header unset Public-Key-Pins
                ```

            3. Make sure the headers module is enabled:

                ```bash
                sudo a2enmod headers
                sudo systemctl restart apache2
                ```
        - id: iis
          desc: |
            **Using IIS**

            1. Open the IIS Manager.
            2. Select your site and go to the `HTTP Response Headers` feature.
            3. Remove the `Public-Key-Pins` header if it exists.
            4. Restart IIS:

                ```bash
                iisreset
                ```
    refs:
      - url: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#public-key-pins-hpkp
        title: OWASP HTTP Security Response Headers Cheat Sheet
