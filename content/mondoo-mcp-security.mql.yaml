# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-mcp-security
    name: Mondoo Model Context Protocol (MCP) Security
    version: 1.0.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: mcp
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        This policy provides comprehensive security validation for Model Context Protocol (MCP) implementations.
        It focuses on validating tool definitions, preventing security vulnerabilities, and ensuring proper
        configuration of MCP servers and clients. 
        
        The policy covers two main areas:
        1. Content Security: Validates text content for PII, prompt injection, malicious URLs, explicit content, and Unicode attacks
        2. Schema Validation: Ensures proper structure and validation constraints for tools, prompts, and resources
        
        Key security controls include:
        - PII detection and prevention
        - Prompt injection attack detection
        - Malicious URL detection
        - Explicit content filtering
        - Unicode security validation
        - Schema completeness validation
        - Input parameter validation
    groups:
      - title: MCP Content Security Validation
        filters: asset.platform == 'mcp'
        checks:
          - uid: mondoo-mcp-pii-detection
          - uid: mondoo-mcp-prompt-injection-detection
          - uid: mondoo-mcp-link-detection
          - uid: mondoo-mcp-content-filtering
          - uid: mondoo-mcp-unicode-validation
      - title: MCP Schema and Structure Validation  
        filters: asset.platform == 'mcp'
        checks:
          - uid: mondoo-mcp-tool-parameters
          - uid: mondoo-mcp-resource-validation
    scoring_system: highest impact

queries:
  - uid: mondoo-mcp-pii-detection
    title: Detect personally identifiable information in MCP content
    mql: |
      mcp.tools.all(
        pii(input: description, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty &&
        pii(input: name, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty
      )
      mcp.prompts.all(
        pii(input: description, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty &&
        pii(input: name, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty &&
        pii(input: title, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty
      )
    docs:
      desc: |
        This check scans MCP tools and prompts for personally identifiable information (PII):
        - Tool names and descriptions must not contain PII
        - Prompt names, titles, and descriptions must not contain PII
        - Detected categories: person names, locations, credit cards
        
        PII detection prevents privacy violations and data exposure risks in MCP implementations.
        Tools and prompts should not request or contain sensitive personal information.
    refs:
      - title: OWASP Privacy Risks
        url: https://owasp.org/www-project-top-10-privacy-risks/

  - uid: mondoo-mcp-prompt-injection-detection
    title: Detect prompt injection attacks in MCP content
    mql: |
      mcp.tools.all(
        prompt.injection(description).results.map(_["score"]).none( _ > 0.8) &&
        prompt.injection(name).results.map(_["score"]).none( _ > 0.8)
      )
      mcp.prompts.all(
        prompt.injection(description).results.map(_["score"]).none( _ > 0.8) &&
        prompt.injection(name).results.map(_["score"]).none( _ > 0.8) &&
        prompt.injection(title).results.map(_["score"]).none( _ > 0.8)
      )
    docs:
      desc: |
        This check analyzes MCP tools and prompts for potential prompt injection attacks:
        - Tool names and descriptions are analyzed for injection patterns
        - Prompt names, titles, and descriptions are analyzed for injection patterns
        - Uses a threshold of 0.8 to catch potential injection attempts
        
        Prompt injection can manipulate AI models to perform unintended actions, bypass security
        controls, or leak sensitive information. This check helps prevent such attacks.
    refs:
      - title: OWASP LLM Prompt Injection 
        url: https://cheatsheetseries.owasp.org/cheatsheets/LLM_Prompt_Injection_Prevention_Cheat_Sheet.html

  - uid: mondoo-mcp-link-detection
    title: Detect embedded URLs in MCP content
    mql: |
      mcp.tools.none(regex.url == description)
      mcp.tools.none(regex.url == name)
      mcp.prompts.none(regex.url == description)
      mcp.prompts.none(regex.url == name)
      mcp.prompts.none(regex.url == title)
    docs:
      desc: |
        This check detects embedded URLs in MCP tools and prompts:
        - Tool names and descriptions must not contain HTTP/HTTPS URLs
        - Prompt names, titles, and descriptions must not contain HTTP/HTTPS URLs
        
        Embedded URLs could be used for phishing attacks, malicious redirects, or data exfiltration.
        MCP content should focus on functionality rather than including external links.
    refs:
      - title: OWASP Unvalidated Redirects and Forwards Prevention
        url: https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html

  - uid: mondoo-mcp-tool-parameters
    title: Ensure tool parameters have proper validation constraints
    mql: |
      mcp.tools.all(
        name != empty &&
        description != empty &&
        inputSchema != empty &&
        inputSchema.type == "object"
      )
    docs:
      desc: |
        This check ensures that MCP tool parameters have appropriate validation constraints:
        - All parameters must have defined types
        - String parameters should have maximum length limits
        
        Proper parameter validation prevents buffer overflow attacks, injection attacks,
        and ensures input validation at the tool level.
    refs:
      - title: Input Validation Guidelines
        url: https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html

  - uid: mondoo-mcp-content-filtering
    title: Filter inappropriate and explicit content in tool definitions
    mql: |
      mcp.tools.all(
        explicit.content(description).results == empty &&
        explicit.content(name).results == empty
      )
      mcp.prompts.all(
        explicit.content(description).results == empty &&
        explicit.content(title).results == empty
      )
    docs:
      desc: |
        This check scans MCP tool definitions for inappropriate content including:
        - Explicit or adult content
        - Hate speech or discriminatory language
        - Violence or harmful content
        - Spam or promotional content
        
        All tool definitions should maintain professional standards and comply
        with content policies to ensure a safe and appropriate environment.
    refs:
      - title: Content Moderation Best Practices
        url: https://blog.google/technology/ai/ai-principles/
      - title: Responsible AI Guidelines
        url: https://www.microsoft.com/en-us/ai/responsible-ai

  - uid: mondoo-mcp-unicode-validation
    title: Validate Unicode character usage for security
    mql: |
      mcp.tools.all(
        unicode(description).classification.none(majorCategory == "S") &&
        unicode(description).classification.none(category == "Cs") &&
        unicode(description).classification.none(category == "Co") &&
        unicode(description).classification.none(category == "Cn") &&
        unicode(name).classification.none(majorCategory == "S") &&
        unicode(name).classification.none(category == "Cs") &&
        unicode(name).classification.none(category == "Co") &&
        unicode(name).classification.none(category == "Cn")
      )
    docs:
      desc: |
        This check validates Unicode character usage in tool definitions to prevent:
        - Homograph attacks using similar-looking characters
        - Hidden or control characters that could cause rendering issues
        - Bidirectional text attacks
        - Private use or unassigned characters
        
        Only safe, printable Unicode characters should be used in tool definitions
        to prevent confusion and potential security issues.
    refs:
      - title: Homograph Attack Prevention
        url: https://en.wikipedia.org/wiki/IDN_homograph_attack

  - uid: mondoo-mcp-resource-validation
    title: Validate MCP resource and resource template security
    mql: |
      mcp.resources.all(
        name != empty &&
        description != empty &&
        explicit.content(description).results == empty &&
        pii(input: description, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty
      )
      mcp.resourceTemplates.all(
        name != empty &&
        description != empty &&
        explicit.content(description).results == empty &&
        pii(input: description, categories: ["PERSON", "LOCATION", "CREDIT_CARD"]).results == empty
      )
    docs:
      desc: |
        This check ensures MCP resources and resource templates are secure:
        - Resources must have non-empty names and descriptions
        - Resource descriptions must not contain explicit content
        - Resource descriptions must not request PII information
        - Resource templates follow the same security requirements
        
        Secure resource definitions prevent data exposure and ensure that resources
        do not violate content policies or privacy requirements.
    refs:
      - title: OWASP Privacy Risks
        url: https://owasp.org/www-project-top-10-privacy-risks/
      - title: Content Security Guidelines
        url: https://blog.google/technology/ai/ai-principles/
