# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: phoenix-plcnext
    name: Phoenix PLCnext Security Policy
    version: 1.1.0
    license: BUSL-1.1
    tags:
      benchmark: Mondoo Phoenix PLCnext
      date: "2023-02-11"
      mondoo.com/category: security
      mondoo.com/platform: linux,plc
      profile: PLCnext base security
    authors:
      - name: Mondoo Inc.
        email: hello@mondoo.com
    groups:
      - filters: |
          asset.family.contains("linux")
          asset.arch == "armv7l"
          file("/opt/plcnext").exists
        checks:
          - uid: phoenix-plcnext-01
          - uid: phoenix-plcnext-02
          - uid: phoenix-plcnext-03
          - uid: phoenix-plcnext-04
          - uid: phoenix-plcnext-05
          - uid: phoenix-plcnext-06
          - uid: phoenix-plcnext-07
          - uid: phoenix-plcnext-08
          - uid: phoenix-plcnext-09
          - uid: phoenix-plcnext-10
          - uid: phoenix-plcnext-11
          - uid: phoenix-plcnext-12
          - uid: phoenix-plcnext-13
          - uid: phoenix-plcnext-14
          - uid: phoenix-plcnext-15
          - uid: phoenix-plcnext-16
          - uid: phoenix-plcnext-17
          - uid: phoenix-plcnext-18
          - uid: phoenix-plcnext-19
          - uid: phoenix-plcnext-20
          - uid: phoenix-plcnext-21
          - uid: phoenix-plcnext-22
    scoring_system: highest impact
props:
  - uid: PLCKexAlgos
    title: Define the hardened key exchange algorithms for all SSH configurations
    mql: |
      return ["sntrup761x25519-sha512@openssh.com","curve25519-sha256@libssh.org","diffie-hellman-group-exchange-sha256"]
  - uid: PLCMacAlgos
    title: Define the accepted MAC algorithms
    mql: |
      return ["hmac-sha2-512-etm@openssh.com","hmac-sha2-256-etm@openssh.com","umac-128-etm@openssh.com","hmac-sha2-512","hmac-sha2-256"]
  - uid: PLCSshdCiphers
    title: Define the hardened ciphers for all SSH configurations
    mql: |
      return ["chacha20-poly1305@openssh.com","aes256-gcm@openssh.com","aes128-gcm@openssh.com","aes256-ctr","aes192-ctr","aes128-ctr"]
queries:
  - uid: phoenix-plcnext-01
    title: Ensure latest PLCnext Firmware is installed
    mql: |
      file("/etc/plcnext/arpversion").content.contains("23.0.0.65")
    docs:
      desc: |
        Installing the latest firmware is important for several reasons:

        - Security: Firmware updates often include security patches to address vulnerabilities in the system, making it less susceptible to hacking or other security threats.
        - Bug fixes: Updates often include fixes for bugs and other software issues, which can improve the performance and stability of the device.
        - New features: Updates may add new features or functionality to the device, making it more versatile and improving its overall performance.
        - Compatibility: Installing the latest firmware can ensure compatibility with other devices or systems, preventing conflicts or connectivity issues.
        - Performance: Firmware updates can improve the overall performance of the device, such as improving processing speed, battery life, or other key metrics.

        By installing the latest firmware, you can ensure that your device is secure, performs optimally, and is fully compatible with other systems. This can help reduce downtime, improve productivity, and extend the lifespan of your device.
      audit: |
        Run the `cat /etc/plcnext/arpversion` command and verify that output Arpversion is greater than 23.0.0.65
      remediation: Please follow the update instructions from [Firmware update page](https://www.plcnext.help/te/WBM/Administration_Firmware_Update.htm)
    refs:
      - url: https://www.phoenixcontact.com/en-pc/products/controller-axc-f-2152-2404267#firmware-link-target
        title: PLCnext Firmware download page
      - url: https://www.plcnext-runtime.com/ch02-04-firmware.html#firmware
        title: The PLCnext Runtime
  - uid: phoenix-plcnext-02
    title: Ensure Firewall is active
    mql: |
      command("nft list tables").stdout != ""
      command("nft list tables").stdout.contains("plcnext_filter")
      command("nft list tables").stdout.contains("plcnext_ip6_filter")
    docs:
      desc: |
        The hazards in public and even private networks are omnipresent, and nowadays no private user would come up with the idea to put a computer on the network without a proper firewall setting. So how would that be different when working with a PLC?

        PLCnext Technology  relies on the proven and commonly used LinuxÂ® firewall nftables. On the PLCnext Control, you don't need to configure the firewall rules via cryptic Linux shell commands: Just log on to the Web-based Management and choose from the predefined basic rules, or add your own rules to the set.

        In addition to the PLCnext Technology filter table, you can activate other filter tables. This might be necessary if you require certain functions that are not supported by the firewall configuration via the WBM.

        This additional configuration is implemented via independent filter tables. You have to create the required functions via nftables commands. For this, you can edit a rule set in Linux using a text editor or load the file to the PC and change it.

        For detailed information on this Linux feature, refer to the nftables documentation.

        Here you see a set of firewall filter files that is present in the /etc/nftables directory on a PLCnext Control
      audit: |
        Run the `nft list tables` and `nft list table <table>` command and verify that output.
      remediation: Please follow the update instructions from [PLCnext Firewall configuration](https://www.plcnext.help/te/WBM/Security_Firewall.htm)
    refs:
      - url: https://www.plcnext.help/te/WBM/Security_Firewall.htm
        title: PLCnext Firewall configuration
      - url: https://www.plcnext.help/te/Security/Security_nftables.htm
        title: Additional firewall filters via nftables
  - uid: phoenix-plcnext-03
    title: Ensure only strong Key Exchange algorithms are used
    props:
      - uid: PLCKexAlgos
        title: Define the hardened key exchange algorithms for all SSH configurations
        mql: |
          return ["sntrup761x25519-sha512@openssh.com","curve25519-sha256@libssh.org","diffie-hellman-group-exchange-sha256"]
    mql: |
      sshd.config.kexs != empty
      sshd.config.kexs.containsOnly(props.PLCKexAlgos)
    docs:
      desc: Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to add or modify the `KexAlgorithms` parameter so that it contains a comma-separated list of the site approved key exchange algorithms

        ```
        KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
        ```
  - uid: phoenix-plcnext-04
    title: Ensure only strong MAC algorithms are used
    props:
      - uid: PLCMacAlgos
        title: Define the accepted MAC algorithms
        mql: |
          return ["hmac-sha2-512-etm@openssh.com","hmac-sha2-256-etm@openssh.com","umac-128-etm@openssh.com","hmac-sha2-512","hmac-sha2-256"]
    mql: |
      sshd.config.macs != empty
      sshd.config.macs.containsOnly(props.PLCMacAlgos)
    docs:
      desc: This variable limits the types of MAC algorithms that SSH can use during communication.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to add or modify the `MACs` parameter so that it contains a comma-separated list of the site approved MACs

        Example:

        ```
        MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256
        ```
  - uid: phoenix-plcnext-05
    title: Ensure only strong ciphers are used
    props:
      - uid: PLCSshdCiphers
        title: Define the hardened ciphers for all SSH configurations
        mql: |
          return ["chacha20-poly1305@openssh.com","aes256-gcm@openssh.com","aes128-gcm@openssh.com","aes256-ctr","aes192-ctr","aes128-ctr"]
    mql: |
      sshd.config.ciphers != empty
      sshd.config.ciphers.containsOnly(props.PLCSshdCiphers)
    docs:
      desc: This variable limits the ciphers that SSH can use during communication.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to add or modify the `Ciphers` parameter so that it contains a comma-separated list of the site approved ciphers

        Example:

        ```
        Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
        ```
  - uid: phoenix-plcnext-06
    title: Ensure current system time is synchronized
    mql: |
      processes.where( executable == /ntp/).length == 1
      command('date -u --date="$(curl -v install.mondoo.com 2>&1 | grep Date: | cut -d" " -f3-9)"').stdout.trim <= command('date --date "1 min" -u').stdout.trim
      command('date -u --date="$(curl -v install.mondoo.com 2>&1 | grep Date: | cut -d" " -f3-9)"').stdout.trim >= command('date --date "1 min ago" -u').stdout.trim
    docs:
      desc: |
        A system's time should be synchronized between all systems in an environment. This is usually done by setting up an authoritative time server with which all systems in an environment synchronize their clocks.
      audit: |
        Execute this command to get the actual system time in UTC:

        ```bash
        date -u
        ```

        To get the current upstream time execute this command:

        _curl:_

        ```bash
        date -u --date="$(curl -v --silent install.mondoo.com 2>&1 | grep Date: | cut -d" " -f3-9)"
        ```
      remediation: Please follow the Phoenix guide [NTP](https://www.plcnext.help/te/Operating_System/System_time.htm#XREF_68130_2_8_2_NTP_Network)
  - uid: phoenix-plcnext-07
    title: Ensure secure permissions on SSH private host key files are set
    mql: |
      files.
        find(from: "/etc/ssh", type: "file").
        where(path == /ssh_host_.*key$/).list {
          permissions.user_executable == false
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
        }
    docs:
      desc: An SSH private key is one of two files used in SSH public key authentication. In this authentication method, The possession of the private key is proof of identity. Only a private key corresponding to a public key can authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.
      remediation:
        - id: cli
          desc: |
            Run this command to set permissions and ownership on the SSH host private key files:

            ```bash
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0640 {} \; -exec chown root:ssh_keys {} \;
            ```
  - uid: phoenix-plcnext-08
    title: Ensure secure permissions on SSH public host key files are set
    mql: |
      files.
        find(from: "/etc/ssh", type: "file").
        where(path == /ssh_host_.*key.pub$/).list {
          permissions.user_executable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_writeable == false
          permissions.other_executable == false
        }
    docs:
      desc: An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key corresponding to a private key can authenticate successfully.
      remediation: |-
        Run this command to set permissions and ownership on the SSH host public key files:

        ```bash
        find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod 0644 {} \; -exec chown root:root {} \;
        ```
  - uid: phoenix-plcnext-09
    title: Ensure SSH Protocol is set to 2
    mql: |
      sshd.config.params["Protocol"] == 2
    docs:
      desc: 'SSH supports two different and incompatible protocols: SSH1 and SSH2. SSH1 was the original protocol and was subject to security issues. SSH2 is more advanced and secure.'
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `Protocol`parameter as follows:

        ```
        Protocol 2
        ```
  - uid: phoenix-plcnext-10
    title: Ensure SSH LogLevel is appropriate
    mql: |
      sshd.config.params["LogLevel"] == /INFO|VERBOSE/
    docs:
      desc: |-
        `INFO` level is the basic level that only records the login activity of SSH users. In many situations, such as incident response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field.

        `VERBOSE` level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `LogLevel` parameter as follows:

        ```
        LogLevel VERBOSE
        ```

        or

        ```
        LogLevel INFO
        ```
  - uid: phoenix-plcnext-11
    title: Ensure SSH X11 forwarding is disabled
    mql: |
      sshd.config.params["X11Forwarding"] == "no"
    docs:
      desc: The X11Forwarding parameter allows tunneling X11 traffic through the connection to enable remote graphic connections.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `X11Forwarding` parameter as follows:

        ```
        X11Forwarding no
        ```
  - uid: phoenix-plcnext-12
    title: Ensure SSH MaxAuthTries is set to 4 or less
    mql: |
      sshd.config.params["MaxAuthTries"] <= 4
    docs:
      desc: The `MaxAuthTries` parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half this maximum value, error messages will be written to the `syslog` file detailing the login failure.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `MaxAuthTries` parameter as follows:

        ```
        MaxAuthTries 4
        ```
  - uid: phoenix-plcnext-13
    title: Ensure SSH IgnoreRhosts is enabled
    mql: |
      sshd.config.params["IgnoreRhosts"] == "yes"
    docs:
      desc: The `IgnoreRhosts` parameter specifies that `.rhosts` and `.shosts` files will not be used in `RhostsRSAAuthentication` or `HostbasedAuthentication` .
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `IgnoreRhosts` parameter as follows:

        ```
        IgnoreRhosts yes
        ```
  - uid: phoenix-plcnext-14
    title: Ensure SSH HostbasedAuthentication is disabled
    mql: |
      sshd.config.params["HostbasedAuthentication"] == "no"
    docs:
      desc: The `HostbasedAuthentication` parameter specifies if authentication is allowed through trusted hosts via the user of `.rhosts`, or `/etc/hosts.equiv`, along with successful public key client host authentication. This option only applies to SSH Protocol Version 2.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `HostbasedAuthentication` parameter as follows:

        ```
        HostbasedAuthentication no
        ```
  - uid: phoenix-plcnext-15
    title: Ensure SSH root login is disabled or set to prohibit-password
    mql: |
      sshd.config.params["PermitRootLogin"] == "no" || sshd.config.params["PermitRootLogin"] == "prohibit-password"
    docs:
      desc: The `PermitRootLogin` parameter specifies if the root user can log in using ssh(1). The default is no.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `PermitRootLogin` parameter as follows:

        ```
        PermitRootLogin no
        ```

        or

        ```
        PermitRootLogin prohibit-password
        ```
  - uid: phoenix-plcnext-16
    title: Ensure SSH PermitEmptyPasswords is disabled
    mql: |
      sshd.config.params["PermitEmptyPasswords"] == "no"
    docs:
      desc: The `PermitEmptyPasswords` parameter specifies if the SSH server allows login to accounts with empty password strings.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `PermitEmptyPasswords` parameter as follows:

        ```
        PermitEmptyPasswords no
        ```
  - uid: phoenix-plcnext-17
    title: Ensure SSH PermitUserEnvironment is disabled
    mql: |
      sshd.config.params["PermitUserEnvironment"] == "no"
    docs:
      desc: The `PermitUserEnvironment` option allows users to present environment options to the `ssh` daemon.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `PermitUserEnvironment` parameter as follows:

        ```
        PermitUserEnvironment no
        ```
  - uid: phoenix-plcnext-18
    title: Ensure SSH Idle Timeout Interval is configured
    mql: |
      sshd.config.params {
        _["ClientAliveInterval"] >= 1
        _["ClientAliveInterval"] <= 300
        _["ClientAliveCountMax"] <= 3
      }
    docs:
      desc: The two options `ClientAliveInterval` and `ClientAliveCountMax` control the timeout of ssh sessions. When the `ClientAliveInterval` variable is set, ssh sessions that have no activity for the specified length of time are terminated. When the `ClientAliveCountMax` variable is set, `sshd` will send client alive messages at every `ClientAliveInterval` interval. When the number of consecutive client alive messages are sent with no response from the client, the `ssh` session is terminated. For example, if the `ClientAliveInterval` is set to 15 seconds and the `ClientAliveCountMax` is set to 3, the client `ssh` session will be terminated after 45 seconds of idle time.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `ClientAliveInterval` and `ClientAliveCountMax` parameters according to site policy:

        ```
        ClientAliveInterval 300
        ClientAliveCountMax 0
        ```
  - uid: phoenix-plcnext-19
    title: Ensure SSH LoginGraceTime is set to one minute or less
    mql: |
      sshd.config.params {
        _["LoginGraceTime"] >= 1
        _["LoginGraceTime"] <= 60
      }
    docs:
      desc: The `LoginGraceTime` parameter specifies the time allowed for successful authentication to the SSH server. The longer the grace period is, the more open unauthenticated connections can exist. Like other session controls, the grace period should be limited to appropriate organizational limits to ensure the service is available for needed access.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `LoginGraceTime` parameter as follows:

        ```
        LoginGraceTime 60
        ```
  - uid: phoenix-plcnext-20
    title: Ensure SSH access is limited
    mql: |
      sshd.config.params["AllowUsers"] != "" || sshd.config.params["DenyUsers"] != ""
      sshd.config.params["AllowGroups"] != "" || sshd.config.params["DenyGroups"] != ""
    docs:
      desc: |-
        There are several options available to limit which users and groups can access the system via SSH. It is recommended that at least one of the following options be leveraged: `AllowUsers`

        The `AllowUsers` variable gives the system administrator the option of allowing specific users to `ssh` into the system. The list consists of space-separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host. `AllowGroups`

        The `AllowGroups` variable gives the system administrator the option of allowing specific groups of users to `ssh` into the system. The list consists of space-separated group names. Numeric group IDs are not recognized with this variable. `DenyUsers`

        The `DenyUsers` variable gives the system administrator the option of denying specific users to `ssh` into the system. The list consists of space-separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying user access from a particular host, the entry can be specified in the form of user@host. `DenyGroups`

        The `DenyGroups` variable gives the system administrator the option of denying specific groups of users to `ssh` into the system. The list consists of space-separated group names. Numeric group IDs are not recognized with this variable.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file and add one or more of these parameters:

        ```
        AllowUsers <userlist>
        AllowGroups <grouplist>

        DenyUsers <userlist>
        DenyGroups <grouplist>
        ```
  - uid: phoenix-plcnext-21
    title: Ensure SSH warning banner is configured
    mql: |
      sshd.config.params["Banner"] != ""
    docs:
      desc: The `Banner` parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `Banner` parameter as follows:

        ```
        Banner /opt/plcnext/config/System/Um/SystemUseNotification.txt
        ```
  - uid: phoenix-plcnext-22
    title: Ensure SSH password authentication is disabled
    mql: |
      sshd.config.params["PasswordAuthentication"] == "no"
      sshd.config.params["PubkeyAuthentication"] == "yes"
    docs:
      desc: |
        Using SSH key authentication is considered to be a more secure method of logging into a remote system than using passwords. Here are some reasons why you might want to consider using only SSH key authentication:

        - Increased security: SSH key authentication uses public-key cryptography to secure the connection, which is considered to be much more secure than using passwords. Passwords can be guessed or cracked, whereas an SSH key must be physically acquired by an attacker to be used to gain unauthorized access.

        - Convenience: Once you have set up an SSH key pair, logging into a remote system is faster and more convenient than typing a password every time.

        - Improved audit trail: SSH key authentication provides a more detailed audit trail, making it easier to detect and respond to unauthorized access attempts.

        - Automation: SSH key authentication can be automated, making it easier to automate tasks and access remote systems without human intervention.

        While there are benefits to using only SSH key authentication, it is important to ensure that your SSH keys are managed properly, with strong passwords, and are backed up in case of loss or corruption.

        In summary, allowing only SSH key authentication can provide a more secure and convenient way to access remote systems, but it is important to manage your keys properly to ensure that the increased security is not compromised.
      remediation: |-
        Edit the `/etc/ssh/sshd_config` file to set the `Banner` parameter as follows:

        ```
        PasswordAuthentication no
        PubkeyAuthentication yes
        ```
    refs:
      - url: https://pxc1.esc-eu-central-1.empolisservices.com/service-express/portal/project1_p/document/en-so-30b315c3-3e44-4292-97d4-6883672cd34c?context=%7B%7D
        title: How to set up key-based SSH authentication to a PLCnext Control device
