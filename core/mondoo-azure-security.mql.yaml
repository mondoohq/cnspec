# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-azure-security
    name: Mondoo Microsoft Azure Security
    version: 2.0.3
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: azure,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        The Mondoo Azure Security policy is designed to identify critical misconfigurations that could leave your Azure infrastructure vulnerable to attackers. This policy helps organizations detect and remediate security risks before they can be exploited, reducing the likelihood of unauthorized access, data breaches, privilege escalation, and operational disruptions.

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable. This policy is open-source and we welcome contributions from the community, whether it's adding new checks, refining existing ones, or providing feedback. If you have suggestions to improve this policy, visit our [cnspec-policies repository](https://github.com/mondoohq/cnspec-policies).
    groups:
      - title: Azure Core
        filters: |
          asset.runtime == "azure"
        checks:
          - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
          - uid: mondoo-azure-security-diagnostic-settings-essential-categories
          - uid: mondoo-azure-security-diagnostic-settings-exist
          - uid: mondoo-azure-security-disable-udp-virtualmachines
          - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
          - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
          - uid: mondoo-azure-security-ensure-disabled-public-access-sql
          - uid: mondoo-azure-security-ensure-logging-enabled-kv
          - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
          - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
          - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
          - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
          - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
          - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
          - uid: mondoo-azure-security-keyvault-public-access-disabled
          - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
          - uid: mondoo-azure-security-public-access-level-private-blob-containers
          - uid: mondoo-azure-security-rdp-access-restricted-from-internet
          - uid: mondoo-azure-security-secure-transfer-required-enabled
          - uid: mondoo-azure-security-sql-server-audit-on
          - uid: mondoo-azure-security-sql-server-tde-on
          - uid: mondoo-azure-security-ssh-access-restricted-from-internet
          - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    scoring_system: highest impact
queries:
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure OS Disks in azure virtual machines are encrypted with Customer Managed Keys (CMK)
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-single
      - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-api
    docs:
      desc: |
        Encryption of OS disks for Azure virtual machines is critical for securing boot volumes from unauthorized access and data breaches. The use of Customer Managed Keys (CMK) offers enhanced control over the encryption and decryption processes, allowing organizations to manage their own keys via Azure Key Vault. This approach not only meets compliance requirements but also provides a higher level of security by enabling key rotation and revocation capabilities. Encrypting OS disks ensures that the data is unreadable to unauthorized users, protecting it from both external attacks and insider threats.. Customer managed keys can be either Azure Disk Encryption (ADE) or server-side encryption (SSE).
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Virtual machines** in the Azure Portal.
        2. Select a virtual machine and access **Disks** under the Settings menu.
        3. Verify the encryption settings for the OS disk to ensure it uses CMK.

        **Automated Audit with Azure CLI:**

        List and check the encryption settings for all disks in a specific resource group:

        ```bash
        az disk list --resource-group "yourResourceGroupName" --query "[].{Name:name, ResourceGroupName:resourceGroup, EncryptionSettings:encryptionSettingsCollection}" -o table
        ```

        **Automated Audit with PowerShell:**

        ```powershell
        Get-AzDisk -ResourceGroupName "yourResourceGroupName" | Select-Object Name, ResourceGroupName, EncryptionSettingsCollection
        ```

        Ensure the EncryptionType is set to EncryptionAtRestWithCustomerKey for OS disks.
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into the Azure Portal and navigate to **Disks**.
        2. Select the OS disk you wish to encrypt.
        3. In the **Encryption** section, set **Encryption type** to **Customer-managed keys**.
        4. Specify the Azure Key Vault and select the appropriate key.
        5. Save the changes.

        ### Azure CLI

        ```bash
        az vm encryption enable --resource-group <ResourceGroupName> --name <VMName> --disk-encryption-keyvault <KeyVaultName> --key-encryption-key <KeyName> --volume-type OS
        ```

        ### Terraform

        __Encrypt disks Linux VM__

        ```hcl
        # Encrypt Linux OS disk with Terraform
        resource "azure_linux_virtual_machine" "example" {
          name                = "example-linux-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks Windows VM__

        ```hcl
        resource "azure_windows_virtual_machine" "example" {
          name                = "example-windows-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks managed disks__

        ```hcl
        resource "azure_managed_disk" "example" {
          name                 = var.disk_name
          location             = var.location
          resource_group_name  = var.resource_group_name
          ...

          encryption_settings {
            enabled = true
          }

          ...
        }
        ```
    refs:
      - url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
        title: Overview of managed disk encryption options
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-single
    filters: |
      asset.platform == "azure-compute-vm-api"
    mql: |
      azure.subscription.compute.vm.osDisk.properties.encryption.type == "EncryptionAtRestWithCustomerKey"
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.compute.vms.all(osDisk.properties.encryption.type == "EncryptionAtRestWithCustomerKey")
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsSSH
        title: a list of disallowed TCP ports, by default SSH listens only on TCP port 22, add more ports as needed
        mql: |
          return [
            22,
          ]
    variants:
      - uid: mondoo-azure-security-ssh-access-restricted-from-internet-single
      - uid: mondoo-azure-security-ssh-access-restricted-from-internet-api
    docs:
      desc: |
        Restricting SSH access from the internet minimizes the risk of brute force and other unauthorized access attempts on Azure resources such as virtual machines. Public internet exposure of SSH, especially on the default port 22, significantly increases the attack surface. It's crucial to evaluate and restrict SSH access by configuring network security groups (NSGs) to allow only necessary connections, preferably from known, secure sources. Implementing stringent access controls for SSH enhances security by preventing attackers from using compromised VMs as a pivot point for broader network intrusions.
      audit: |
        **Manual Audit via Azure Portal:**

          **Checking via Network Security Groups (NSGs) for All Resources:**
          1. From the main Azure Portal menu, navigate to **Network security groups**.
          2. Select an NSG associated with the resources you want to check.
          3. Go to the **Inbound security rules** section.
          4. Review all the rules to ensure none allow SSH access (port 22, TCP) from broadly defined sources such as 'Any', '0.0.0.0', or 'Internet'.
          5. Confirm that rules configured to permit SSH access are scoped to specific, known IP addresses or ranges to minimize exposure.

          **Checking Specific Virtual Machines:**
          1. Log into the Azure Portal.
          2. Navigate to **Virtual machines**.
          3. Select a specific virtual machine to review.
          4. Within the virtual machine's blade, select **Networking** under the settings menu.
          5. Access the **Networking** blade of the selected VM, then review the **Inbound port rules**.
          6. Ensure there are no rules allowing SSH access (port 22, TCP) from 'Any' or 'Internet' source address prefixes. Only secure, specified IP ranges should be allowed, if necessary.

        **Automated Audit with Azure CLI:**

        List NSGs and check for SSH access rules:

        ```bash
        az network nsg list --query "[].{NSG: name, Rules: securityRules[?access=='Allow' && protocol=='Tcp' && direction=='Inbound' && (destinationPortRange=='22' || destinationPortRanges.contains('22')) && (sourceAddressPrefix=='*' || sourceAddressPrefix=='0.0.0.0' || sourceAddressPrefix=='<nw>/0' || sourceAddressPrefix=='/0' || sourceAddressPrefix=='internet' || sourceAddressPrefix=='any')]}" -o table
        ```
      remediation: |
        ### Configuring Network Security via Azure Portal:

        1. In the Azure Portal, navigate to **Network Security Groups (NSG)** associated with your VMs.
        2. Review or modify the inbound security rules:
          - Set `source_address_prefix` to a specific IP range or a VPN gateway rather than 'Any' or 'Internet'.
          - Ensure that the `destination_port_range` does not include TCP port 22 unless absolutely necessary and from a secure source.

        ### Using Azure CLI:

        Update or create a new NSG rule to restrict SSH access:

        ```bash
        az network nsg rule create --resource-group <ResourceGroupName> --nsg-name <NSGName> --name RestrictSSH --priority 1001 --direction Inbound --access Deny --protocol Tcp --source-address-prefixes <YourSecureIPRange> --destination-port-ranges 22
        ```

        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "my_terraform_nsg" {
          name                = "myNetworkSecurityGroup"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "SSH"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "22"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet-single
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsSSH {
        disallowedPortSSH = _
        disallowedPortSSH
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortSSH && toPort >= disallowedPortSSH))
      }
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet-api
    filters: |
      asset.platform == "azure"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.mondooAzureSecurityDisallowedPortsSSH {
        disallowedPortSSH = _
        disallowedPortSSH
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= disallowedPortSSH && toPort >= disallowedPortSSH)))
      }
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsRDP
        title: a list of disallowed TCP ports, by default RDP listens only on TCP port 3389, add more ports as needed
        mql: |
          return [
            3389,
          ]
    variants:
      - uid: mondoo-azure-security-rdp-access-restricted-from-internet-single
      - uid: mondoo-azure-security-rdp-access-restricted-from-internet-api
    docs:
      desc: |
        Restricting RDP access from the internet is crucial for protecting Azure resources against unauthorized access and potential security breaches. RDP, typically listening on TCP port 3389, is a common target for many Cyber attacks. By limiting RDP access to only trusted internal networks or through secure tunnels, the risk of these attacks is significantly reduced. This security measure is essential for maintaining the integrity and security of Azure environments, preventing attackers from using compromised VMs as launch points for further attacks within and beyond the Azure network.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log into the Azure Portal.
        2. Navigate to **Network security groups** under the Networking or directly through the search bar.
        3. For each NSG, access the **Inbound security rules**.
        4. Carefully review each rule to identify any that allow inbound RDP traffic (TCP port 3389):
          - Check for rules where the protocol is set to `TCP`.
          - The destination port or port range includes `3389`.
          - The source address prefix is too broad, such as 'Any', '0.0.0.0', '<nw>/0', '/0', 'internet', or 'any'.
        5. Note down any NSG rules that do not comply with your organization's security policy regarding restricted access to RDP. These rules should ideally allow access only from trusted, secure networks, and not from the open internet.

        1. Navigate to **Virtual Machines** in the Azure Portal.
        2. For each VM, select the **Networking** blade to review network configurations.
        3. Check the **Inbound port rules** under the associated Network Security Group (NSG).
        4. Verify that there are no rules allowing RDP access (TCP port 3389) from 'Any' or 'Internet'. Only secure, specified IP ranges should be allowed if necessary.

        **Automated Audit with Azure CLI:**

        List NSGs and verify RDP access rules:

        ```bash
        az network nsg list --query "[].{NSG: name, Rules: securityRules[?access=='Allow' && protocol=='Tcp' && direction=='Inbound' && (destinationPortRange=='3389' || destinationPortRanges.contains('3389')) && (sourceAddressPrefix=='*' || sourceAddressPrefix=='0.0.0.0' || sourceAddressPrefix=='<nw>/0' || sourceAddressPrefix=='/0' || sourceAddressPrefix=='internet' || sourceAddressPrefix=='any')]}" -o table
        ```
      remediation: |
        ### Azure Portal Method:

        1. Log into the Azure Portal and navigate to **Network Security Groups**.
        2. Select the NSG associated with your VM.
        3. Review the **Inbound security rules** and modify or delete any rules that allow internet access to port 3389.
        4. Preferably, change the `source_address_prefix` to more restrictive settings, such as a specific IP range or a secure VPN gateway.

        ### Using Azure CLI:

        Update or create NSG rules to securely restrict RDP access:

        ```bash
        az network nsg rule create --resource-group <ResourceGroupName> --nsg-name <NSGName> --name RestrictRDP --priority 1001 --direction Inbound --access Deny --protocol Tcp --source-address-prefixes <YourSecureIPRange> --destination-port-ranges 3389
        ```

        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "example" {
          name                = "example-rdp-security"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "RDP"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "3389"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet-single
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsRDP {
        disallowedPortRDP = _
        disallowedPortRDP
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortRDP && toPort >= disallowedPortRDP))
      }
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet-api
    filters: |
      asset.platform == "azure"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.mondooAzureSecurityDisallowedPortsRDP {
        disallowedPortRDP = _
        disallowedPortRDP
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= disallowedPortRDP && toPort >= disallowedPortRDP)))
      }
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Mandate HTTPS for Secure Data Transfer to azure storage accounts
    impact: 80
    variants:
      - uid: mondoo-azure-security-secure-transfer-required-enabled-api
      - uid: mondoo-azure-security-secure-transfer-required-enabled-single
    docs:
      desc: |
        This check ensures that "Secure transfer required" is enabled.  This setting enforces the use of HTTPS for data operations, ensuring that data transmitted to and from Azure storage accounts is secured. It's an important security measure to protect data from interception or tampering during transmission, aligning with best practices for data security in the cloud.
        When the 'secure transfer required' setting is enabled in Azure, it mandates the use of HTTPS for accessing storage accounts through REST APIs. Any HTTP requests are automatically rejected. This also impacts the Azure files service; unencrypted connections, including certain SMB protocols and some Linux SMB clients, will fail. However, it's important to note that Azure storage doesn't support HTTPS for custom domain names, so this security feature doesn't apply when using a custom domain. This setting is crucial for ensuring that data in transit is encrypted and secure.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** from the Azure portal.
        2. For each storage account, select **Configuration** under the settings panel.
        3. Verify that the **Secure transfer required** option is set to **Enabled**.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to check the status of the 'Secure transfer required' setting across all storage accounts:

        ```bash
        az storage account list --query "[].{AccountName:name, SecureTransferEnabled: enableHttpsTrafficOnly}" -o table
        ```
      remediation: |
        ### Enforcing Secure Transfer via Azure Portal:

        1. Access the Azure Portal and go to **Storage Accounts**.
        2. Select each storage account individually.
        3. Navigate to **Configuration** under the settings menu.
        4. Set the **Secure transfer required** option to **Enabled**.
        5. Save the changes to enforce HTTPS for all incoming and outgoing data transactions.

        ### Using Azure CLI:

        Enable 'Secure transfer required' for an individual storage account using the following command:

        ```bash
        az storage account update --name <StorageAccountName> --resource-group <ResourceGroupName> --https-only true
        ```

        ### Terraform

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          ...
          enable_https_traffic_only = true
        }
        ```
  - uid: mondoo-azure-security-secure-transfer-required-enabled-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.storage.accounts.all(properties.EnableHTTPSTrafficOnly == true)
  - uid: mondoo-azure-security-secure-transfer-required-enabled-single
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.EnableHTTPSTrafficOnly == true
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that anonymous access to blob containers and public access on storage accounts are disabled
    impact: 80
    variants:
      - uid: mondoo-azure-security-public-access-level-private-blob-containers-single
      - uid: mondoo-azure-security-public-access-level-private-blob-containers-api
    docs:
      desc: |
        This check ensures that anonymous access to blob containers is disabled and public access on storage accounts is disabled. The configuration should prevent any form of anonymous blob access and ensure that all access to storage accounts and their blob containers are authenticated and authorized.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to Storage Accounts.
        2. For each storage account, go to the Networking setting under Security + networking.
        3. Ensure the 'Public Network Access' setting is set to 'Disabled'.
        4. In the storage account menu pane, under the 'Settings' section, select 'Configuration'.
        5. Under 'Allow Blob Anonymous Access', ensure that the setting is 'Disabled'.

        **Automated Audit with Azure CLI:**

        1. Authenticate using az login and ensure you are in the correct subscription.
        2. Use the following command to check the 'Public Network Access' setting:

        ```bash
        az storage account show --name <storage-account> --resource-group <resource-group> --query "{publicNetworkAccess:publicNetworkAccess}"
        ```

        ```bash
        az storage account show --name <yourStorageAccountName> --query allowBlobPublicAccess
        ```

      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_container" "example_storage_container" {
            ...
          container_access_type = "private"
        }
        ```

        ### Microsoft Azure Portal

        1. Go to Storage Accounts.
        2. For each storage account, go to Networking in Security + networking.
        3. Set 'Public Network Access' to 'Disabled'.
        4. Select a Storage Account and in the settings pane, select 'Configuration'.
        5. Under 'Allow Blob Anonymous Access', select 'Disabled'.
        6. For each container, change the access level to 'Private (no anonymous access)'.

        ### Azure CLI

        - Disable public network access:

          ```bash
          az storage account update --name <storage-account> --resource-group <resource-group> --public-network-access Disabled
          ```

        - Set blob containers to private access:

          ```bash
          az storage container set-permission --name <container_name> --public-access off --account-name <account_name> --account-key <account_key>
          ```
  - uid: mondoo-azure-security-public-access-level-private-blob-containers-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" )
      azure.subscription.storage.accounts.all(properties.PublicNetworkAccess == "Disabled")
  - uid: mondoo-azure-security-public-access-level-private-blob-containers-single
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Enforce Deny as Default Network Access for Azure Storage Accounts
    impact: 80
    variants:
      - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-single
      - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-api
    docs:
      desc: |
        This check ensures that Azure storage accounts have their default network access rule set to "Deny". This setting is pivotal in enhancing security by ensuring that only explicitly allowed networks can access the storage accounts. When the default action is set to "Deny", access is blocked for any request that does not match a specified allowed rule. This configuration minimizes the risk of unauthorized access, ensuring that only traffic from approved sources, such as specific Azure Virtual Networks or designated public IP addresses, can access the storage data. It is a foundational element in securing storage accounts from potential external threats and unauthorized access attempts.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** in the Azure Portal.
        2. Select a storage account and select the **Networking** blade.
        3. Under the **Firewalls and virtual networks** section, review the **Default action**.
        4. Ensure the Default action is set to **Deny**. This setting should block all access unless explicitly allowed by other network rules.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to verify the default network access rule for all storage accounts:

        ```bash
        az storage account list --query "[].{AccountName: name, DefaultAction: networkRuleSet.defaultAction}" -o table
        ```

        This command lists each storage account along with the default action. Verify that all entries show "Deny" as the default action.
      remediation: |
        ### Configuring Default Action via Azure Portal:

        1. Access the Azure Portal and go to **Storage Accounts**.
        2. Select the storage account you wish to configure.
        3. select the **Networking** blade.
        4. Navigate to the **Firewalls and virtual networks** section.
        5. Set the **Default action** to **Deny**.
        6. Save your changes to enforce that all unrecognized network traffic is blocked by default.

        ### Using Azure CLI:

        To set the default network access rule to "Deny" for an existing storage account, use the following Azure CLI command:

        ```bash
        az storage account update --name <StorageAccountName> --resource-group <ResourceGroupName> --default-action Deny
        ```

        This command updates the storage account to deny all traffic by default, significantly enhancing the security posture by limiting access to only configured exceptions.

        ### Terraform

        ```hcl
        # Ensure the `default_action` is set to `Deny`

        resource "azure_storage_account_network_rules" "example_storage_account" {
          resource_group_name  = azure_resource_group.example.name
          storage_account_name = azure_storage_account.example.name

          default_action       = "Deny"
        }
        ```

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          name                = "example_storage_account"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          network_rules {
            default_action = "Deny"
          }

          ...
        }
        ```
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-single
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.defaultAction == "Deny"
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure "Trusted Microsoft Services" have access to azure storage accounts
    impact: 80
    variants:
      - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-single
      - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-api
    docs:
      desc: |
        This check ensures that "Trusted Microsoft Services" is enabled for storage account access. When using Azure storage accounts, certain Azure services might need to bypass network rules due to their operational networks. The "Allow trusted Azure services" exception allows these services to access the storage account securely, using strong authentication. This exception is crucial for services that interact directly with storage accounts but are not able to conform to network rules. Services such as Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor, and Azure SQL Data Warehouse are examples of services that can be granted access through this exception when they are registered in the subscription. This setup is important for maintaining both functionality and security in Azure environments.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** in the Azure Portal.
        2. Select a specific storage account.
        3. Go to the **Networking** blade.
        4. Under the **Firewalls and virtual networks** section, check if the option **Allow Azure services on the trusted services list to access this storage account** is enabled.

        **Automated Audit with Azure CLI:**

        List the network rules for all storage accounts and verify that AzureServices is included in the bypass list:

        ```bash
        az storage account list --query "[*].{AccountName:name, BypassRules:networkRuleSet.bypass}" -o table
        ```

      remediation: |
        From Azure Portal:
            1. Go to `Storage Accounts` and select the relevant account.
            2. Select the `Networking` blade.
            3. Under `Firewalls and virtual networks`, select `Enabled from selected virtual networks and IP addresses`.
            4. Check the box for `Allow Azure services on the trusted services list to access this storage account` to enable it.
            5. Save the changes.

        **From Azure CLI:**

        Enable the trusted Microsoft services for a storage account:

        ```bash
        az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices
        ```

        ### Terraform

        ```hcl
        resource "azure_storage_account" "example" {
            ...
          network_rules {
            ...
            bypass = ["AzureServices"]
            ...
          }
        }
        ```
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny" && properties.NetworkRuleSet.bypass.contains("AzureServices"))
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-single
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.bypass.contains("AzureServices")
      azure.subscription.storage.account.properties.NetworkRuleSet.defaultAction == "Deny"
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
    title: Ensure minimum 30-Day retention for SQL server Audit Logs
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-single
      - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-api
    docs:
      desc: |
        Maintaining audit logs for an extended period is crucial for compliance and security analysis. This check verifies that Azure SQL servers have an audit log retention policy set to at least 30 days. Setting a retention policy of 30 days or more allows organizations to analyze historical data for security incidents and comply with regulatory requirements. It is particularly important for identifying patterns that could indicate security threats or breaches over time.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **SQL servers** in the Azure Portal.
        2. Select a server and select **Auditing** under the **Security** settings.
        3. Check if the **Retention (days)** is set to 30 or more.

        **Automated Audit with Azure CLI:**

        Retrieve the audit retention settings for all SQL servers:

        ```bash
        az sql server list --query "[].{ServerName:name, RetentionDays:auditingSettings.retentionDays}" -o table
        ```

        Ensure that each server listed has a retention period of 30 days or more.
      remediation: |
        **Configuring Audit Retention via Azure Portal:**

        1. Access the Azure Portal and navigate to **SQL servers**.
        2. Select the relevant SQL server.
        3. Go to **Auditing** under the **Security** section.
        4. Set the **Retention (days)** to at least 30 days, or use '0' for unlimited retention.
        5. Select **Save** to apply the changes.

        **Using Azure CLI:**

        Update the audit retention policy for a specific SQL server:

        ```bash
        az sql server audit-policy update --name <ServerName> --resource-group <ResourceGroupName> --retention-days 30
        ```

        ### Terraform

        ```hcl
        resource "azure_sql_server" "example" {
          ...
          extended_auditing_policy {
            storage_endpoint           = azure_storage_account.example.primary_blob_endpoint
            storage_account_access_key = azure_storage_account.example.primary_access_key
            storage_account_access_key_is_secondary = true
            retention_in_days                       = 30
          }
        }
        ```
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-single
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
      azure.subscription.sql.server.auditingPolicy.retentionDays >= 30 ||
       azure.subscription.sql.server.auditingPolicy.retentionDays == 0
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
      azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) ||
       azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    impact: 80
    variants:
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql-flexible
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql-flexible
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-api
    docs:
      desc: |
        This configuration ensures that SQL databases across various platforms (Azure SQL, PostgreSQL, MySQL, MariaDB) do not permit unrestricted network access by blocking ingress from the IP address range "0.0.0.0/0". Limiting access is crucial to protect databases from unauthorized access and potential breaches. This setting is fundamental for enforcing the principle of least privilege, where only specific, approved IP addresses or ranges are permitted to access database resources, enhancing the security posture of Azure environments.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **SQL servers** in the Azure Portal.
        2. Select a specific SQL server.
        3. Under the **Settings** section, select **Firewall and virtual networks**.
        4. Review the **Firewall rules** section.
        5. Ensure that there are no rules allowing ingress from ""0.0.0.0/0"

        **Automated Audit with Azure CLI:**

        List the firewall rules for all SQL servers and verify that none allow ingress from "0.0.0.0/0":

        ```bash
        az sql server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az postgres server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az mysql server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az mariadb server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        ```
      remediation: |
        **Azure CLI Commands for Restricting Ingress at the Firewall Level:**

        Ensure that the start and end IP addresses in the firewall rules are set to secure IPs within your controlled network range, effectively blocking public access.

        ```bash
        # Replace <server-name>, <resource-group>, and <rule-name> with your specific details

        # Azure SQL
        az sql server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

        # PostgreSQL
        az postgres server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

        # MySQL
        az mysql server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

        # MariaDB
        az mariadb server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>
        ```

        ### Terraform

        __mySQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mysql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __MariaDB__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mariadb_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __SQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_sql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __Postgres__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_postgresql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql
    filters: |
      asset.platform == "azure-postgresql-server"
    mql: |
      azure.subscription.postgreSql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql
    filters: |
      asset.platform == "azure-mysql-server"
    mql: |
      azure.subscription.mySql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql-flexible
    filters: |
      asset.platform == "azure-postgresql-flexible-server"
    mql: |
      azure.subscription.postgreSql.flexibleServer.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql-flexible
    filters: |
      asset.platform == "azure-mysql-flexible-server"
    mql: |
      azure.subscription.mySql.flexibleServer.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
    filters: |
      asset.platform == "azure-mariadb-server"
    mql: |
      azure.subscription.mariaDb.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.postgreSql.flexibleServers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mySql.flexibleServers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Enable Managed Identities for App services to Authenticate via Microsoft Entra ID
    impact: 80
    mql: |
      azure.subscription.web.apps.all(identity.type == "SystemAssigned")
      azure.subscription.web.apps.all(identity.principalId != empty)
    docs:
      desc: |
        Enabling Managed Identities for Azure App Services allows for secure and streamlined authentication with Microsoft Entra ID. This configuration eliminates the need for storing sensitive credentials within the app, as it can directly authenticate to other Azure services. Managed identities use a system-assigned identity that is tied to the application and managed by Azure. Services like Azure SQL Database, Azure Storage, and Azure Key Vault can authenticate an app service without any stored credentials, which enhances security by reducing the attack surface related to credential theft.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **App Services**.
        3. Select an app service and select **Identity** under **Settings**.
        4. Verify that the **Status** for **System assigned managed identity** is set to **On**.

        ** Automated Audit with Azure CLI:**

        Use the Azure CLI to check if the system assigned identity is enabled for each App Service:

        ```bash
        az webapp identity show --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --query principalId
        ```
        If the command returns a non-null principal ID, it indicates that the managed identity is enabled. If it returns null, the managed identity is not enabled.
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Under **Settings**, select **Identity**.
           c. On the **System assigned** tab, set **Status** to **On**.

        **Using Azure CLI:**

        Enable a system-assigned managed identity for an App Service:

        ```bash
        az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>
        ```

        ### Terraform
        resource "azurerm_app_service" "example" {
          name                = "example-app-service"
          location            = azurerm_resource_group.example.location
          resource_group_name = azurerm_resource_group.example.name
          app_service_plan_id = azurerm_app_service_plan.example.id

          identity {
            type = "SystemAssigned"
          }
        }
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure Key Vaults are configured with Recovery features
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-single
      - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-api
    docs:
      desc: |
        Azure Key Vault can store keys, secrets, and certificates. Accidental unavailability of a key vault can cause serious problems in any organization.

        Purge protection is a feature of key vaults that is used to protect deleted key vaults for a certain period, called the "retention period." Once enabled, purge protection prevents deleted key vaults from being purged until the retention period is reached. This selection cannot be changed once the key vault is created.

        If a key vault is created with purge protection, you can still delete it, but you will not be able to purge it once it is deleted. In this case, the deleted key vaults must wait 90 days to be permanently purged.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key Vaults**.
        3. Select a key vault and select **Properties**.
        4. Verify that **Purge Protection** is enabled, which ensures that deleted vaults and vault objects are recoverable during the retention period.

        **Automated Audit with Azure CLI:**

        Verify Purge Protection is enabled for each Key Vault:

        ```bash
        az keyvault list --query "[].{Name: name, PurgeProtection: properties.enablePurgeProtection}"
        ```
        Check the output for each Key Vault, ensuring that PurgeProtection is set to true.
      remediation: |
        ### Microsoft Azure Portal

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key Vaults**.
        3. Select a key vault and select **Properties**.
        4. Scroll to the **Security** section.
        5. If **Purge Protection** is not enabled, enable it. Note that once enabled, this setting cannot be disabled.

        **Automated Audit with Azure CLI:**

        Enable Purge Protection for a specific Key Vault:

        ```bash
        az keyvault update --name <VaultName> --resource-group <ResourceGroupName> --set properties.enablePurgeProtection=true
        ```
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-single
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.properties.enablePurgeProtection == true
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web Apps use the latest available version of TLS encryption
    impact: 80
    mql: |
      azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
    docs:
      desc: |
        It is highly recommended to use the latest TLS version available with Azure App Services for all secure Web App connections. Currently Azure App Services supports TLS 1.2.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **App Services**.
        3. Select an app service and select **TLS/SSL settings** under **Settings**.
        4. Verify that the **Minimum TLS Version** is set to **1.2**.

        **Automated Audit with Azure CLI:**

        Verify that the minimum TLS version is set to 1.2 for each App Service:

        ```bash
        az webapp config show --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --query minTlsVersion
        ```

        **Automated Audit with PowerShell:**

        Get-AzWebApp | foreach {
          Get-AzWebApp -ResourceGroupName $_.ResourceGroup -Name $_.Name | Select-Object Name, ResourceGroup, @{Name="TLS Version"; Expression={$_.SiteConfig.MinTlsVersion}}
        }
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Select **Configuration** and select the **General settings** tab.
           c. Under **Minimum Inbound TLS Version**, select **1.2**.
           d. Select **Save**.

        **Automated Audit with Azure CLI:**

        Set the minimum TLS version to 1.2 for an existing app service:

        ```bash
        az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --min-tls-version 1.2
        ```

        **Automated Audit with PowerShell:**

        Get-AzWebApp | foreach {
          Set-AzWebApp -ResourceGroupName $_.ResourceGroup -Name $_.Name -MinTlsVersion "1.2"
        }

        ### Terraform

        resource "azurerm_app_service" "example" {
          name                = "example-app-service"
          location            = azurerm_resource_group.example.location
          resource_group_name = azurerm_resource_group.example.name
          app_service_plan_id = azurerm_app_service_plan.example.id

          site_config {
            min_tls_version = "1.2"
          }
        }
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the expiration date is set for all keys and secrets in key vaults
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-single
      - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-api
    docs:
      desc: |
        The expiration date attribute identifies when you can no longer use the key/secret for a cryptographic operation. By default, keys/secrets never expire. Therefore, it is highly recommended that you rotate keys/secrets in the key vault and set an explicit expiration date.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Key Vaults** via the Azure Portal at https://portal.azure.com.
        2. Select a key vault and then select **Keys** or **Secrets**.
        3. Check each key and secret to verify that an expiration date is set and is appropriate.

        **Automated Audit with Azure CLI:**

        - For keys:

          ```bash
          az keyvault key list --vault-name <KeyVaultName> --query "[?attributes.expires && attributes.enabled == \`true\`].{name: name, expires: attributes.expires}" -o table
          ```

        - For secrets:

          ```bash
          az keyvault secret list --vault-name <KeyVaultName> --query "[?attributes.expires && attributes.enabled == \`true\`].{name: name, expires: attributes.expires}" -o table
          ```

        **Automated Audit with PowerShell:**

        - For keys:

          ```powershell
          Get-AzKeyVaultKey -VaultName <VaultName> | Where-Object {$_.Enabled -eq $true -and $_.Expires -ne $null}
          ```

        - For secrets:

          ```powershell
          Get-AzKeyVaultSecret -VaultName <VaultName> | Where-Object {$_.Enabled -eq $true -and $_.Expires -ne $null}
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. For each key vault:
           a. Select the key vault.
           b. Select **Keys** or **Secrets**.
           c. Make sure that the key/secret in the key vault has an expiration date.

        **From Azure CLI:**

        - For keys:

          ```bash
          az keyvault key set-attributes --vault-name <VaultName> --name <KeyName> --expires <DateTime-in-ISO8601>
          ```

        - For secrets:

          ```bash
          az keyvault secret set-attributes --vault-name <VaultName> --name <SecretName> --expires <DateTime-in-ISO8601>
          ```

        **From PowerShell:**

        - For keys:

          ```powershell
          $key = Get-AzKeyVaultKey -VaultName <VaultName> -Name <KeyName>
          $key.Expires = (Get-Date).AddYears(1)
          Update-AzKeyVaultKey -VaultName <VaultName> -Key $key
          ```

        - For secrets:

          ```powershell
          $secret = Get-AzKeyVaultSecret -VaultName <VaultName> -Name <SecretName>
          $secret.Expires = (Get-Date).AddYears(1)
          Update-AzKeyVaultSecret -VaultName <VaultName> -Secret $secret
          ```

        ### Terraform Example:

        ```hcl
        resource "azurerm_key_vault_key" "example" {
          name         = "example-key"
          key_vault_id = azurerm_key_vault.example.id
          key_type     = "RSA"
          key_size     = 2048
          expiration_date = "2025-05-01T01:02:03Z"

          key_opts = [
            "decrypt",
            "encrypt",
            "sign",
            "unwrapKey",
            "verify",
            "wrapKey",
          ]
        }

        resource "azurerm_key_vault_secret" "example" {
          name         = "example-secret"
          value        = "exampleValue"
          key_vault_id = azurerm_key_vault.example.id
          expiration_date = "2025-05-01T01:02:03Z"
        }
        ```
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-single
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.keys.where(enabled == true).all(expires != empty)
      azure.subscription.keyVault.vault.secrets.where(enabled == true).all(expires != empty)
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.keyVault.vaults.all(keys.where(enabled == true).all(expires != empty))
      azure.subscription.keyVault.vaults.all(secrets.where(enabled == true).all(expires != empty))
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations in Azure Key Vault are logged
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-logging-enabled-kv-single
      - uid: mondoo-azure-security-ensure-logging-enabled-kv-api
    docs:
      desc: |
        Monitoring interactions with Azure Key Vault is critical for maintaining security and compliance. Logging operations allow organizations to audit access and use of keys, secrets, and certificates, thereby ensuring that any unauthorized access or anomalies are detected and addressed. Enabling logging involves storing log data in Azure Storage Accounts, which provides a durable audit trail that is essential for security audits and compliance reporting.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to the Azure Portal at https://portal.azure.com.
        2. Go to **Key Vaults** and select a Key Vault.
        3. Under **Monitoring**, select **Diagnostic settings**.
        4. Verify that logging for both **audit** and **allLogs** categories are enabled and that they are configured to send logs to an Azure Storage Account, Log Analytics workspace, or Event Hub.

        **Automated Audit with Azure CLI:**

        Retrieve the diagnostic settings for each Key Vault to ensure that logging is enabled:

        ```bash
        az monitor diagnostic-settings list --resource <Key Vault Resource ID> --output table
        ```

        Ensure that the output shows that logs for audit and allLogs categories are enabled and properly configured to a storage account or other supported destinations.

        **Automated Audit with PowerShell:**

        ```powershell
        Get-AzKeyVault | ForEach-Object {
            Get-AzDiagnosticSetting -ResourceId $_.ResourceId
        }
        ```
        Verify that each Key Vault has audit and allLogs enabled and is logging to the designated destinations.
      remediation: |
        ### Microsoft Azure Portal

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Visit `Key vaults` and select a vault.
        3. Go to `Diagnostic settings`.
        4. Edit an existing setting or add a new one, ensuring `audit` and `All logs` are selected.
        5. Set the appropriate destination for logs, such as an Azure storage account or Log Analytics workspace.
        6. Save the configuration.

        **From Azure CLI:**

        To create or update diagnostic settings for a Key Vault:

        ```bash
        az monitor diagnostic-settings create --name "defaultLogs" --resource <Key Vault Resource ID> --logs '[{"category": "audit", "enabled": true}, {"category": "allLogs", "enabled": true}]' --storage-account <Storage Account ID> | --workspace <Log Analytics Workspace ID> | --event-hub <Event Hub Name>
        ```

        **From PowerShell:**

        ```powershell
        $logs = @(
            New-AzDiagnosticSettingLogConfig -Category "audit" -Enabled $true
            New-AzDiagnosticSettingLogConfig -Category "allLogs" -Enabled $true
        )
        Set-AzDiagnosticSetting -ResourceId <Key Vault Resource ID> -Log $logs -StorageAccountId <Storage Account ID> | -WorkspaceId <Log Analytics Workspace ID> | -EventHubAuthorizationRuleId <Event Hub Authorization Rule ID> | -EventHubName <Event Hub Name>
        ```

        ### Terraform Example:

        ```hcl
        resource "azurerm_monitor_diagnostic_setting" "example" {
          name               = "kv-logging"
          target_resource_id = azurerm_key_vault.example.id
          log_analytics_workspace_id = azurerm_log_analytics_workspace.example.id

          log {
            category = "audit"
            enabled  = true

            retention_policy {
              enabled = true
              days    = 0
            }
          }

          log {
            category = "allLogs"
            enabled  = true

            retention_policy {
              enabled = true
              days    = 0
            }
          }

          metric {
            category = "AllMetrics"
            enabled  = false

            retention_policy {
              enabled = false
              days    = 0
            }
          }
        }
        ```
  - uid: mondoo-azure-security-ensure-logging-enabled-kv-single
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "audit").any(enabled == true))
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "allLogs").any(enabled == true))
  - uid: mondoo-azure-security-ensure-logging-enabled-kv-api
    filters: |
      asset.platform == "azure"
    mql: |
      // Step 1: Verify that diagnostic settings are configured for the Key Vault vaults.
      azure.subscription.keyVault.vaults.all(diagnosticSettings != empty)
      // Step 2: Confirm the presence and enablement of specific log categories within the diagnostic settings.
      azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(categoryGroup == "audit").any(enabled == true)))
      azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(categoryGroup == "allLogs").any(enabled == true)))
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that activity log alerts exist for the commands Create, Update, and Delete Network Security Group
    impact: 80
    mql: |
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/write" && fieldName == "operationName"))
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName"))
    docs:
      desc: |
        Monitoring events related to the creation, update, and deletion of network security groups provides insights into network access changes and helps in detecting suspicious activities.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to the `Monitor` blade.
        2. Select `Alerts`.
        3. In the Alerts window, select `Alert rules`.
        4. Verify that alert rules exist for the following conditions:
          - Operation name equals `Microsoft.Network/networkSecurityGroups/write` for Create/Update events.
          - Operation name equals `Microsoft.Network/networkSecurityGroups/delete` for Delete events.
        5. Select the alert rule name to review its configuration.
          - Ensure the `Condition` panel specifies the correct operation names and does not filter on irrelevant criteria like `Level`, `Status`, or `Caller`.
          - Confirm that the `Actions` panel is set up to notify the appropriate personnel within your organization.

        **Automated Audit with Azure CLI:**

        Run the following commands to list the current alert rules and verify their conditions:

        ```bash
        az monitor activity-log alert list --subscription <subscription ID> --query "[].{Name:name, Enabled:enabled, Condition:condition.allOf, Actions:actions}"
        ```

        Check for the presence of conditions targeting the `Microsoft.Network/networkSecurityGroups/write` and `Microsoft.Network/networkSecurityGroups/delete` operation names in the output.

        **From PowerShell:**

        Utilize the following PowerShell commands to inspect the alert rules:

        ```powershell
        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/write"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf

        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/delete"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf
        ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor**.
        3. Select **Alerts**.
        4. Select **+ Create**.
        5. Under **Resource types**, select **Network security group**.
        6. Select the subscription name, resource group, or network security group" to apply the rule to.
        7. Verify that the selection preview shows:
            - All network security groups or your selected network security group
            - The subscription, group, or resource you selected
        8. Select the **Apply** button.
        9. Select the **Condition** tab and select **See all signals**.
        10. Select **Create or Update Network Security Group**.
        11. Select the **Actions** tab and either choose an existing action group or create a new one to notify the necessary personnel.
        12. Select the **Details** tab and provide:
            - The resource group where you want the alert rule to reside
            - A name (and optional description) for the alert rule
        13. Select the **Review + create button and verify the summary.
        14. Select the **Create** button.
        15. Repeat steps 4-15 but in step 10, select **Delete Network Security Group**.
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts with high severity" is enabled
    impact: 80
    mql: |
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High")
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.state == "On")
    docs:
      desc: |
        Enabling security alert email ensures that Microsoft makes administrators aware of any potential security issues so they can react quickly.
      audit: |
        **Manual Audit via Azure Portal:**

          1. From Azure Home, select the Portal Menu.
          2. Select `Microsoft Defender for Cloud`.
          3. Select `Environment Settings`.
          4. Select the appropriate Management Group, Subscription, or Workspace.
          5. Select `Email notifications`.
          6. Verify that the `Notify about alerts with the following severity (or higher):` setting is checked and set to `High`.

        **Automated Audit with Azure CLI:**

          Run the following command to check the notification settings for high severity alerts. Make sure the output is set to `true`, indicating that notifications for high severity alerts are enabled.

          ```bash
          az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2020-01-01-preview' | jq '.|.[] | select(.name=="default")'|jq '.properties.alertNotifications'
          ```

      remediation: |
        ### Microsoft Azure Portal

        To configure alert notifications in Microsoft Azure Portal:

          1. Log into the Microsoft Azure Portal at https://portal.azure.com.
          2. Select `Microsoft Defender for Cloud` from the Portal Menu.
          3. Go to `Environment Settings` and select the appropriate management group, subscription, or workspace.
          4. Navigate to `Email notifications`.
          5. Ensure the `Notify about alerts with the following severity (or higher):` option is enabled and set to `High`.
          6. Select `Save` to apply the changes.

        **From Azure CLI:**

        Use the following command to update the security contact settings to enable high severity alert notifications. Replace `<Your_Subscription_Id>` and `<validEmailAddress>` with the appropriate values.

          ```bash
          az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/<$0>/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d "@input.json"'
          ```

          Ensure the `input.json` file contains the following data, with `<validEmailAddress>` replaced with your contact email:

          ```json
          {
            "id": "/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1",
            "name": "default1",
            "type": "Microsoft.Security/securityContacts",
            "properties": {
              "email": "<validEmailAddress>",
              "alertNotifications": "On",
              "alertsToAdmins": "On"
            }
          }
          ```
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
    title: Ensure SSL connection enabled for PostgreSQL database servers
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-api
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single-flexible
    docs:
      desc: |
        Ensuring that SSL/TLS is enforced for all connections to PostgreSQL database servers is crucial for safeguarding data in transit. This security measure helps prevent eavesdropping and man-in-the-middle attacks, maintaining the confidentiality and integrity of data.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for PostgreSQL server`.
        3. Select each database server to review its settings.
        4. Under `Connection security`, confirm that `Enforce SSL connection` is set to `ENABLED`. This setting should be consistent across all PostgreSQL database servers to ensure uniform security posture.

        **Automated Audit with Azure CLI:**

        To verify the SSL enforcement setting across all PostgreSQL servers in a resource group, you can use the Azure CLI. The expected output for compliant servers is `Enabled`:

        ```bash
        az postgres server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement}" -o table
        ```

        This command provides a clear, tabulated output indicating which servers have SSL enforced and which do not, enabling quick identification of non-compliant resources.

        **From PowerShell:**

        PowerShell can also be used for a detailed audit. The command should return `Enabled` for each server checked:

        ```powershell
        Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> | Select-Object Name, SslEnforcement
        ```

        This command lists all PostgreSQL servers in the specified resource group along with their SSL enforcement status, providing a comprehensive overview.
      remediation: |
        ### Microsoft Azure Portal

        To enforce SSL connections:

        1. Access the Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for PostgreSQL server`.
        3. For each server, access `Connection security`.
        4. Locate the `SSL settings` and set `Enforce SSL connection` to `ENABLED`.
        5. Apply the changes to ensure that the setting is enforced across all servers.

        Consistency in enforcement is key. Verify that all PostgreSQL servers within your Azure environment have this setting enabled to maintain a high security standard.

        **From Azure CLI:**

        For a batch update or to automate the enforcement across multiple servers, use the Azure CLI:

        ```bash
        az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled
        ```

        Automate this process using scripts to iterate over all PostgreSQL servers in a subscription or resource group, ensuring no server is left without SSL enforcement.

        **From PowerShell:**

        PowerShell provides a similar capability for batch processing:

        ```powershell
        $servers = Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName>
        foreach ($server in $servers) {
            Update-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> -ServerName $server.Name -SslEnforcement Enabled
        }
        ```

        This script iterates over all PostgreSQL servers in the specified resource group, enforcing SSL on each one. Regularly running such scripts can help maintain compliance over time, especially in dynamic environments where new servers are frequently deployed.

  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single
    filters: |
      asset.platform == "azure-postgresql-server"
    mql: |
      azure.subscription.postgreSql.server.properties.sslEnforcement == "Enabled"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single-flexible
    filters: |
      asset.platform == "azure-postgresql-flexible-server"
    mql: |
      // TLS/SSL is enforced on the server by default.
      azure.subscription.postgreSql.flexibleServer.configuration.where(name == 'require_secure_transport').all(value.downcase == "on")
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.postgreSql.servers.all(properties.sslEnforcement == "Enabled")
      azure.subscription.postgreSql.flexibleServers.all(configuration.where(name == 'require_secure_transport').all(value.downcase == "on"))
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
    title: Ensure SSL connection enabled for MySQL Database Server with the latest version
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single-flexible
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-api
    docs:
      desc: |
        Ensuring that SSL connections are enforced for MySQL database servers is essential to protect data in transit from eavesdropping and man-in-the-middle attacks. Additionally, it is critical to ensure the use of the latest supported TLS version to mitigate vulnerabilities associated with older versions.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for MySQL servers`.
        3. Select each server to inspect its settings.
        4. Under `Connection security`, verify that `Enforce SSL connection` is set to `ENABLED`.
        5. Additionally, ensure that the server is configured to use the latest supported TLS version (e.g., TLS 1.2 or higher).

        **Automated Audit with Azure CLI:**

        Run the following command to inspect the SSL enforcement and the minimum TLS version for each MySQL server:

        ```bash
        az mysql server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement, TLS:minimalTlsVersion}" -o table
        ```

        This command provides a tabulated view showing the SSL enforcement and TLS version for each server, facilitating quick identification of non-compliant or outdated configurations.

      remediation: |
        To enforce SSL connections and ensure the use of the latest TLS version:

        1. Access the Azure Portal at https://portal.azure.com.
        2. Go to `Azure Database for MySQL servers`.
        3. For each server, navigate to `Connection security`.
        4. Set `Enforce SSL connection` to `ENABLED`.
        5. Select the latest supported TLS version from the dropdown menu to ensure maximum security.
        6. Apply these settings to ensure compliance across all MySQL servers.

        Regular reviews and updates of these settings are recommended to adapt to new TLS versions as they become available, ensuring that the security configurations remain up-to-date.

        **From Azure CLI:**

        To batch update MySQL servers for SSL enforcement and TLS version settings, use the following Azure CLI command:

        ```bash
        az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled --minimal-tls-version TLS1_2
        ```

        For enhancing data security during transmission, it's pivotal to use the latest TLS version. Currently, the most advanced standard available is TLS 1.3, known for its enhanced security and performance benefits. However, it's important to note that, as of the latest information, Azure's MySQL service supports up to TLS 1.2. While TLS 1.2 provides robust security, the adoption of TLS 1.3 across various platforms, including Azure, is anticipated.
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single-flexible
    filters: |
      asset.platform == "azure-mysql-flexible-server"
    props:
      - uid: latestTlsVersions
        title: The latest supported TLS versions for MySQL flexible servers
        mql: |
          return ["TLSv1.2", "TLSv1.3", "TLSv1.2,TLSv1.3"]
    mql: |
      azure.subscription.mySql.flexibleServer.configuration.where(name == "tls_version").all(value.in(props.latestTlsVersions))
      azure.subscription.mySql.flexibleServer.configuration.where(name == "require_secure_transport").all(value.downcase == "on")
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single
    filters: |
      asset.platform == "azure-mysql-server"
    mql: |
      azure.subscription.mySql.server.properties.sslEnforcement == "Enabled"
      azure.subscription.mySql.server.properties.minimalTlsVersion == "TLS1_2"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-api
    filters: |
      asset.platform == "azure"
    props:
      - uid: latestTlsVersions
        title: The latest supported TLS versions for MySQL flexible servers
        mql: |
          return ["TLSv1.2", "TLSv1.3", "TLSv1.2,TLSv1.3"]
    mql: |
      azure.subscription.mySql.servers.all(properties.sslEnforcement == "Enabled")
      azure.subscription.mySql.servers.all(properties.minimalTlsVersion == "TLS1_2")
      azure.subscription.mySql.flexibleServers.all(configuration.where(name == "require_secure_transport").all(value.downcase == "on"))
      azure.subscription.mySql.flexibleServers.all(configuration.where(name == "tls_version").all(value.in(props.latestTlsVersions)))
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql
    title: Ensure public network access for SQL server is blocked or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-disabled-public-access-sql-single
      - uid: mondoo-azure-security-ensure-disabled-public-access-sql-api
    docs:
      desc: |
        Limiting public network access to Azure SQL servers enhances security by reducing exposure to attacks. Configuring SQL servers to allow connections only from private endpoints or specific public IP addresses through firewall rules significantly mitigates potential risks.

        Customers can choose to connect to a database by either:
          * Public endpoints (with IP-based server-level firewall rules or with virtual-network firewall rules)
          * Private endpoints (using Azure Private Link)

        When public network access is disabled, only connections from private endpoints are allowed. All connections from public endpoints are denied.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** under Azure SQL services.
        3. Select each SQL server to review its networking settings.
        4. Under the **Security** section, select **Networking**.
        5. Verify that for **Public network access**, the setting is either **Disabled** or configured to allow **Selected networks** only, ensuring no open access to all networks.

        **Automated Audit with Azure CLI:**

        You can also verify the public network access settings using Azure CLI:

        ```bash
        az sql server list --query "[].{Name:name, PublicNetworkAccess:publicNetworkAccess}" -o table
        ```

        This command lists all SQL servers along with their public network access settings. Ensure that none of the servers are listed as having unrestricted public network access unless specific rules are applied.
      remediation: |
        ### Microsoft Azure Portal

        To Restrict Public Network Access in Azure Portal:

        1. Log into the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** and select the server you wish to configure.
        3. In the server's settings, select **Networking** under the **Security** section.
        4. Locate the **Public network access** setting.
        5. Change the setting to **Disabled** to completely block public access or to **Selected networks** to restrict access to specific IP addresses or ranges.
        6. If selecting **Selected networks**, ensure you configure the necessary firewall rules or virtual network settings to specify which networks can access the server.

        ### Automating Remediation with Azure CLI:

        To disable public network access for all SQL servers in a subscription, you can use the following Azure CLI command for each server:

        ```bash
        az sql server update --name <ServerName> --resource-group <ResourceGroupName> --set publicNetworkAccess='Disabled'
        ```

        Replace `<ServerName>` and `<ResourceGroupName>` with your actual server names and resource group names. For granular control, manually configure network settings in the Azure Portal to specify allowed networks if opting for the "Selected networks" setting.
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql-single
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.properties.publicNetworkAccess == "Disabled"
        || azure.subscription.sql.server.virtualNetworkRules != empty || azure.subscription.sql.server.firewallRules != empty
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.sql.servers.all(properties.publicNetworkAccess == "Disabled") ||
       azure.subscription.sql.servers.where(properties.publicNetworkAccess == "Enabled").all(virtualNetworkRules != empty || firewallRules != empty)
  - uid: mondoo-azure-security-keyvault-public-access-disabled
    title: Ensure default public network access for Azure Key Vault is disabled or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    variants:
      - uid: mondoo-azure-security-keyvault-public-access-disabled-single
      - uid: mondoo-azure-security-keyvault-public-access-disabled-api
    docs:
      desc: |
        To enhance the security of Azure Key Vault, a critical component in the Azure environment, it's advisable to restrict public network access. By default, a new key vault has its firewall disabled, permitting unrestricted access from applications and Azure services, though operations are still restricted by Microsoft Entra authentication and access policies.

        For stronger network security, consider these options:

          * Disable Public Network Access: This blocks all public internet connections to the key vault, allowing only connections through private endpoints.
          * Limit Access to Selected Networks: If public access is necessary, restrict it by configuring the Azure Key Vault firewall. You can define specific virtual networks or set firewall rules by adding IP ranges, limiting access to trusted internet sources or your on-premises networks.

        Implementing these measures ensures that only authorized networks and applications can access your key vault, significantly bolstering its security.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key vaults** to list all key vaults in your subscriptions.
        3. Select each key vault to review its networking settings.
        4. In the key vault's **Settings**, select **Networking**.
        5. Check the **Firewalls and virtual networks** settings to ensure public access is either disabled or limited:
          - Verify that **Public network access** is set to **Disabled**.
          - If public access is enabled, ensure that access is restricted to selected networks by configuring IP rules or linking to specific virtual networks.

        **Automated Audit with Azure CLI:**

        You can check the public network access settings for all key vaults in a given subscription using the Azure CLI:

        ```bash
        az keyvault list --query "[].{Name:name, PublicNetworkAccess:properties.publicNetworkAccess}" -o table
        ```

        This command outputs the public network access settings for each key vault, allowing you to quickly identify configurations that do not align with best practices.
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Access the Azure Portal at https://portal.azure.com and go to **Key vaults**.
        2. Select the key vault you wish to configure.
        3. In the key vault's **Settings**, choose **Networking**.
        4. Navigate to **Firewalls and virtual networks**.
        5. To block all public network access, set **Public network access** to **Disabled**.
        6. If you need to allow access from specific networks:
          - Set **Public network access** to **Enabled**.
          - Configure **Firewall rules** to define allowed IP address ranges.
          - Link to specific **Virtual networks** to restrict access to designated networks only.

        By tightly controlling network access to your Azure Key Vault, you enhance its security posture, ensuring that only approved entities can access its contents.
  - uid: mondoo-azure-security-keyvault-public-access-disabled-single
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.properties.all(publicNetworkAccess == "Disabled")
        || azure.subscription.keyVault.vault.properties.networkAcls.ipRules != empty
        || azure.subscription.keyVault.vault.properties.networkAcls.virtualNetworkRules != empty
  - uid: mondoo-azure-security-keyvault-public-access-disabled-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.keyVault.vaults.all(properties.publicNetworkAccess == "Disabled") ||
        azure.subscription.keyVault.vaults.where(properties.publicNetworkAccess == "Enabled").all(properties.networkAcls.virtualNetworkRules != empty || properties.networkAcls.ipRules != empty)
  - uid: mondoo-azure-security-sql-server-audit-on
    title: Ensure that all activities on SQL server are audited
    impact: 60
    variants:
      - uid: mondoo-azure-security-sql-server-audit-on-single
      - uid: mondoo-azure-security-sql-server-audit-on-api
    docs:
      desc: |
        Auditing is a very important feature and should be configured for every database or server in your Azure deployment. When you enable server-level auditing, you enable it for all existing databases and for new databases you create in the future.

        Enable server auditing when you must audit all databases for that logical server. Enable database level audit when you want to audit different action groups for a specific database or write to a different target for a specific database.

        If you enable both server- and database-level auditing for a database, you can choose predicate expressions to filter the events and ensure you don't duplicate data.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** and select each server to inspect its auditing settings.
        3. Select **Auditing** for each server.
        4. Verify that `Enable Azure SQL Auditing` is switched to `On`. Check that an appropriate storage account, Log Analytics workspace, or Event Hub is selected as the audit log destination.

        **Automated Audit with Azure CLI:**

        To verify the auditing settings for all SQL Servers in a subscription: (replace <resourceGroupName> with your resource group name)

        ```bash
        az sql server list --query "[].{Name:name, ResourceGroupName:<resourceGroupName>}" -o tsv | while read -r name rg; do
          echo "Server: $name"
          az sql server audit-policy show --name $name --resource-group $rg
        done
        ```

        This script iterates over all SQL servers, displaying their audit policy status, ensuring that auditing is enabled and correctly configured.
      remediation: |
        ### Microsoft Azure Portal

        1. In the Azure Portal, go to **SQL servers** and select the server you want to configure.
        2. Under **Security**, select **Auditing**.
        3. Set `Enable Azure SQL Auditing` to `On`.
        4. Select a destination for the audit logs: Storage Account, Log Analytics workspace, or Event Hub.
        5. Configure the retention period, ensuring it aligns with your organization's compliance requirements.
        6. Select `Save` to apply the settings.

        ### Automating Auditing Configuration via Azure CLI:

        For each SQL server, enable auditing and specify the log retention settings and destination. Here's how you can enable auditing to a Storage Account with a retention period:

        ```bash
        az sql server audit-policy update --name <ServerName> --resource-group <ResourceGroupName> --state Enabled --blob-storage-target-state Enabled --storage-endpoint <StorageAccountBlobEndpoint> --storage-key <StorageAccountKey> --retention-days 90
        ```

        Replace placeholders with your specific details. Similar commands can be executed to set up auditing with Log Analytics or Event Hub as the destination. Ensuring that auditing is enabled and properly configured across all SQL servers in your Azure environment is a key step in maintaining a strong security and compliance posture.
  - uid: mondoo-azure-security-sql-server-audit-on-single
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
  - uid: mondoo-azure-security-sql-server-audit-on-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
  - uid: mondoo-azure-security-sql-server-tde-on
    title: Ensure that transparent data encryption is enabled for SQL Server databases
    impact: 60
    variants:
      - uid: mondoo-azure-security-sql-server-tde-on-single
      - uid: mondoo-azure-security-sql-server-tde-on-api
    docs:
      desc: |
        Transparent data encryption (TDE) encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics data files. This encryption is known as encrypting data at rest.

        TDE does real-time I/O encryption and decryption of data and log files. The encryption uses a database encryption key (DEK). The database boot record stores the key for availability during recovery. The DEK is a symmetric key. It's secured by a certificate that the server's master database stores or by an asymmetric key that an EKM module protects.

        TDE protects data at rest, which is the data and log files. It lets you follow many laws, regulations, and guidelines established in various industries. Your software developers can encrypt data by using AES and 3DES encryption algorithms without changing existing applications.

        Note: TDE is not available for system databases.
      audit: |
        **Manual Audit via Azure Portal:**

        1. In the Azure Portal, navigate to **SQL databases** under your SQL Server instances.
        2. Select each database to inspect its settings.
        3. Select **Transparent data encryption** under the **Security** settings.
        4. Verify that `Data encryption` is set to `On` for each database (except the master database, which cannot be encrypted with TDE).

        **Automated Audit with Azure CLI:**

        To check the TDE status for all databases in a specific SQL server:

        ```bash
        az sql db list --resource-group <ResourceGroupName> --server <ServerName> --query "[].{Name:name, TDE:transparentDataEncryption}" -o table
        ```

        Use the following command to check the TDE status of a specific database:

        ```bash
        az sql db tde show --name <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName>
        ```

        Ensure the TDE status is `Enabled` for each database.
      remediation: |
        ### Microsoft Azure Portal

        1. Access **SQL databases** in the Azure Portal.
        2. Select a database under your SQL Server instance.
        3. Go to **Transparent data encryption** under the **Security** section.
        4. Switch `Data encryption` to `On`.

        ### Using Azure CLI:

        To enable TDE on a specific database:

        ```bash
        az sql db tde set --database <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName> --status Enabled
        ```

        ### Using PowerShell:

        For each database, enable TDE with the following command:

        ```powershell
        Set-AzSqlDatabaseTransparentDataEncryption -DatabaseName <DatabaseName> -ServerName <ServerName> -ResourceGroupName <ResourceGroupName> -State 'Enabled'
        ```

        **Note:**

        - Ensure you repeat the process for each database in your SQL Server instances, excluding the master database.
        - Regularly review the TDE status of your databases to maintain compliance and data protection.
  - uid: mondoo-azure-security-sql-server-tde-on-single
    filters: |
      asset.platform == "azure-sql-server"
      azure.subscription.sql.server.databases.any(name != "master")
    mql: |
      azure.subscription.sql.server.databases.where(name != "master").all(transparentDataEncryption.state == "Enabled")
  - uid: mondoo-azure-security-sql-server-tde-on-api
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.sql.servers.all(databases.where(name != "master").all(transparentDataEncryption.state == "Enabled"))
  - uid: mondoo-azure-security-diagnostic-settings-exist
    title: Ensure that diagnostic settings exist for the subscription
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
    docs:
      desc: |
        Diagnostic settings are an important piece in the security puzzle, Microsoft highly recommends using them in Azure Security Center. To understand what the diagnostic settings are, you must understand the data source of the Monitor component in Azure.

        Azure Monitor is based on different logs and metrics collected from multiple resources. This can be analyzed using a set of tools provided in Azure Monitor.
        Azure Resources generate a significant amount of monitoring data which categorized into two types:

         * Metrics: Numerical values that describe some aspect of a system at a particular point of time
         * Logs:  Text that provides detailed diagnostic and auditing information for Azure resources

        Logs also can be categorized into two types:

         * Resource logs aren't collected until they're routed to a destination.
         * Activity logs exist on their own but can be routed to other locations.

        Each Azure resource requires its own diagnostic setting, which defines the following criteria:

         * Sources: The type of metric and log data to send to the destinations defined in the setting. The available types vary by resource type.
         * Destinations: One or more destinations to send to.

        A diagnostic setting controls how logs are exported. By default, logs are retained only for 90 days. By using diagnostic settings, we can export logs and store them for longer periods in order to analyze the activities and find any security-related issues.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Monitor** and then **Activity log**.
        3. Select **Diagnostic settings** and review the settings for your subscription.
        4. Ensure that there are diagnostic settings configured and that they cover the essential log categories: Administrative, Security, Alert, and Policy.

        **Automated Audit with Azure CLI:**

        To check the diagnostic settings for the subscription:

        ```bash
        az monitor diagnostic-settings list --resource /subscriptions/{subscriptionId}
        ```

        Verify that the output includes diagnostic settings with the necessary categories enabled.
        remediation: |
          ### Microsoft Azure Portal

          ### Configuring Diagnostic Settings in Azure Portal:

          1. In the Azure Portal, navigate to **Monitor** > **Activity log**.
          2. Select **Diagnostic settings** and then **Add diagnostic setting**.
          3. Provide a name for the diagnostic setting.
          4. Select the necessary log categories: Administrative, Security, Alert, and Policy.
          5. Choose the destination for the logs, such as an Azure Storage account, a Log Analytics workspace, or an Event Hub, based on your organizational needs.
          6. Save the configuration to ensure continuous monitoring.

          ### Using Azure CLI:

          Create a new diagnostic setting using the Azure CLI:

          ```bash
          az monitor diagnostic-settings create --name <NameOfSetting> --resource /subscriptions/{subscriptionId} --logs '[{"category": "Administrative", "enabled": true}, {"category": "Security", "enabled": true}, {"category": "Alert", "enabled": true}, {"category": "Policy", "enabled": true}]' --storage-account <StorageAccountId> --workspace <LogAnalyticsWorkspaceId> --event-hub <EventHubName>
          ```

          Replace the placeholders with your specific resource IDs and desired diagnostic setting name.

          ### Using PowerShell:

          Configure diagnostic settings with PowerShell:

          ```powershell
          $subsId = "<SubscriptionId>"
          $settingName = "<DiagnosticSettingName>"
          $storageAccountId = "<StorageAccountId>"
          $workspaceId = "<LogAnalyticsWorkspaceId>"
          $eventHubAuthRuleId = "<EventHubAuthorizationRuleId>"

          Set-AzDiagnosticSetting -ResourceId "/subscriptions/$subsId" -StorageAccountId $storageAccountId -WorkspaceId $workspaceId -Enabled $true -Name $settingName -Category @("Administrative", "Security", "Alert", "Policy")
          ```

          Modify the script to match your specific resource IDs and configuration preferences. It's crucial to routinely review and update these settings to adapt to any changes in your Azure environment or organizational requirements.
  - uid: mondoo-azure-security-diagnostic-settings-essential-categories
    title: Ensure that diagnostic settings collect essential security categories
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
    docs:
      desc: |
        Diagnostic settings control how the diagnostic logs are exported and what type of data is collected and exported to the defined destination.

        By default, no log categories are selected when a diagnostic setting is created. Capturing the appropriate log categories for the activities performed within your subscriptions provides proper insight into the environment and will help the SOC team in their analysis.

        We recommend, at a minimum, collecting these categories:

          * Security
          * Alert
          * Administrative
          * Policy
      audit: |
        **Manual Audit via Azure Portal:**

        1. Access **Azure Monitor** within the Azure Portal.
        2. Navigate to **Activity log** and proceed to **Diagnostic settings**.
        3. Review the settings for each subscription ensuring the collection of Administrative, Security, Alert, and Policy logs.
        4. Confirm that these categories are enabled and correctly configured to export to an appropriate destination.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to list and verify the diagnostic settings across subscriptions:

        ```bash
        az monitor diagnostic-settings list --resource /subscriptions/{subscriptionId}
        ```

        Review the settings to confirm that the essential categories are enabled.
      remediation: |
        ### Microsoft Azure Portal

        1. Visit **Azure Monitor** > **Activity log** in the Azure Portal.
        2. Go to **Diagnostic settings** and either add a new setting or edit an existing one.
        3. Name your diagnostic setting and ensure the inclusion of Administrative, Security, Alert, and Policy logs.
        4. Select the destination for these logs, such as an Azure Storage account, Log Analytics workspace, or Event Hub.
        5. Apply and save these settings to maintain a robust monitoring framework.

        ### Enabling Diagnostic Settings via Azure CLI:

        To create or update diagnostic settings for capturing essential log categories, use:

        ```bash
        az monitor diagnostic-settings create --name <NameOfSetting> --resource /subscriptions/{subscriptionId} --logs '[{"category": "Administrative", "enabled": true}, {"category": "Security", "enabled": true}, {"category": "Alert", "enabled": true}, {"category": "Policy", "enabled": true}]' --storage-account <StorageAccountId> --workspace <LogAnalyticsWorkspaceId> --event-hub <EventHubName>
        ```

        ### PowerShell Command for Diagnostic Settings:

        Apply the following command to set up diagnostic logging for the necessary categories:

        ```powershell
        $categories = @("Administrative", "Security", "Alert", "Policy")
        $settings = @()
        foreach ($category in $categories) {
            $settings += New-AzDiagnosticSettingSubscriptionLogSettingsObject -Category $category -Enabled $true
        }

        New-AzSubscriptionDiagnosticSetting -SubscriptionId <SubscriptionId> -Name <SettingName> -Log $settings
        ```

        Replace placeholder values with your actual subscription ID, setting name, and destination details. Regular review and adjustment of these settings are crucial to adapt to evolving security and operational requirements.

  - uid: mondoo-azure-security-disable-udp-virtualmachines
    title: Ensure direct UDP access to Resources from the internet is restricted
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsUDP
        title: a list of disallowed UDP ports, by default covering common UDP services, add more as needed
        mql: |
          return [
            53,    // DNS
            123,   // NTP
            161,   // SNMP
            389,   // CLDAP
            1900   // SSDP
          ]
    variants:
      - uid: mondoo-azure-security-disable-udp-virtualmachines-single
      - uid: mondoo-azure-security-disable-udp-virtualmachines-api
    docs:
      desc: |
        Exposing UDP services to the internet increases the attack surface significantly and can make Azure resources susceptible to reflection amplification attacks. These attacks exploit the connectionless nature of the UDP protocol, allowing attackers to spoof a target's IP address and send information requests using UDP. The victimized server, deceived by the spoofed IP, sends responses to the target instead of the attacker, leading to a reflection attack that can amplify the traffic directed at the victim, often resulting in a denial-of-service (DoS).

        The inherent risk lies in UDP's lack of connection verification, which doesn't authenticate source IP addresses, making it trivial for attackers to manipulate IP datagrams to stage such attacks. Servers with open UDP ports, especially those using well-known protocols like DNS, NTP, CLDAP, CharGEN, SSDP, BitTorrent, SNMPv2, RPC, NetBIOS, or TFTP, can be exploited as amplifiers in such attacks.

        To mitigate these risks across Azure resources, not just virtual machines but including any service that might expose UDP ports to the internet, it's crucial to ensure that access to known UDP services is strictly controlled. By limiting unnecessary UDP traffic from the internet and employing best practices for network security, you can reduce the likelihood of these attacks significantly.

        Employing Network Security Groups (NSGs) to deny or control inbound UDP traffic, especially on ports known to be vulnerable or unnecessary for internet exposure, is a key defensive measure. Additionally, monitoring and logging traffic can help identify potential abuse or misconfiguration. For services that require UDP access, ensure they are secured, monitored, and only exposed when absolutely necessary, using the principle of least privilege to minimize potential attack vectors.
        Some application-layer protocols that rely on the UDP are:

          * Domain Name System (DNS)
          * Network Time Protocol (NTP)
          * Connection-less Lightweight Directory Access Protocol (CLDAP)
          * Character Generator Protocol (CharGEN)
          * Simple Service Discovery Protocol (SSDP)
          * BitTorrent
          * Simple Network Management Protocol version 2 (SNMPv2)
          * Portmap/Remote Procedure Call (RPC)
          * Network Basic Input/Output System (NetBIOS)
          * Trivial File Transfer Protocol (TFTP)
      audit: |
        **Manual Audit via Azure Portal:**

        1. Access the Azure Portal and review the networking settings for each resource, focusing on those with public internet exposure.
        2. Inspect inbound port rules for associated Network Security Groups (NSGs) and any other relevant firewall settings.
        3. Confirm that none of the critical UDP ports are allowed from the internet, particularly for resources that do not require such access.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to review NSG rules across your Azure environment:

        ```bash
        az network nsg rule list --query "[].{NSG:networkSecurityGroup, Protocol:protocol, Access:access, Direction:direction, SourceAddressPrefix:sourceAddressPrefix, DestinationPortRange:destinationPortRange}" -o table
        ```

        Ensure no rule improperly exposes the specified UDP ports to the internet.
      remediation: |
        **To Restrict UDP Traffic in Azure Portal:**

        1. Navigate to the networking settings for each Azure resource, accessed via its specific blade in the Azure Portal.
        2. Modify or remove any inbound security rules that allow traffic on the disallowed UDP ports from the internet.
        3. Where necessary, employ alternative secure access methods like VPNs or private connections (e.g., Azure ExpressRoute).

        **To Update NSG Rules via Azure CLI:**

        For each identified rule that allows risky UDP traffic, either delete the rule:

        ```bash
        az network nsg rule delete --resource-group <ResourceGroupName> --nsg-name <NSGName> --name <RuleName>
        ```

        Or update it to restrict or deny such traffic:

        ```bash
        az network nsg rule update --resource-group <ResourceGroupName> --nsg-name <NSGName> --name <RuleName> --access Deny
        ```

        Regularly reviewing and adjusting these settings helps maintain robust defense mechanisms against potential UDP-based network exploits across all your Azure resources.
  - uid: mondoo-azure-security-disable-udp-virtualmachines-single
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgUDP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgUDP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsUDP {
        disallowedPortUDP = _
        disallowedPortUDP
        allNsgUDP.none(destinationPortRange.any(fromPort <= disallowedPortUDP && toPort >= disallowedPortUDP))
      }
  - uid: mondoo-azure-security-disable-udp-virtualmachines-api
    filters: |
      asset.platform == "azure"
    mql: |
      allNsgUDP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgUDP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.mondooAzureSecurityDisallowedPortsUDP {
        disallowedPortUDP = _
        disallowedPortUDP
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= disallowedPortUDP && toPort >= disallowedPortUDP)))
      }
