# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-azure-security
    name: Mondoo Microsoft Azure Security
    version: 2.0.3
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: azure,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        The Mondoo Azure Security policy is designed to identify critical misconfigurations that could leave your Azure infrastructure vulnerable to attackers. This policy helps organizations detect and remediate security risks before they can be exploited, reducing the likelihood of unauthorized access, data breaches, privilege escalation, and operational disruptions.

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable. This policy is open-source and we welcome contributions from the community, whether it's adding new checks, refining existing ones, or providing feedback. If you have suggestions to improve this policy, visit our [cnspec-policies repository](https://github.com/mondoohq/cnspec-policies).
    groups:
      - title: Azure Storage
        checks:
          - uid: mondoo-azure-security-public-access-level-private-blob-containers
          - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
          - uid: mondoo-azure-security-secure-transfer-required-enabled
          - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
      - title: Azure SQL
        checks:
          - uid: mondoo-azure-security-sql-server-audit-on
          - uid: mondoo-azure-security-sql-server-tde-on
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
          - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
          - uid: mondoo-azure-security-ensure-disabled-public-access-sql
      - title: Azure Key Vault
        checks:
          - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
          - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
          - uid: mondoo-azure-security-ensure-logging-enabled-kv
          - uid: mondoo-azure-security-keyvault-public-access-disabled
      - title: Azure Compute
        checks:
          - uid: mondoo-azure-security-rdp-access-restricted-from-internet
          - uid: mondoo-azure-security-ssh-access-restricted-from-internet
          - uid: mondoo-azure-security-vnc-access-restricted-from-internet
          - uid: mondoo-azure-security-disable-udp-virtualmachines
          - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
          - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
      - title: Azure Core
        checks:
          - uid: mondoo-azure-security-diagnostic-settings-essential-categories
          - uid: mondoo-azure-security-diagnostic-settings-exist
          - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
          - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
          - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
          - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    scoring_system: highest impact
queries:
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure OS Disks in azure virtual machines are encrypted with Customer Managed Keys (CMK)
    impact: 80
    filters: |
      asset.platform == "azure-compute-vm-api"
    mql: |
      azure.subscription.compute.vm.osDisk.properties.encryption.type == "EncryptionAtRestWithCustomerKey"
    docs:
      desc: |
        This check ensures that OS disks for Azure virtual machines are encrypted, which is critical for securing boot volumes from unauthorized access and data breaches. The use of Customer Managed Keys (CMK) offers enhanced control over the encryption and decryption processes, allowing organizations to manage their own keys via Azure Key Vault. This approach not only meets compliance requirements but also provides a higher level of security by enabling key rotation and revocation capabilities. Encrypting OS disks ensures that the data is unreadable to unauthorized users, protecting it from both external attacks and insider threats. Customer managed keys can be either Azure Disk Encryption (ADE) or server-side encryption (SSE).

        **Why this matters**

        Exposing management ports in Docker containers can lead to significant security risks:

        - **Unauthorized access**: These ports are commonly targeted by attackers to gain unauthorized access to containerized environments.
        - **Increased attack surface**: Exposing these ports unnecessarily expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting access to management ports to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed management ports can lead to unintended access, service disruptions, or data breaches.

        By ensuring these ports are not exposed, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Docker container configurations.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Virtual machines** in the Azure Portal.
        2. Select a virtual machine and access **Disks** under the Settings menu.
        3. Verify the encryption settings for the OS disk to ensure it uses CMK.

        **Automated Audit with Azure CLI:**

        List and check the encryption settings for all disks in a specific resource group:

        ```bash
        az disk list --resource-group "yourResourceGroupName" --query "[].{Name:name, ResourceGroupName:resourceGroup, EncryptionSettings:encryptionSettingsCollection}" -o table
        ```

        **Automated Audit with PowerShell:**

        ```powershell
        Get-AzDisk -ResourceGroupName "yourResourceGroupName" | Select-Object Name, ResourceGroupName, EncryptionSettingsCollection
        ```

        Ensure the EncryptionType is set to EncryptionAtRestWithCustomerKey for OS disks.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To update using Microsoft Azure Portal:

            1. Log into the Azure Portal and navigate to **Disks**.
            2. Select the OS disk you wish to encrypt.
            3. In the **Encryption** section, set **Encryption type** to **Customer-managed keys**.
            4. Specify the Azure Key Vault and select the appropriate key.
            5. Save the changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            ```bash
            az vm encryption enable --resource-group <ResourceGroupName> --name <VMName> --disk-encryption-keyvault <KeyVaultName> --key-encryption-key <KeyName> --volume-type OS
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            Set-AzVMDiskEncryptionExtension -ResourceGroupName <ResourceGroupName> -VMName <VMName> -KeyVaultUrl <KeyVaultUrl> -VolumeType OS
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            __Encrypt disks Linux VM__

            ```hcl
            # Encrypt Linux OS disk with Terraform
            resource "azure_linux_virtual_machine" "example" {
              name                = "example-linux-machine"
              resource_group_name = azure_resource_group.example.name
              location            = azure_resource_group.example.location

              ...

              encryption_at_host_enabled = true

              ...
            }
            ```

            __Encrypt disks Windows VM__

            ```hcl
            resource "azure_windows_virtual_machine" "example" {
              name                = "example-windows-machine"
              resource_group_name = azure_resource_group.example.name
              location            = azure_resource_group.example.location

              ...

              encryption_at_host_enabled = true

              ...
            }
            ```

            __Encrypt disks managed disks__

            ```hcl
            resource "azure_managed_disk" "example" {
              name                 = var.disk_name
              location             = var.location
              resource_group_name  = var.resource_group_name
              ...

              encryption_settings {
                enabled = true
              }

              ...
            }
            ```
    refs:
      - url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
        title: Overview of managed disk encryption options
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsSSH
        title: A list of disallowed TCP ports, by default SSH listens only on TCP port 22. Add more ports as needed.
        mql: |
          return [
            22,
          ]
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsSSH {
        disallowedPortSSH = _
        disallowedPortSSH
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortSSH && toPort >= disallowedPortSSH))
      }
    docs:
      desc: |
        This check ensures that SSH access (port 22) is restricted from the internet to minimize security risks.

        **Why this matters**

        Exposing SSH access to the internet can lead to significant security risks:

        - **Unauthorized access**: SSH is a common target for brute force and other unauthorized access attempts.
        - **Increased attack surface**: Allowing unrestricted SSH access expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting SSH access to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed SSH access can lead to unintended access, service disruptions, or data breaches.

        By ensuring SSH access is restricted to known, secure sources, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Azure resources.
      audit: |
        **Manual Audit via Azure Portal:**

          **Checking via Network Security Groups (NSGs) for All Resources:**
          1. From the main Azure Portal menu, navigate to **Network security groups**.
          2. Select an NSG associated with the resources you want to check.
          3. Go to the **Inbound security rules** section.
          4. Review all the rules to ensure none allow SSH access (port 22, TCP) from broadly defined sources such as 'Any', '0.0.0.0', or 'Internet'.
          5. Confirm that rules configured to permit SSH access are scoped to specific, known IP addresses or ranges to minimize exposure.

          **Checking Specific Virtual Machines:**
          1. Log into the Azure Portal.
          2. Navigate to **Virtual machines**.
          3. Select a specific virtual machine to review.
          4. Within the virtual machine's blade, select **Networking** under the settings menu.
          5. Access the **Networking** blade of the selected VM, then review the **Inbound port rules**.
          6. Ensure there are no rules allowing SSH access (port 22, TCP) from 'Any' or 'Internet' source address prefixes. Only secure, specified IP ranges should be allowed, if necessary.

        **Automated Audit with Azure CLI:**

        List NSGs and check for SSH access rules:

        ```bash
        az network nsg list --query "[].{NSG: name, Rules: securityRules[?access=='Allow' && protocol=='Tcp' && direction=='Inbound' && (destinationPortRange=='22' || destinationPortRanges.contains('22')) && (sourceAddressPrefix=='*' || sourceAddressPrefix=='0.0.0.0' || sourceAddressPrefix=='<nw>/0' || sourceAddressPrefix=='/0' || sourceAddressPrefix=='internet' || sourceAddressPrefix=='any')]}" -o table
        ```
      remediation:
        - id: portal
          desc: |
            **Azure Portal**

            1. In the Azure Portal, navigate to **Network Security Groups (NSG)** associated with your VMs.
            2. Review or modify the inbound security rules:
              - Set `source_address_prefix` to a specific IP range or a VPN gateway rather than 'Any' or 'Internet'.
              - Ensure that the `destination_port_range` does not include TCP port 22 unless absolutely necessary and from a secure source.
        - id: cli
          desc: |
            **Using Azure CLI**

            Update or create a new NSG rule to restrict SSH access:

            ```bash
            az network nsg rule create --resource-group <ResourceGroupName> --nsg-name <NSGName> --name RestrictSSH --priority 1001 --direction Inbound --access Deny --protocol Tcp --source-address-prefixes <YourSecureIPRange> --destination-port-ranges 22
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            New-AzNetworkSecurityRuleConfig -Name RestrictSSH -Protocol Tcp -Direction Inbound -Priority 1001 -SourceAddressPrefix <YourSecureIPRange> -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 22 -Access Allow
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

            resource "azure_network_security_group" "my_terraform_nsg" {
              name                = "myNetworkSecurityGroup"
              location            = azure_resource_group.rg.location
              resource_group_name = azure_resource_group.rg.name

              security_rule {
                name                       = "SSH"
                priority                   = 1001
                direction                  = "Inbound"
                access                     = "Allow"
                protocol                   = "Tcp"
                source_port_range          = "*"
                destination_port_range     = "22"
                source_address_prefix      = "192.168.22.5/24"
                destination_address_prefix = "*"
              }
            }
            ```
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsRDP
        title: a list of disallowed TCP ports, by default RDP listens only on TCP port 3389. Add more ports as needed.
        mql: |
          return [
            3389,
          ]
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsRDP {
        disallowedPortRDP = _
        disallowedPortRDP
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortRDP && toPort >= disallowedPortRDP))
      }
    docs:
      desc: |
        This check ensures that RDP access (port 3389) is restricted from the internet to minimize security risks.

        **Why this matters**

        Exposing RDP access to the internet can lead to significant security risks:

        - **Unauthorized access**: RDP is a common target for brute force and other unauthorized access attempts.
        - **Increased attack surface**: Allowing unrestricted RDP access expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting RDP access to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed RDP access can lead to unintended access, service disruptions, or data breaches.

        By ensuring RDP access is restricted to known, secure sources, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Azure resources.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log into the Azure Portal.
        2. Navigate to **Network security groups** under the Networking or directly through the search bar.
        3. For each NSG, access the **Inbound security rules**.
        4. Carefully review each rule to identify any that allow inbound RDP traffic (TCP port 3389):
          - Check for rules where the protocol is set to `TCP`.
          - The destination port or port range includes `3389`.
          - The source address prefix is too broad, such as 'Any', '0.0.0.0', '<nw>/0', '/0', 'internet', or 'any'.
        5. Note down any NSG rules that do not comply with your organization's security policy regarding restricted access to RDP. These rules should ideally allow access only from trusted, secure networks, and not from the open internet.

        1. Navigate to **Virtual Machines** in the Azure Portal.
        2. For each VM, select the **Networking** blade to review network configurations.
        3. Check the **Inbound port rules** under the associated Network Security Group (NSG).
        4. Verify that there are no rules allowing RDP access (TCP port 3389) from 'Any' or 'Internet'. Only secure, specified IP ranges should be allowed if necessary.

        **Automated Audit with Azure CLI:**

        List NSGs and verify RDP access rules:

        ```bash
        az network nsg list --query "[].{NSG: name, Rules: securityRules[?access=='Allow' && protocol=='Tcp' && direction=='Inbound' && (destinationPortRange=='3389' || destinationPortRanges.contains('3389')) && (sourceAddressPrefix=='*' || sourceAddressPrefix=='0.0.0.0' || sourceAddressPrefix=='<nw>/0' || sourceAddressPrefix=='/0' || sourceAddressPrefix=='internet' || sourceAddressPrefix=='any')]}" -o table
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log into the Azure Portal and navigate to **Network Security Groups**.
            2. Select the NSG associated with your VM.
            3. Review the **Inbound security rules** and modify or delete any rules that allow internet access to port 3389.
            4. Preferably, change the `source_address_prefix` to more restrictive settings, such as a specific IP range or a secure VPN gateway.
        - id: cli
          desc: |
            **Using Azure CLI**

            Update or create a new NSG rule to restrict RDP access:

            ```bash
            az network nsg rule create --resource-group <ResourceGroupName> --nsg-name <NSGName> --name RestrictRDP --priority 1001 --direction Inbound --access Deny --protocol Tcp --source-address-prefixes <YourSecureIPRange> --destination-port-ranges 3389
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            New-AzNetworkSecurityRuleConfig -Name RestrictRDP -Protocol Tcp -Direction Inbound -Priority 1001 -SourceAddressPrefix <YourSecureIPRange> -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 3389 -Access Allow
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

            resource "azure_network_security_group" "example" {
              name                = "example-rdp-security"
              location            = azure_resource_group.rg.location
              resource_group_name = azure_resource_group.rg.name

              security_rule {
                name                       = "RDP"
                priority                   = 1001
                direction                  = "Inbound"
                access                     = "Allow"
                protocol                   = "Tcp"
                source_port_range          = "*"
                destination_port_range     = "3389"
                source_address_prefix      = "192.168.22.5/24"
                destination_address_prefix = "*"
              }
            }
            ```
  - uid: mondoo-azure-security-vnc-access-restricted-from-internet
    title: Ensure that VNC access is restricted from the internet
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsVNC
        title: a list of disallowed TCP ports, by default VNC listens only on TCP port 5900. Add more ports as needed.
        mql: |
          return [
            5900,
          ]
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsVNC {
        disallowedPortVNC = _
        disallowedPortVNC
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortVNC && toPort >= disallowedPortVNC))
      }
    docs:
      desc: |
        This check ensures that VNC access (port 5900) is restricted from the internet to minimize security risks.

        **Why this matters**

        Exposing VNC access to the internet can lead to significant security risks:

        - **Unauthorized access**: VNC is a common target for brute force and other unauthorized access attempts.
        - **Increased attack surface**: Allowing unrestricted VNC access expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting VNC access to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed VNC access can lead to unintended access, service disruptions, or data breaches.

        By ensuring VNC access is restricted to known, secure sources, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Azure resources.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log into the Azure Portal.
        2. Navigate to **Network security groups** under the Networking or directly through the search bar.
        3. For each NSG, access the **Inbound security rules**.
        4. Carefully review each rule to identify any that allow inbound VNC traffic (TCP port 5900):
          - Check for rules where the protocol is set to `TCP`.
          - The destination port or port range includes `5900`.
          - The source address prefix is too broad, such as 'Any', '0.0.0.0', '<nw>/0', '/0', 'internet', or 'any'.
        5. Note down any NSG rules that do not comply with your organization's security policy regarding restricted access to VNC. These rules should ideally allow access only from trusted, secure networks, and not from the open internet.

        1. Navigate to **Virtual Machines** in the Azure Portal.
        2. For each VM, select the **Networking** blade to review network configurations.
        3. Check the **Inbound port rules** under the associated Network Security Group (NSG).
        4. Verify that there are no rules allowing VNC access (TCP port 5900) from 'Any' or 'Internet'. Only secure, specified IP ranges should be allowed if necessary.

        **Automated Audit with Azure CLI:**

        List NSGs and verify VNC access rules:

        ```bash
        az network nsg list --query "[].{NSG: name, Rules: securityRules[?access=='Allow' && protocol=='Tcp' && direction=='Inbound' && (destinationPortRange=='5900' || destinationPortRanges.contains('5900')) && (sourceAddressPrefix=='*' || sourceAddressPrefix=='0.0.0.0' || sourceAddressPrefix=='<nw>/0' || sourceAddressPrefix=='/0' || sourceAddressPrefix=='internet' || sourceAddressPrefix=='any')]}" -o table
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log into the Azure Portal and navigate to **Network Security Groups**.
            2. Select the NSG associated with your VM.
            3. Review the **Inbound security rules** and modify or delete any rules that allow internet access to port 5900.
            4. Preferably, change the `source_address_prefix` to more restrictive settings, such as a specific IP range or a secure VPN gateway.
        - id: cli
          desc: |
            **Using Azure CLI**

            Update or create a new NSG rule to restrict VNC access:

            ```bash
            az network nsg rule create --resource-group <ResourceGroupName> --nsg-name <NSGName> --name RestrictVNC --priority 1001 --direction Inbound --access Deny --protocol Tcp --source-address-prefixes <YourSecureIPRange> --destination-port-ranges 5900
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            New-AzNetworkSecurityRuleConfig -Name RestrictVNC -Protocol Tcp -Direction Inbound -Priority 1001 -SourceAddressPrefix <YourSecureIPRange> -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 5900 -Access Allow
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

            resource "azure_network_security_group" "example" {
              name                = "example-vnc-security"
              location            = azure_resource_group.rg.location
              resource_group_name = azure_resource_group.rg.name

              security_rule {
                name                       = "VNC"
                priority                   = 1001
                direction                  = "Inbound"
                access                     = "Allow"
                protocol                   = "Tcp"
                source_port_range          = "*"
                destination_port_range     = "5900"
                source_address_prefix      = "192.168.22.5/24"
                destination_address_prefix = "*"
              }
            }
            ```
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Mandate HTTPS for Secure Data Transfer to azure storage accounts
    impact: 80
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.EnableHTTPSTrafficOnly == true
    docs:
      desc: |
        This check ensures that "Secure transfer required" is enabled. This setting enforces the use of HTTPS for data operations, ensuring that data transmitted to and from Azure storage accounts is secured.

        **Why this matters**

        Enabling "Secure transfer required" provides critical security benefits:

        - **Data protection**: Ensures that data in transit is encrypted, preventing interception or tampering during transmission.
        - **Compliance**: Aligns with security best practices and regulatory requirements for secure data transmission.
        - **Mitigation of risks**: Blocks unencrypted HTTP requests, reducing the risk of data breaches or unauthorized access.
        - **Operational integrity**: Prevents unencrypted connections, such as certain SMB protocols, from accessing storage accounts, ensuring secure communication.

        By enforcing HTTPS for all data operations, this check helps to minimize security vulnerabilities, enhance compliance, and protect sensitive data in Azure storage accounts.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** from the Azure portal.
        2. For each storage account, select **Configuration** under the settings panel.
        3. Verify that the **Secure transfer required** option is set to **Enabled**.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to check the status of the 'Secure transfer required' setting across all storage accounts:

        ```bash
        az storage account list --query "[].{AccountName:name, SecureTransferEnabled: enableHttpsTrafficOnly}" -o table
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Navigate to **Storage Accounts** in the Azure portal.
            2. Select the storage account you want to configure.
            3. In the settings menu, select **Configuration**.
            4. Set the **Secure transfer required** option to **Enabled**.
            5. Save the changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Enable 'Secure transfer required' for an individual storage account in a resource group:

            ```bash
            az storage account update --name <StorageAccountName> --resource-group <ResourceGroupName> --https-only true
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            Set-AzStorageAccount -Name <StorageAccountName> -ResourceGroupName <ResourceGroupName> -EnableHttpsTrafficOnly $true
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            resource "azure_storage_account" "example_storage_account" {
              ...
              enable_https_traffic_only = true
            }
            ```
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that anonymous access to blob containers and public access on storage accounts are disabled
    impact: 80
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
    docs:
      desc: |
        This check ensures that anonymous access to blob containers is disabled and public access on storage accounts is disabled.

        **Why this matters**

        Allowing anonymous access to blob containers and enabling public access on storage accounts can lead to significant security risks:

        - **Unauthorized access**: Anonymous access allows anyone to read or write data without authentication, potentially exposing sensitive information.
        - **Increased attack surface**: Public access to storage accounts expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting public access to storage accounts to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed storage accounts can lead to unintended data exposure, service disruptions, or data breaches.

        By ensuring anonymous access is disabled and public access is restricted, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Azure storage accounts.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to Storage Accounts.
        2. For each storage account, go to the Networking setting under Security + networking.
        3. Ensure the 'Public Network Access' setting is set to 'Disabled'.
        4. In the storage account menu pane, under the 'Settings' section, select 'Configuration'.
        5. Under 'Allow Blob Anonymous Access', ensure that the setting is 'Disabled'.

        **Automated Audit with Azure CLI:**

        1. Authenticate using az login and ensure you are in the correct subscription.
        2. Use the following command to check the 'Public Network Access' setting:

        ```bash
        az storage account show --name <storage-account> --resource-group <resource-group> --query "{publicNetworkAccess:publicNetworkAccess}"
        ```

        ```bash
        az storage account show --name <yourStorageAccountName> --query allowBlobPublicAccess
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Go to Storage Accounts.
            2. For each storage account, go to Networking in Security + networking.
            3. Set 'Public Network Access' to 'Disabled'.
            4. Select a Storage Account and in the settings pane, select 'Configuration'.
            5. Under 'Allow Blob Anonymous Access', select 'Disabled'.
            6. For each container, change the access level to 'Private (no anonymous access)'.
        - id: cli
          desc: |
            **Using Azure CLI**

            - Disable public network access:

              ```bash
              az storage account update --name <storage-account> --resource-group <resource-group> --public-network-access Disabled
              ```

            - Set blob containers to private access:

              ```bash
              az storage container set-permission --name <container_name> --public-access off --account-name <account_name> --account-key <account_key>
              ```
        - id: powershell
          desc: |
            **Using PowerShell**

            - Disable public network access:

              ```powershell
              Set-AzStorageAccount -Name <storage-account> -ResourceGroupName <resource-group> -PublicNetworkAccess Disabled
              ```

            - Set blob containers to private access:

              ```powershell
              Set-AzStorageContainerAcl -Name <container_name> -PublicAccess Off -Context $context
              ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            # Ensure the `allow_blob_public_access` is set to `false`

            resource "azure_storage_account" "example_storage_account" {
              ...
              allow_blob_public_access = false
            }
            ```

            ```hcl
            # Ensure the `container_access_type` is set to `private`
            resource "azure_storage_container" "example_container" {
              ...
              container_access_type = "private"
            }
            ```
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Enforce Deny as Default Network Access for Azure Storage Accounts
    impact: 80
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.defaultAction == "Deny"
    docs:
      desc: |
        This check ensures that Azure storage accounts have their default network access rule set to "Deny". This configuration is critical for enhancing security by ensuring that only explicitly allowed networks can access the storage accounts.

        **Why this matters**

        Setting the default network access rule to "Deny" provides several security benefits:

        - **Unauthorized access prevention**: Blocks access from any network that is not explicitly allowed, reducing the risk of unauthorized access.
        - **Minimized attack surface**: Restricts access to storage accounts, ensuring that only approved sources such as specific Azure Virtual Networks or designated public IP addresses can connect.
        - **Compliance alignment**: Many security standards and best practices recommend limiting access to sensitive resources to reduce potential threats.
        - **Operational integrity**: Prevents accidental exposure of storage accounts to the public internet, safeguarding sensitive data from unauthorized access or breaches.

        By enforcing this configuration, this check helps to secure Azure storage accounts, align with best practices, and enhance the overall security posture of your Azure environment.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** in the Azure Portal.
        2. Select a storage account and select the **Networking** blade.
        3. Under the **Firewalls and virtual networks** section, review the **Default action**.
        4. Ensure the Default action is set to **Deny**. This setting should block all access unless explicitly allowed by other network rules.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to verify the default network access rule for all storage accounts:

        ```bash
        az storage account list --query "[].{AccountName: name, DefaultAction: networkRuleSet.defaultAction}" -o table
        ```

        This command lists each storage account along with the default action. Verify that all entries show "Deny" as the default action.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log into the Azure Portal and navigate to **Storage Accounts**.
            2. Select the storage account you wish to configure.
            3. Select the **Networking** blade.
            4. Navigate to the **Firewalls and virtual networks** section.
            5. Set the **Default action** to **Deny**.
            6. Save your changes to enforce that all unrecognized network traffic is blocked by default.
        - id: cli
          desc: |
            **Using Azure CLI**

            To set the default network access rule to "Deny" for a new storage account, use the following Azure CLI command:

            ```bash
            az storage account create --name <StorageAccountName> --resource-group <ResourceGroupName> --location <Location> --default-action Deny
            ```

            This command updates the storage account to deny all traffic by default, significantly enhancing the security posture by limiting access to only configured exceptions.
        - id: powershell
          desc: |
            **Using PowerShell**

            To set the default network access rule to "Deny" for a new storage account, use the following PowerShell command:

            ```powershell
            New-AzStorageAccount -ResourceGroupName <ResourceGroupName> -Name <StorageAccountName> -Location <Location> -SkuName Standard_LRS -Kind StorageV2 -DefaultAction Deny
            ```

            This command updates the storage account to deny all traffic by default, significantly enhancing the security posture by limiting access to only configured exceptions.
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            # Ensure the `default_action` is set to `Deny`

            resource "azure_storage_account_network_rules" "example_storage_account" {
              resource_group_name  = azure_resource_group.example.name
              storage_account_name = azure_storage_account.example.name

              default_action       = "Deny"
            }
            ```

            ```hcl
            resource "azure_storage_account" "example_storage_account" {
              name                = "example_storage_account"
              resource_group_name = azure_resource_group.example.name
              location            = azure_resource_group.example.location

              network_rules {
                default_action = "Deny"
              }

              ...
            }
            ```
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure "Trusted Microsoft Services" have access to azure storage accounts
    impact: 80
    filters: |
      asset.platform == "azure-storage-account"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.bypass.contains("AzureServices")
      azure.subscription.storage.account.properties.NetworkRuleSet.defaultAction == "Deny"
    docs:
      desc: |
        This check ensures that "Trusted Microsoft Services" is enabled for storage account access.

        **Why this matters**

        Allowing trusted Microsoft services to access storage accounts provides several benefits:

        - **Operational functionality**: Certain Azure services, such as Azure Backup, Azure Site Recovery, Azure Monitor, and Azure Event Grid, require access to storage accounts to function properly. Enabling this setting ensures these services can operate without interruptions.
        - **Enhanced security**: Access is granted securely using strong authentication mechanisms, reducing the risk of unauthorized access.
        - **Compliance alignment**: Many security standards recommend limiting access to trusted services to maintain a secure environment.
        - **Reduced complexity**: This setting simplifies network configurations by allowing trusted services to bypass network rules without compromising security.

        By enabling this setting, organizations can maintain both functionality and security for Azure storage accounts, ensuring seamless integration with essential Azure services while minimizing potential risks.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Storage Accounts** in the Azure Portal.
        2. Select a specific storage account.
        3. Go to the **Networking** blade.
        4. Under the **Firewalls and virtual networks** section, check if the option **Allow Azure services on the trusted services list to access this storage account** is enabled.

        **Automated Audit with Azure CLI:**

        List the network rules for all storage accounts and verify that AzureServices is included in the bypass list:

        ```bash
        az storage account list --query "[*].{AccountName:name, BypassRules:networkRuleSet.bypass}" -o table
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Navigate to **Storage Accounts** in the Azure Portal.
            2. Select the storage account you want to configure.
            3. Go to the **Networking** blade.
            4. Under the **Firewalls and virtual networks** section, check the box for **Allow Azure services on the trusted services list to access this storage account**.
            5. Save your changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Enable trusted Microsoft services for a storage account:

            ```bash
            az storage account update --name <StorageAccountName> --resource-group <ResourceGroupName> --bypass AzureServices
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            Set-AzStorageAccount -Name <StorageAccountName> -ResourceGroupName <ResourceGroupName> -NetworkRuleSetBypass AzureServices
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            resource "azure_storage_account" "example" {
                ...
              network_rules {
                ...
                bypass = ["AzureServices"]
                ...
              }
            }
            ```
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
    title: Ensure minimum 30-Day retention for SQL server Audit Logs
    impact: 80
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
      azure.subscription.sql.server.auditingPolicy.retentionDays >= 30 ||
       azure.subscription.sql.server.auditingPolicy.retentionDays == 0
    docs:
      desc: |
        This check ensures that Azure SQL servers have an audit log retention policy set to at least 30 days.

        **Why this matters**

        Maintaining audit logs for an extended period is crucial for compliance and security analysis:

        - **Compliance requirements**: Many regulatory standards mandate retaining audit logs for a minimum duration to ensure traceability and accountability.
        - **Security incident analysis**: Historical audit logs help identify patterns and investigate potential security threats or breaches over time.
        - **Operational integrity**: Retaining logs for at least 30 days ensures that organizations have sufficient data to analyze and address operational anomalies.
        - **Forensic investigations**: Extended retention periods provide critical data for forensic investigations in the event of a security incident.

        By enforcing a minimum retention policy of 30 days, this check helps organizations comply with regulatory requirements, enhance their security posture, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **SQL servers** in the Azure Portal.
        2. Select a server and select **Auditing** under the **Security** settings.
        3. Check if the **Retention (days)** is set to 30 or more.

        **Automated Audit with Azure CLI:**

        Retrieve the audit retention settings for all SQL servers:

        ```bash
        az sql server list --query "[].{ServerName:name, RetentionDays:auditingSettings.retentionDays}" -o table
        ```

        Ensure that each server listed has a retention period of 30 days or more.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Navigate to **SQL servers** in the Azure Portal.
            2. Select the SQL server you want to configure.
            3. Go to **Auditing** under the **Security** section.
            4. Set the **Retention (days)** to at least 30 days, or use '0' for unlimited retention.
            5. Select **Save** to apply the changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Update the audit retention policy for a specific SQL server:

            ```bash
            az sql db audit-policy update --name <DatabaseName> --resource-group <ResourceGroupName> --retention-days 30
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            Set-AzSqlDatabaseAuditingPolicy -ResourceGroupName <ResourceGroupName> -ServerName <ServerName> -DatabaseName <DatabaseName> -RetentionDays 30
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            resource "azure_sql_server" "example" {
              ...
              extended_auditing_policy {
                storage_endpoint           = azure_storage_account.example.primary_blob_endpoint
                storage_account_access_key = azure_storage_account.example.primary_access_key
                storage_account_access_key_is_secondary = true
                retention_in_days                       = 30
              }
            }
            ```
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    impact: 80
    variants:
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql-flexible
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql-flexible
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
    docs:
      desc: |
        This check ensures that SQL databases across various platforms (Azure SQL, PostgreSQL, MySQL, MariaDB) do not permit unrestricted network access by blocking ingress from the IP address range "0.0.0.0/0".

        **Why this matters**

        Allowing unrestricted network access to SQL databases can lead to significant security risks:

        - **Unauthorized access**: Open access from "0.0.0.0/0" allows any IP address to connect, increasing the likelihood of unauthorized access.
        - **Increased attack surface**: Exposing databases to the internet unnecessarily expands the attack surface, making it easier for attackers to exploit vulnerabilities.
        - **Compliance risks**: Many security standards and best practices recommend restricting access to sensitive resources to reduce potential threats.
        - **Operational risks**: Misconfigured or exposed databases can lead to unintended access, data breaches, or service disruptions.

        By ensuring that ingress from "0.0.0.0/0" is blocked, this check helps to minimize security vulnerabilities, align with best practices, and enhance the overall security posture of Azure environments.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **SQL servers** in the Azure Portal.
        2. Select a specific SQL server.
        3. Under the **Settings** section, select **Firewall and virtual networks**.
        4. Review the **Firewall rules** section.
        5. Ensure that there are no rules allowing ingress from ""0.0.0.0/0"

        **Automated Audit with Azure CLI:**

        List the firewall rules for all SQL servers and verify that none allow ingress from "0.0.0.0/0":

        ```bash
        az sql server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az postgres server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az mysql server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        az mariadb server firewall-rule list --server <server-name> --resource-group <resource-group> --query "[?startIpAddress=='0.0.0.0'].{Name:name, StartIP:startIpAddress}"
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Navigate to **SQL servers** in the Azure Portal.
            2. Select the SQL server you want to configure.
            3. Go to **Firewall and virtual networks** under the **Settings** section.
            4. Review the **Firewall rules** and remove any rules allowing ingress from "0.0.0.0/0".
            5. Preferably, create new rules that restrict access to specific IP ranges or virtual networks.
            6. Save your changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Ensure that the start and end IP addresses in the firewall rules are set to secure IPs within your controlled network range, effectively blocking public access.

            ```bash
            # Replace <server-name>, <resource-group>, and <rule-name> with your specific details

            # Azure SQL
            az sql server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

            # PostgreSQL
            az postgres server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

            # MySQL
            az mysql server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>

            # MariaDB
            az mariadb server firewall-rule create --resource-group <resource-group> --server <server-name> --name <rule-name> --start-ip-address <secure-start-ip> --end-ip-address <secure-end-ip>
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            # Replace <server-name>, <resource-group>, and <rule-name> with your specific details

            # Azure SQL
            New-AzSqlServerFirewallRule -ResourceGroupName <resource-group> -ServerName <server-name> -FirewallRuleName <rule-name> -StartIpAddress <secure-start-ip> -EndIpAddress <secure-end-ip>

            # PostgreSQL
            New-AzPostgreSqlServerFirewallRule -ResourceGroupName <resource-group> -ServerName <server-name> -FirewallRuleName <rule-name> -StartIpAddress <secure-start-ip> -EndIpAddress <secure-end-ip>

            # MySQL
            New-AzMySqlServerFirewallRule -ResourceGroupName <resource-group> -ServerName <server-name> -FirewallRuleName <rule-name> -StartIpAddress <secure-start-ip> -EndIpAddress <secure-end-ip>

            # MariaDB
            New-AzMariaDbServerFirewallRule -ResourceGroupName <resource-group> -ServerName <server-name> -FirewallRuleName <rule-name> -StartIpAddress <secure-start-ip> -EndIpAddress <secure-end-ip>
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            __mySQL__

            ```hcl
            # Ensure `start_ip_address` is not configured to `0.0.0.0`

            resource "azure_mysql_firewall_rule" "example" {
              ...
              start_ip_address    = "192.168.2.22"
              end_ip_address      = "255.255.255.255"
            }
            ```

            __MariaDB__

            ```hcl
            # Ensure `start_ip_address` is not configured to `0.0.0.0`

            resource "azure_mariadb_firewall_rule" "example" {
              ...
              start_ip_address    = "192.168.2.22"
              end_ip_address      = "255.255.255.255"
            }
            ```

            __SQL__

            ```hcl
            # Ensure `start_ip_address` is not configured to `0.0.0.0`

            resource "azure_sql_firewall_rule" "example" {
              ...
              start_ip_address    = "192.168.2.22"
              end_ip_address      = "255.255.255.255"
            }
            ```

            __Postgres__

            ```hcl
            # Ensure `start_ip_address` is not configured to `0.0.0.0`

            resource "azure_postgresql_firewall_rule" "example" {
              ...
              start_ip_address    = "192.168.2.22"
              end_ip_address      = "255.255.255.255"
            }
            ```
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql-flexible
    filters: |
      asset.platform == "azure-postgresql-flexible-server"
    mql: |
      azure.subscription.postgreSql.flexibleServer.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql-flexible
    filters: |
      asset.platform == "azure-mysql-flexible-server"
    mql: |
      azure.subscription.mySql.flexibleServer.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
    filters: |
      asset.platform == "azure-mariadb-server"
    mql: |
      azure.subscription.mariaDb.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Enable Managed Identities for App services to Authenticate via Microsoft Entra ID
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.web.apps.all(identity.type == "SystemAssigned")
      azure.subscription.web.apps.all(identity.principalId != empty)
    docs:
      desc: |
        This check ensures that Managed Identities are enabled for Azure App Services to securely authenticate with Microsoft Entra ID.

        **Why this matters**

        Enabling Managed Identities for Azure App Services provides several security and operational benefits:

        - **Eliminates credential storage**: Managed Identities remove the need to store sensitive credentials within the application, reducing the risk of credential theft.
        - **Streamlined authentication**: Applications can directly authenticate to Azure services like Azure SQL Database, Azure Storage, and Azure Key Vault without requiring manual credential management.
        - **Enhanced security**: Managed Identities are tied to the application and managed by Azure, ensuring secure and seamless authentication.
        - **Compliance alignment**: Many security standards recommend minimizing the use of hardcoded credentials to reduce potential attack vectors.

        By enabling Managed Identities, this check helps to enhance the security posture of Azure App Services, align with best practices, and simplify authentication workflows.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **App Services**.
        3. Select an app service and select **Identity** under **Settings**.
        4. Verify that the **Status** for **System assigned managed identity** is set to **On**.

        ** Automated Audit with Azure CLI:**

        Use the Azure CLI to check if the system assigned identity is enabled for each App Service:

        ```bash
        az webapp identity show --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --query principalId
        ```
        If the command returns a non-null principal ID, it indicates that the managed identity is enabled. If it returns null, the managed identity is not enabled.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log in to the Azure Portal
            2. Navigate to **App Services**.
            3. Select an app service and select **Identity** under **Settings**.
            4. Set the **Status** for **System assigned managed identity** to **On**.
            5. Save your changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Enable a system-assigned managed identity for an App Service:

            ```bash
            az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            $app = Get-AzWebApp -ResourceGroupName <RESOURCE_GROUP_NAME> -Name <APP_NAME>
            $app.Identity.Type = "SystemAssigned"
            Set-AzWebApp -ResourceGroupName <RESOURCE_GROUP_NAME> -Name <APP_NAME> -Identity $app.Identity
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            resource "azurerm_app_service" "example" {
              name                = "example-app-service"
              location            = azurerm_resource_group.example.location
              resource_group_name = azurerm_resource_group.example.name
              app_service_plan_id = azurerm_app_service_plan.example.id

              identity {
                type = "SystemAssigned"
              }
            }
            ```
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure Key Vaults are configured with Recovery features
    impact: 80
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.properties.enablePurgeProtection == true
    docs:
      desc: |
        This check ensures that Azure Key Vaults are configured with purge protection to prevent accidental or malicious deletion of key vaults and their contents.

        **Why this matters**

        Enabling purge protection for Azure Key Vaults provides several critical security and operational benefits:

        - **Accidental deletion prevention**: Purge protection ensures that deleted key vaults cannot be permanently removed until the retention period is reached, reducing the risk of accidental data loss.
        - **Malicious deletion mitigation**: Protects against unauthorized or malicious attempts to permanently delete key vaults, ensuring that sensitive keys, secrets, and certificates remain recoverable.
        - **Compliance alignment**: Many regulatory standards and best practices recommend implementing safeguards to prevent the permanent loss of critical data.
        - **Operational resilience**: Ensures that deleted key vaults can be recovered during the retention period, minimizing disruptions to applications and services that rely on them.

        By enabling purge protection, this check helps to enhance the security posture of Azure Key Vaults, align with best practices, and ensure the availability and recoverability of critical cryptographic assets.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key Vaults**.
        3. Select a key vault and select **Properties**.
        4. Verify that **Purge Protection** is enabled, which ensures that deleted vaults and vault objects are recoverable during the retention period.

        **Automated Audit with Azure CLI:**

        Verify Purge Protection is enabled for each Key Vault:

        ```bash
        az keyvault list --query "[].{Name: name, PurgeProtection: properties.enablePurgeProtection}"
        ```
        Check the output for each Key Vault, ensuring that PurgeProtection is set to true.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log in to the Azure Portal at https://portal.azure.com.
            2. Navigate to **Key Vaults**.
            3. Select a key vault and select **Properties**.
            4. Scroll to the **Security** section.
            5. If **Purge Protection** is not enabled, enable it. Note that once enabled, this setting cannot be disabled.
            6. Save your changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Enable Purge Protection for a specific Key Vault:

            ```bash
            az keyvault update --name <VaultName> --resource-group <ResourceGroupName> --set properties.enablePurgeProtection=true
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            ```powershell
            $vault = Get-AzKeyVault -VaultName <VaultName> -ResourceGroupName <ResourceGroupName>
            $vault.EnablePurgeProtection = $true
            Set-AzKeyVault -KeyVault $vault
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            ```hcl
            resource "azurerm_key_vault" "example" {
              name                = "example-keyvault"
              location            = azurerm_resource_group.example.location
              resource_group_name = azurerm_resource_group.example.name

              purge_protection_enabled = true
            }
            ```
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web Apps use the latest available version of TLS encryption
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
    docs:
      desc: |
        This check ensures that Azure App Services use the latest available version of TLS encryption for secure Web App connections.

        **Why this matters**

        Using the latest TLS version provides several critical security benefits:

        - **Enhanced security**: TLS 1.2 offers stronger encryption algorithms and improved security features compared to older versions, reducing the risk of data breaches and unauthorized access.
        - **Compliance alignment**: Many regulatory standards and best practices require the use of up-to-date encryption protocols to protect sensitive data.
        - **Mitigation of vulnerabilities**: Older TLS versions, such as TLS 1.0 and TLS 1.1, are known to have vulnerabilities that can be exploited by attackers.
        - **Operational integrity**: Ensuring the use of the latest TLS version helps maintain secure communication channels, preventing potential disruptions caused by deprecated protocols.

        By enforcing the use of TLS 1.2, this check helps to minimize security vulnerabilities, align with compliance requirements, and enhance the overall security posture of Azure App Services.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **App Services**.
        3. Select an app service and select **TLS/SSL settings** under **Settings**.
        4. Verify that the **Minimum TLS Version** is set to **1.2**.

        **Automated Audit with Azure CLI:**

        Verify that the minimum TLS version is set to 1.2 for each App Service:

        ```bash
        az webapp config show --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --query minTlsVersion
        ```

        **Automated Audit with PowerShell:**

        Get-AzWebApp | foreach {
          Get-AzWebApp -ResourceGroupName $_.ResourceGroup -Name $_.Name | Select-Object Name, ResourceGroup, @{Name="TLS Version"; Expression={$_.SiteConfig.MinTlsVersion}}
        }
      remediation:
      - id: portal
        desc: |
          **Using Azure Portal**

          To update using Microsoft Azure Portal:
          1. Log into Microsoft Azure Portal at https://portal.azure.com
          2. Go to **App Services**.
          3. For each app:
             a. Select the app.
             b. Select **TLS/SSL settings** under **Settings**.
             c. Under **Minimum TLS Version**, select **1.2**.
             d. Select **Save**.
      - id: cli
        desc: |
          **Using Azure CLI**

          To set the minimum TLS version to 1.2 for a new app service:

          ```bash
          az webapp create --name <APP_NAME> --resource-group <RESOURCE_GROUP_NAME> --plan <APP_SERVICE_PLAN> --min-tls-version 1.2
          ```
      - id: powershell
        desc: |
          **Using PowerShell:**

          Get-AzWebApp | foreach {
            Set-AzWebApp -ResourceGroupName $_.ResourceGroup -Name $_.Name -MinTlsVersion "1.2"
          }
      - id: terraform
        desc: |
          **Using Terraform**

          To set the minimum TLS version to 1.2 for an app service:

          ```hcl
          resource "azurerm_app_service" "example" {
            name                = "example-app-service"
            location            = azurerm_resource_group.example.location
            resource_group_name = azurerm_resource_group.example.name
            app_service_plan_id = azurerm_app_service_plan.example.id

            site_config {
              min_tls_version = "1.2"
            }
          }
          ```
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the expiration date is set for all keys and secrets in key vaults
    impact: 80
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.keys.where(enabled == true).all(expires != empty)
      azure.subscription.keyVault.vault.secrets.where(enabled == true).all(expires != empty)
    docs:
      desc: |
        This check ensures that expiration dates are set for all keys and secrets in Azure Key Vaults to enforce proper key rotation and prevent the use of expired cryptographic materials.

        **Why this matters**

        Setting expiration dates for keys and secrets provides several critical benefits:

        - **Enhanced security**: Expiration dates enforce key rotation, reducing the risk of compromised or outdated cryptographic materials being used.
        - **Compliance alignment**: Many security standards and best practices require periodic key rotation and the use of expiration dates to meet regulatory requirements.
        - **Operational integrity**: Expired keys and secrets can disrupt applications and services. Setting expiration dates ensures proactive management and renewal of cryptographic materials.
        - **Risk mitigation**: Prevents the indefinite use of keys and secrets, reducing the likelihood of unauthorized access or data breaches.

        By ensuring that expiration dates are set, this check helps to enhance the security posture of Azure Key Vaults, align with compliance requirements, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to **Key Vaults** via the Azure Portal at https://portal.azure.com.
        2. Select a key vault and then select **Keys** or **Secrets**.
        3. Check each key and secret to verify that an expiration date is set and is appropriate.

        **Automated Audit with Azure CLI:**

        - For keys:

          ```bash
          az keyvault key list --vault-name <KeyVaultName> --query "[?attributes.expires && attributes.enabled == \`true\`].{name: name, expires: attributes.expires}" -o table
          ```

        - For secrets:

          ```bash
          az keyvault secret list --vault-name <KeyVaultName> --query "[?attributes.expires && attributes.enabled == \`true\`].{name: name, expires: attributes.expires}" -o table
          ```

        **Automated Audit with PowerShell:**

        - For keys:

          ```powershell
          Get-AzKeyVaultKey -VaultName <VaultName> | Where-Object {$_.Enabled -eq $true -and $_.Expires -ne $null}
          ```

        - For secrets:

          ```powershell
          Get-AzKeyVaultSecret -VaultName <VaultName> | Where-Object {$_.Enabled -eq $true -and $_.Expires -ne $null}
          ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log into Microsoft Azure Portal at https://portal.azure.com.
            2. Go to **Key vaults**.
            3. For each key vault:
               a. Select the key vault.
               b. Select **Keys** or **Secrets**.
               c. For each key/secret, set an expiration date.
        - id: cli
          desc: |
            **Using Azure CLI**

            To set an expiration date for a key or secret in a key vault:

            - For keys:

              ```bash
              az keyvault key set-attributes --vault-name <VaultName> --name <KeyName> --expires <DateTime-in-ISO8601>
              ```

            - For secrets:

              ```bash
              az keyvault secret set-attributes --vault-name <VaultName> --name <SecretName> --expires <DateTime-in-ISO8601>
              ```
        - id: powershell
          desc: |
            **Using PowerShell**

            To set an expiration date for a key or secret in a key vault:

            - For keys:

              ```powershell
              $key = Get-AzKeyVaultKey -VaultName <VaultName> -Name <KeyName>
              $key.Expires = (Get-Date).AddYears(1)
              Update-AzKeyVaultKey -VaultName <VaultName> -Key $key
              ```

            - For secrets:

              ```powershell
              $secret = Get-AzKeyVaultSecret -VaultName <VaultName> -Name <SecretName>
              $secret.Expires = (Get-Date).AddYears(1)
              Update-AzKeyVaultSecret -VaultName <VaultName> -Secret $secret
              ```
        - id: terraform
          desc: |
            **Using Terraform**

            To set an expiration date for a key or secret in a key vault:

            ```hcl
            resource "azurerm_key_vault_key" "example" {
              name         = "example-key"
              key_vault_id = azurerm_key_vault.example.id
              key_type     = "RSA"
              key_size     = 2048
              expiration_date = "2025-05-01T01:02:03Z"

              key_opts = [
                "decrypt",
                "encrypt",
                "sign",
                "unwrapKey",
                "verify",
                "wrapKey",
              ]
            }

            resource "azurerm_key_vault_secret" "example" {
              name         = "example-secret"
              value        = "exampleValue"
              key_vault_id = azurerm_key_vault.example.id
              expiration_date = "2025-05-01T01:02:03Z"
            }
            ```
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations in Azure Key Vault are logged
    impact: 80
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "audit").any(enabled == true))
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "allLogs").any(enabled == true))
    docs:
      desc: |
        This check ensures that all operations in Azure Key Vault are logged to provide a comprehensive audit trail for security and compliance purposes.

        **Why this matters**

        Monitoring interactions with Azure Key Vault is critical for maintaining security and compliance:

        - **Unauthorized access detection**: Logging operations allow organizations to audit access and use of keys, secrets, and certificates, ensuring that any unauthorized access or anomalies are detected and addressed.
        - **Compliance alignment**: Many regulatory standards and best practices require detailed logging of access to sensitive resources like Key Vault.
        - **Operational integrity**: Logs provide insights into the usage patterns of Key Vault, helping to identify misconfigurations or potential misuse.
        - **Incident response**: In the event of a security incident, logs serve as a critical resource for forensic investigations and root cause analysis.

        By enabling logging for Azure Key Vault, this check helps to enhance security, align with compliance requirements, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to the Azure Portal at https://portal.azure.com.
        2. Go to **Key Vaults** and select a Key Vault.
        3. Under **Monitoring**, select **Diagnostic settings**.
        4. Verify that logging for both **audit** and **allLogs** categories are enabled and that they are configured to send logs to an Azure Storage Account, Log Analytics workspace, or Event Hub.

        **Automated Audit with Azure CLI:**

        Retrieve the diagnostic settings for each Key Vault to ensure that logging is enabled:

        ```bash
        az monitor diagnostic-settings list --resource <Key Vault Resource ID> --output table
        ```

        Ensure that the output shows that logs for audit and allLogs categories are enabled and properly configured to a storage account or other supported destinations.

        **Automated Audit with PowerShell:**

        ```powershell
        Get-AzKeyVault | ForEach-Object {
            Get-AzDiagnosticSetting -ResourceId $_.ResourceId
        }
        ```
        Verify that each Key Vault has audit and allLogs enabled and is logging to the designated destinations.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            1. Log into Microsoft Azure Portal at https://portal.azure.com.
            2. Navigate to **Key Vaults**.
            3. Select a Key Vault and go to **Diagnostic settings**.
            4. Click on **Add diagnostic setting** or edit an existing one.
            5. Ensure that both **audit** and **allLogs** categories are selected.
            6. Choose the appropriate destination for logs (e.g., Storage Account, Log Analytics workspace).
            7. Save the changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            To create or update diagnostic settings for a Key Vault:

            ```bash
            az monitor diagnostic-settings create --name "defaultLogs" --resource <Key Vault Resource ID> --logs '[{"category": "audit", "enabled": true}, {"category": "allLogs", "enabled": true}]' --storage-account <Storage Account ID> | --workspace <Log Analytics Workspace ID> | --event-hub <Event Hub Name>
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            To create or update diagnostic settings for a Key Vault:

            ```powershell
            $logs = @(
                New-AzDiagnosticSettingLogConfig -Category "audit" -Enabled $true
                New-AzDiagnosticSettingLogConfig -Category "allLogs" -Enabled $true
            )
            Set-AzDiagnosticSetting -ResourceId <Key Vault Resource ID> -Log $logs -StorageAccountId <Storage Account ID> | -WorkspaceId <Log Analytics Workspace ID> | -EventHubAuthorizationRuleId <Event Hub Authorization Rule ID> | -EventHubName <Event Hub Name>
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            To create or update diagnostic settings for a Key Vault:

            ```hcl
            resource "azurerm_monitor_diagnostic_setting" "example" {
              name               = "kv-logging"
              target_resource_id = azurerm_key_vault.example.id
              log_analytics_workspace_id = azurerm_log_analytics_workspace.example.id

              log {
                category = "audit"
                enabled  = true

                retention_policy {
                  enabled = true
                  days    = 0
                }
              }

              log {
                category = "allLogs"
                enabled  = true

                retention_policy {
                  enabled = true
                  days    = 0
                }
              }

              metric {
                category = "AllMetrics"
                enabled  = false

                retention_policy {
                  enabled = false
                  days    = 0
                }
              }
            }
            ```
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that activity log alerts exist for the commands Create, Update, and Delete Network Security Group
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/write" && fieldName == "operationName"))
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName"))
    docs:
      desc: |
        This check ensures that activity log alerts are configured for the creation, update, and deletion of network security groups to monitor changes and detect suspicious activities.

        **Why this matters**

        Monitoring activity log alerts for network security group changes provides several critical benefits:

        - **Unauthorized access detection**: Alerts help identify unauthorized or unexpected changes to network security groups, which could indicate a potential security breach.
        - **Increased visibility**: Tracking changes to network security groups ensures that administrators are aware of modifications that could impact the security posture of the environment.
        - **Compliance alignment**: Many security standards and best practices require monitoring and alerting on changes to critical network configurations.
        - **Operational integrity**: Detecting and responding to unauthorized changes helps maintain the intended security and operational state of the network.

        By ensuring activity log alerts are configured for these events, this check helps to enhance security monitoring, align with compliance requirements, and maintain the overall security posture of Azure environments.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Navigate to the `Monitor` blade.
        2. Select `Alerts`.
        3. In the Alerts window, select `Alert rules`.
        4. Verify that alert rules exist for the following conditions:
          - Operation name equals `Microsoft.Network/networkSecurityGroups/write` for Create/Update events.
          - Operation name equals `Microsoft.Network/networkSecurityGroups/delete` for Delete events.
        5. Select the alert rule name to review its configuration.
          - Ensure the `Condition` panel specifies the correct operation names and does not filter on irrelevant criteria like `Level`, `Status`, or `Caller`.
          - Confirm that the `Actions` panel is set up to notify the appropriate personnel within your organization.

        **Automated Audit with Azure CLI:**

        Run the following commands to list the current alert rules and verify their conditions:

        ```bash
        az monitor activity-log alert list --subscription <subscription ID> --query "[].{Name:name, Enabled:enabled, Condition:condition.allOf, Actions:actions}"
        ```

        Check for the presence of conditions targeting the `Microsoft.Network/networkSecurityGroups/write` and `Microsoft.Network/networkSecurityGroups/delete` operation names in the output.

        **Using PowerShell**

        Utilize the following PowerShell commands to inspect the alert rules:

        ```powershell
        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/write"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf

        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/delete"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf
        ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To create or update activity log alerts in Microsoft Azure Portal:

            1. Log into Microsoft Azure Portal at https://portal.azure.com.
            2. Go to **Monitor**.
            3. Select **Alerts**.
            4. Select **+ Create**.
            5. Under **Resource types**, select **Activity Log**.
            6. Select the subscription name, resource group, or network security group" to apply the rule to.
            7. Verify that the selection preview shows:
                - All network security groups or your selected network security group
                - The subscription, group, or resource you selected
            8. Select the **Apply** button.
            9. Select the **Condition** tab and select **See all signals**.
            10. Select **Create or Update Network Security Group**.
            11. Select the **Actions** tab and either choose an existing action group or create a new one to notify the necessary personnel.
            12. Select the **Details** tab and provide:
                - The resource group where you want the alert rule to reside
                - A name (and optional description) for the alert rule
            13. Select the **Review + create button and verify the summary.
            14. Select the **Create** button.
        - id: cli
          desc: |
            **Using Azure CLI**

            To create an activity log alert for network security group changes:

            ```bash
            az monitor activity-log alert create --name <AlertName> --resource-group <ResourceGroupName> --scopes <ResourceID> --condition "category == 'Administrative' and operationName == 'Microsoft.Network/networkSecurityGroups/write'" --action-group <ActionGroupID>
            ```

            To create an activity log alert for network security group deletions:

            ```bash
            az monitor activity-log alert create --name <AlertName> --resource-group <ResourceGroupName> --scopes <ResourceID> --condition "category == 'Administrative' and operationName == 'Microsoft.Network/networkSecurityGroups/delete'" --action-group <ActionGroupID>
            ```
        - id: powershell
          desc: |
            **Using PowerShell**

            To create an activity log alert for network security group changes:

            ```powershell
            New-AzActivityLogAlert -Name <AlertName> -ResourceGroupName <ResourceGroupName> -Location <Location> -Condition "category == 'Administrative' and operationName == 'Microsoft.Network/networkSecurityGroups/write'" -ActionGroupId <ActionGroupID>
            ```

            To create an activity log alert for network security group deletions:

            ```powershell
            New-AzActivityLogAlert -Name <AlertName> -ResourceGroupName <ResourceGroupName> -Location <Location> -Condition "category == 'Administrative' and operationName == 'Microsoft.Network/networkSecurityGroups/delete'" -ActionGroupId <ActionGroupID>
            ```
        - id: terraform
          desc: |
            **Using Terraform**

            To create an activity log alert for network security group changes:

            ```hcl
            resource "azurerm_monitor_activity_log_alert" "example" {
              name                = "example-alert"
              resource_group_name = azurerm_resource_group.example.name
              location            = azurerm_resource_group.example.location

              scopes = [
                azurerm_network_security_group.example.id,
              ]

              criteria {
                category = "Administrative"
                operation_name = "Microsoft.Network/networkSecurityGroups/write"
              }

              action {
                action_group_id = azurerm_monitor_action_group.example.id
              }
            }
            ```
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts with high severity" is enabled
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High")
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.state == "On")
    docs:
      desc: |
        This check ensures that security alert email notifications are enabled to promptly inform administrators of potential security issues.

        **Why this matters**

        Enabling security alert email notifications provides several critical benefits:

        - **Timely response**: Alerts ensure that administrators are immediately informed of potential security issues, enabling quick action to mitigate risks.
        - **Enhanced visibility**: Notifications provide real-time insights into security events, helping organizations stay aware of their security posture.
        - **Compliance alignment**: Many security standards and best practices recommend enabling alert notifications to ensure proactive monitoring and response.
        - **Operational resilience**: Early detection and response to security issues help prevent potential disruptions and maintain the integrity of the environment.

        By enabling security alert email notifications, this check helps to enhance security monitoring, align with compliance requirements, and improve the overall security posture of the organization.
      audit: |
        **Manual Audit via Azure Portal:**

          1. From Azure Home, select the Portal Menu.
          2. Select `Microsoft Defender for Cloud`.
          3. Select `Environment Settings`.
          4. Select the appropriate Management Group, Subscription, or Workspace.
          5. Select `Email notifications`.
          6. Verify that the `Notify about alerts with the following severity (or higher):` setting is checked and set to `High`.

        **Automated Audit with Azure CLI:**

          Run the following command to check the notification settings for high severity alerts. Make sure the output is set to `true`, indicating that notifications for high severity alerts are enabled.

          ```bash
          az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2020-01-01-preview' | jq '.|.[] | select(.name=="default")'|jq '.properties.alertNotifications'
          ```
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To enable high severity alert notifications in Microsoft Azure Portal:

              1. Log into Microsoft Azure Portal at https://portal.azure.com.
              2. Select `Microsoft Defender for Cloud` from the Portal Menu.
              3. Go to `Environment Settings` and select the appropriate management group, subscription, or workspace.
              4. Navigate to `Email notifications`.
              5. Ensure the `Notify about alerts with the following severity (or higher):` option is enabled and set to `High`.
              6. Select `Save` to apply the changes.
        - id: cli
          desc: |
            **Using Azure CLI**

            Use the following command to update the security contact settings to enable high severity alert notifications. Replace `<Your_Subscription_Id>` and `<validEmailAddress>` with the appropriate values.

              ```bash
              az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/<$0>/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d "@input.json"'
              ```

              Ensure the `input.json` file contains the following data, with `<validEmailAddress>` replaced with your contact email:

              ```json
              {
                "id": "/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1",
                "name": "default1",
                "type": "Microsoft.Security/securityContacts",
                "properties": {
                  "email": "<validEmailAddress>",
                  "alertNotifications": "On",
                  "alertsToAdmins": "On"
                }
              }
              ```
        - id: powershell
          desc: |
            **Using PowerShell**

            To enable high severity alert notifications, use the following PowerShell command. Replace `<Your_Subscription_Id>` and `<validEmailAddress>` with the appropriate values.

              ```powershell
              $securityContact = @{
                id = "/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1"
                name = "default1"
                type = "Microsoft.Security/securityContacts"
                properties = @{
                  email = "<validEmailAddress>"
                  alertNotifications = "On"
                  alertsToAdmins = "On"
                }
              }
              New-AzSecurityContact -SecurityContact $securityContact
              ```
        - id: terraform
          desc: |
            **Using Terraform**

            To enable high severity alert notifications, use the following Terraform configuration. Replace `<Your_Subscription_Id>` and `<validEmailAddress>` with the appropriate values.

            ```hcl
            resource "azurerm_security_contact" "example" {
              name  = "default1"
              email = "<validEmailAddress>"
              alert_notifications = "On"
              alerts_to_admins = "On"
            }
            ```
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
    title: Ensure SSL connection enabled for PostgreSQL database servers
    impact: 80
    filters: |
      asset.platform == "azure-postgresql-flexible-server"
    mql: |
      // TLS/SSL is enforced on the server by default.
      azure.subscription.postgreSql.flexibleServer.configuration.where(name == 'require_secure_transport').all(value.downcase == "on")
    docs:
      desc: |
        This check ensures that SSL/TLS is enforced for all connections to PostgreSQL database servers to safeguard data in transit.

        **Why this matters**

        Enforcing SSL/TLS connections for PostgreSQL database servers provides several critical benefits:

        - **Data protection**: Encrypting data in transit prevents eavesdropping and man-in-the-middle attacks, ensuring the confidentiality and integrity of sensitive information.
        - **Compliance alignment**: Many security standards and best practices mandate the use of secure communication protocols to protect data in transit.
        - **Mitigation of risks**: Disabling unencrypted connections reduces the risk of unauthorized access and data breaches.
        - **Operational integrity**: Ensuring secure connections helps maintain the trustworthiness and reliability of database operations.

        By enforcing SSL/TLS connections, this check helps to minimize security vulnerabilities, align with compliance requirements, and enhance the overall security posture of PostgreSQL database servers.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for PostgreSQL server`.
        3. Select each database server to review its settings.
        4. Under `Connection security`, confirm that `Enforce SSL connection` is set to `ENABLED`. This setting should be consistent across all PostgreSQL database servers to ensure uniform security posture.

        **Automated Audit with Azure CLI:**

        To verify the SSL enforcement setting across all PostgreSQL servers in a resource group, you can use the Azure CLI. The expected output for compliant servers is `Enabled`:

        ```bash
        az postgres server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement}" -o table
        ```

        This command provides a clear, tabulated output indicating which servers have SSL enforced and which do not, enabling quick identification of non-compliant resources.

        **Using PowerShell**

        PowerShell can also be used for a detailed audit. The command should return `Enabled` for each server checked:

        ```powershell
        Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> | Select-Object Name, SslEnforcement
        ```

        This command lists all PostgreSQL servers in the specified resource group along with their SSL enforcement status, providing a comprehensive overview.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To enforce SSL connections:

            1. Access the Azure Portal at https://portal.azure.com.
            2. Navigate to `Azure Database for PostgreSQL server`.
            3. For each server, access `Connection security`.
            4. Locate the `SSL settings` and set `Enforce SSL connection` to `ENABLED`.
            5. Apply the changes to ensure that the setting is enforced across all servers.

            Consistency in enforcement is key. Verify that all PostgreSQL servers within your Azure environment have this setting enabled to maintain a high security standard.
        - id: cli
          desc: |
            **Using Azure CLI**

            For a batch update or to automate the enforcement across multiple servers, use the Azure CLI:

            ```bash
            az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled
            ```

            Automate this process using scripts to iterate over all PostgreSQL servers in a subscription or resource group, ensuring no server is left without SSL enforcement.
        - id: powershell
          desc: |
            **Using PowerShell**

            To enforce SSL connections across all PostgreSQL servers in a resource group, you can use the following PowerShell script:

            ```powershell
            $servers = Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName>
            foreach ($server in $servers) {
                Set-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> -ServerName $server.Name -SslEnforcement Enabled
            }
            ```

            This script iterates over all PostgreSQL servers in the specified resource group and sets SSL enforcement to `Enabled`. Regularly running such scripts can help maintain compliance over time, especially in dynamic environments where new servers are frequently deployed.
        - id: terraform
          desc: |
            **Using Terraform**

            To enforce SSL connections for PostgreSQL servers, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_postgresql_server" "example" {
              name                = "example-postgresql-server"
              resource_group_name = azurerm_resource_group.example.name
              location            = azurerm_resource_group.example.location
              version             = "11"
              ssl_enforcement     = "Enabled"

              storage_mb         = 5120
              sku {
                name     = "B_Gen5_1"
                tier     = "Basic"
                capacity = 1
              }
            }
            ```

            This configuration ensures that SSL connections are enforced for the PostgreSQL server. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
    title: Ensure SSL connection enabled for MySQL Database Server with the latest version
    impact: 80
    filters: |
      asset.platform == "azure-mysql-flexible-server"
    props:
      - uid: latestTlsVersions
        title: The latest supported TLS versions for MySQL flexible servers
        mql: |
          return ["TLSv1.2", "TLSv1.3", "TLSv1.2,TLSv1.3"]
    mql: |
      azure.subscription.mySql.flexibleServer.configuration.where(name == "tls_version").all(value.in(props.latestTlsVersions))
      azure.subscription.mySql.flexibleServer.configuration.where(name == "require_secure_transport").all(value.downcase == "on")
    docs:
      desc: |
        This check ensures that SSL connections are enforced for MySQL database servers to safeguard data in transit and that the latest supported TLS version is used to mitigate vulnerabilities associated with older versions.

        **Why this matters**

        Enforcing SSL connections and using the latest TLS version for MySQL database servers provides several critical benefits:

        - **Data protection**: Encrypting data in transit prevents eavesdropping and man-in-the-middle attacks, ensuring the confidentiality and integrity of sensitive information.
        - **Compliance alignment**: Many security standards and best practices mandate the use of secure communication protocols to protect data in transit.
        - **Mitigation of risks**: Disabling unencrypted connections and using outdated TLS versions increases the risk of unauthorized access and data breaches.
        - **Operational integrity**: Ensuring secure connections and up-to-date TLS versions helps maintain the trustworthiness and reliability of database operations.

        By enforcing SSL connections and adopting the latest TLS version, this check helps to minimize security vulnerabilities, align with compliance requirements, and enhance the overall security posture of MySQL database servers.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for MySQL servers`.
        3. Select each server to inspect its settings.
        4. Under `Connection security`, verify that `Enforce SSL connection` is set to `ENABLED`.
        5. Additionally, ensure that the server is configured to use the latest supported TLS version (e.g., TLS 1.2 or higher).

        **Automated Audit with Azure CLI:**

        Run the following command to inspect the SSL enforcement and the minimum TLS version for each MySQL server:

        ```bash
        az mysql server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement, TLS:minimalTlsVersion}" -o table
        ```

        This command provides a tabulated view showing the SSL enforcement and TLS version for each server, facilitating quick identification of non-compliant or outdated configurations.
      remediation:
      - id: portal
        desc: |
          **Using Azure Portal**

          To enforce SSL connections and ensure the use of the latest TLS version:

          1. Access the Azure Portal at https://portal.azure.com.
          2. Navigate to `Azure Database for MySQL servers`.
          3. For each server, go to `Connection security`.
          4. Set `Enforce SSL connection` to `ENABLED`.
          5. Select the latest supported TLS version from the dropdown menu to ensure maximum security.
          6. Apply these settings to ensure compliance across all MySQL values.

          Regular reviews and updates of these settings are recommended to adapt to new TLS versions as they become available, ensuring that the security configurations remain up-to-date.
      - id: cli
        desc: |
          **Using Azure CLI**

          To enforce SSL connections and set the latest TLS version for MySQL servers, use the following Azure CLI command:

          ```bash
          az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled --minimal-tls-version TLS1_2
          ```

          This command updates the specified MySQL server to enforce SSL connections and sets the minimum TLS version to 1.2. Adjust the `--minimal-tls-version` parameter as needed to specify the latest supported version.
      - id: powershell
        desc: |
          **Using PowerShell**

          To enforce SSL connections and set the latest TLS version for MySQL servers, use the following PowerShell command:

          ```powershell
          $server = Get-AzMySqlServer -ResourceGroupName <resourceGroupName> -Name <serverName>
          $server.SslEnforcement = "Enabled"
          $server.MinimalTlsVersion = "TLS1_2"
          Update-AzMySqlServer -MySqlServer $server
          ```

          This command retrieves the specified MySQL server, updates the SSL enforcement and TLS version settings, and applies the changes.
      - id: terraform
        desc: |
          **Using Terraform**

          To enforce SSL connections and set the latest TLS version for MySQL servers, use the following Terraform configuration:

          ```hcl
          resource "azurerm_mysql_server" "example" {
            name                = "example-mysql-server"
            resource_group_name = azurerm_resource_group.example.name
            location            = azurerm_resource_group.example.location
            version             = "5.7"
            ssl_enforcement     = "Enabled"
            minimal_tls_version = "TLS1_2"

            sku {
              name     = "B_Gen5_1"
              tier     = "Basic"
              capacity = 1
            }
          }
          ```

          This configuration ensures that SSL connections are enforced and sets the minimum TLS version to 1.2 for the MySQL server. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql
    title: Ensure public network access for SQL server is blocked or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.properties.publicNetworkAccess == "Disabled"
        || azure.subscription.sql.server.virtualNetworkRules != empty || azure.subscription.sql.server.firewallRules != empty
    docs:
      desc: |
        This check ensures that public network access for Azure SQL servers is either disabled or limited to specific networks, significantly reducing exposure to potential attacks.

        **Why this matters**

        Limiting public network access to Azure SQL servers provides several critical benefits:

        - **Enhanced security**: Restricting access to private endpoints or specific public IP addresses minimizes the risk of unauthorized access and potential data breaches.
        - **Reduced attack surface**: Disabling public network access ensures that the SQL server is not exposed to the internet, reducing the likelihood of exploitation.
        - **Compliance alignment**: Many security standards and best practices recommend limiting public access to sensitive resources to meet regulatory requirements.
        - **Operational integrity**: Ensuring controlled access helps maintain the intended security and operational state of the database environment.

        By enforcing these restrictions, this check helps to enhance the security posture of Azure SQL servers, align with compliance requirements, and minimize security vulnerabilities.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** under Azure SQL services.
        3. Select each SQL server to review its networking settings.
        4. Under the **Security** section, select **Networking**.
        5. Verify that for **Public network access**, the setting is either **Disabled** or configured to allow **Selected networks** only, ensuring no open access to all networks.

        **Automated Audit with Azure CLI:**

        You can also verify the public network access settings using Azure CLI:

        ```bash
        az sql server list --query "[].{Name:name, PublicNetworkAccess:publicNetworkAccess}" -o table
        ```

        This command lists all SQL servers along with their public network access settings. Ensure that none of the servers are listed as having unrestricted public network access unless specific rules are applied.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To restrict public network access in Microsoft Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **SQL servers** and select the server you wish to configure.
            3. In the server's settings, select **Networking** under the **Security** section.
            4. Locate the **Public network access** setting.
            5. Change the setting to **Disabled** to completely block public access or to **Selected networks** to restrict access to specific IP addresses or ranges.
            6. If selecting **Selected networks**, ensure you configure the necessary firewall rules or virtual network settings to specify which networks can access the server.
        - id: cli
          desc: |
            **Using Azure CLI**

            To disable public network access for all SQL servers in a subscription, you can use the following Azure CLI command for each server:

            ```bash
            az sql server update --name <ServerName> --resource-group <ResourceGroupName> --set publicNetworkAccess='Disabled'
            ```

            Replace `<ServerName>` and `<ResourceGroupName>` with your actual server names and resource group names. For granular control, manually configure network settings in the Azure Portal to specify allowed networks if opting for the "Selected networks" setting.
        - id: powershell
          desc: |
            **Using PowerShell**

            To disable public network access for SQL servers, you can use the following PowerShell command:

            ```powershell
            $server = Get-AzSqlServer -ResourceGroupName <ResourceGroupName> -ServerName <ServerName>
            $server.PublicNetworkAccess = "Disabled"
            Set-AzSqlServer -SqlServer $server
            ```

            This command retrieves the specified SQL server, updates the public network access setting to disabled, and applies the changes. Regularly review and update these settings to ensure compliance with security best practices.
        - id: terraform
          desc: |
            **Using Terraform**

            To disable public network access for SQL servers, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_sql_server" "example" {
              name                         = "example-sql-server"
              resource_group_name          = azurerm_resource_group.example.name
              location                     = azurerm_resource_group.example.location
              version                      = "12.0"
              administrator_login          = "sqladmin"
              administrator_login_password = "P@ssw0rd1234"

              public_network_access = "Disabled"
            }
            ```

            This configuration ensures that public network access is disabled for the specified SQL server. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-keyvault-public-access-disabled
    title: Ensure default public network access for Azure Key Vault is disabled or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    filters: |
      asset.platform == "azure-keyvault-vault"
    mql: |
      azure.subscription.keyVault.vault.properties.all(publicNetworkAccess == "Disabled")
        || azure.subscription.keyVault.vault.properties.networkAcls.ipRules != empty
        || azure.subscription.keyVault.vault.properties.networkAcls.virtualNetworkRules != empty
    docs:
      desc: |
        This check ensures that public network access to Azure Key Vault is either disabled or restricted to selected networks, significantly reducing exposure to potential attacks.

        **Why this matters**

        Restricting public network access to Azure Key Vault provides several critical benefits:

        - **Enhanced security**: Disabling public access or limiting it to specific networks minimizes the risk of unauthorized access and potential data breaches.
        - **Reduced attack surface**: Blocking public network access ensures that the key vault is not exposed to the internet, reducing the likelihood of exploitation.
        - **Compliance alignment**: Many security standards and best practices recommend limiting public access to sensitive resources to meet regulatory requirements.
        - **Operational integrity**: Ensuring controlled access helps maintain the intended security and operational state of the key vault environment.

        By enforcing these restrictions, this check helps to enhance the security posture of Azure Key Vault, align with compliance requirements, and minimize security vulnerabilities.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key vaults** to list all key vaults in your subscriptions.
        3. Select each key vault to review its networking settings.
        4. In the key vault's **Settings**, select **Networking**.
        5. Check the **Firewalls and virtual networks** settings to ensure public access is either disabled or limited:
          - Verify that **Public network access** is set to **Disabled**.
          - If public access is enabled, ensure that access is restricted to selected networks by configuring IP rules or linking to specific virtual networks.

        **Automated Audit with Azure CLI:**

        You can check the public network access settings for all key vaults in a given subscription using the Azure CLI:

        ```bash
        az keyvault list --query "[].{Name:name, PublicNetworkAccess:properties.publicNetworkAccess}" -o table
        ```

        This command outputs the public network access settings for each key vault, allowing you to quickly identify configurations that do not align with best practices.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To restrict public network access in Microsoft Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **Key vaults** and select the key vault you wish to configure.
            3. In the key vault's **Settings**, select **Networking**.
            4. Locate the **Public network access** setting.
            5. Change the setting to **Disabled** to completely block public access or to **Enabled** with specific IP rules or virtual network links to restrict access to selected networks only.
            6. If you need to allow access from specific networks:
              - Set **Public network access** to **Enabled**.
              - Configure **Firewall rules** to define allowed IP address ranges.
              - Link to specific **Virtual networks** to restrict access to designated networks only.
        - id: cli
          desc: |
            **Using Azure CLI**

            To disable public network access for all key vaults in a subscription, you can use the following Azure CLI command for each key vault:

            ```bash
            az keyvault update --name <KeyVaultName> --resource-group <ResourceGroupName> --set properties.publicNetworkAccess='Disabled'
            ```

            Replace `<KeyVaultName>` and `<ResourceGroupName>` with your actual key vault names and resource group names. For granular control, manually configure network settings in the Azure Portal to specify allowed networks if opting for the "Enabled" setting.
        - id: powershell
          desc: |
            **Using PowerShell**

            To disable public network access for key vaults, you can use the following PowerShell command:

            ```powershell
            $keyVault = Get-AzKeyVault -ResourceGroupName <ResourceGroupName> -VaultName <KeyVaultName>
            $keyVault.Properties.PublicNetworkAccess = "Disabled"
            Set-AzKeyVault -KeyVault $keyVault
            ```

            This command retrieves the specified key vault, updates the public network access setting to disabled, and applies the changes. Regularly review and update these settings to ensure compliance with security best practices.
        - id: terraform
          desc: |
            **Using Terraform**

            To disable public network access for key vaults, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_key_vault" "example" {
              name                = "example-keyvault"
              location            = azurerm_resource_group.example.location
              resource_group_name = azurerm_resource_group.example.name
              sku_name            = "standard"

              properties {
                public_network_access = "Disabled"
              }
            }
            ```

            This configuration ensures that public network access is disabled for the specified key vault. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-sql-server-audit-on
    title: Ensure that all activities on SQL server are audited
    impact: 60
    filters: |
      asset.platform == "azure-sql-server"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
    docs:
      desc: |
        This check ensures that auditing is enabled for every database or server in your Azure deployment to monitor and log activities for security and compliance purposes.

        **Why this matters**

        Enabling auditing for Azure SQL databases and servers provides several critical benefits:

        - **Enhanced visibility**: Auditing captures detailed logs of database activities, helping to identify unauthorized access or suspicious behavior.
        - **Compliance alignment**: Many regulatory standards and best practices require auditing to ensure accountability and traceability of database operations.
        - **Operational integrity**: Logs provide valuable insights into database usage patterns, helping to detect misconfigurations or potential misuse.
        - **Risk mitigation**: Auditing helps to identify and address security vulnerabilities, reducing the likelihood of data breaches or unauthorized access.

        By enabling auditing, this check helps to enhance the security posture of Azure SQL databases and servers, align with compliance requirements, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** and select each server to inspect its auditing settings.
        3. Select **Auditing** for each server.
        4. Verify that `Enable Azure SQL Auditing` is switched to `On`. Check that an appropriate storage account, Log Analytics workspace, or Event Hub is selected as the audit log destination.

        **Automated Audit with Azure CLI:**

        To verify the auditing settings for all SQL Servers in a subscription: (replace <resourceGroupName> with your resource group name)

        ```bash
        az sql server list --query "[].{Name:name, ResourceGroupName:<resourceGroupName>}" -o tsv | while read -r name rg; do
          echo "Server: $name"
          az sql server audit-policy show --name $name --resource-group $rg
        done
        ```

        This script iterates over all SQL servers, displaying their audit policy status, ensuring that auditing is enabled and correctly configured.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To enable auditing for SQL servers in Microsoft Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **SQL servers** and select the server you want to configure.
            3. Under **Security**, select **Auditing**.
            4. Set `Enable Azure SQL Auditing` to `On`.
            5. Select a destination for the audit logs: Storage Account, Log Analytics workspace, or Event Hub.
            6. Configure the retention period, ensuring it aligns with your organization's compliance requirements.
            7. Select `Save` to apply the settings.
        - id: cli
          desc: |
            **Using Azure CLI**

            For each SQL server, enable auditing and specify the log retention settings and destination. Here's how you can enable auditing to a Storage Account with a retention period:

            ```bash
            az sql server audit-policy update --name <ServerName> --resource-group <ResourceGroupName> --state Enabled --blob-storage-target-state Enabled --storage-endpoint <StorageAccountBlobEndpoint> --storage-key <StorageAccountKey> --retention-days 90
            ```

            Replace placeholders with your specific details. Similar commands can be executed to set up auditing with Log Analytics or Event Hub as the destination. Ensuring that auditing is enabled and properly configured across all SQL servers in your Azure environment is a key step in maintaining a strong security and compliance posture.
        - id: powershell
          desc: |
            **Using PowerShell**

            To enable auditing for SQL servers, you can use the following PowerShell command:

            ```powershell
            Set-AzSqlServerAudit -ResourceGroupName <ResourceGroupName> -ServerName <ServerName> -State Enabled -StorageAccountName <StorageAccountName> -StorageAccountKey <StorageAccountKey> -RetentionDays 90
            ```

            This command enables auditing for the specified SQL server and configures the storage account and retention period. Regularly review and update these settings to ensure compliance with security best practices.
        - id: terraform
          desc: |
            **Using Terraform**

            To enable auditing for SQL servers, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_sql_server" "example" {
              name                         = "example-sql-server"
              resource_group_name          = azurerm_resource_group.example.name
              location                     = azurerm_resource_group.example.location
              version                      = "12.0"
              administrator_login          = "sqladmin"
              administrator_login_password = "P@ssw0rd1234"

              blob_storage_target_state = "Enabled"
              storage_account_name      = azurerm_storage_account.example.name
              retention_days            = 90
            }
            ```

            This configuration ensures that auditing is enabled for the specified SQL server and configures the storage account and retention period. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-sql-server-tde-on
    title: Ensure that transparent data encryption is enabled for SQL Server databases
    impact: 60
    filters: |
      asset.platform == "azure-sql-server"
      azure.subscription.sql.server.databases.any(name != "master")
    mql: |
      azure.subscription.sql.server.databases.where(name != "master").all(transparentDataEncryption.state == "Enabled")
    docs:
      desc: |
        This check ensures that Transparent Data Encryption (TDE) is enabled for SQL Server databases to encrypt data at rest and protect sensitive information.

        **Why this matters**

        Enabling TDE provides several critical benefits:

        - **Data protection**: TDE encrypts data and log files in real-time, ensuring that sensitive information is protected from unauthorized access.
        - **Compliance alignment**: Many laws, regulations, and industry guidelines require encryption of data at rest to meet security and privacy standards.
        - **Operational integrity**: TDE ensures that encryption and decryption occur seamlessly without requiring changes to existing applications, maintaining operational efficiency.
        - **Risk mitigation**: Encrypting data at rest reduces the risk of data breaches and unauthorized access to sensitive information.

        By enabling TDE, this check helps to enhance the security posture of SQL Server databases, align with compliance requirements, and protect critical data from potential threats.
      audit: |
        **Manual Audit via Azure Portal:**

        1. In the Azure Portal, navigate to **SQL databases** under your SQL Server instances.
        2. Select each database to inspect its settings.
        3. Select **Transparent data encryption** under the **Security** settings.
        4. Verify that `Data encryption` is set to `On` for each database (except the master database, which cannot be encrypted with TDE).

        **Automated Audit with Azure CLI:**

        To check the TDE status for all databases in a specific SQL server:

        ```bash
        az sql db list --resource-group <ResourceGroupName> --server <ServerName> --query "[].{Name:name, TDE:transparentDataEncryption}" -o table
        ```

        Use the following command to check the TDE status of a specific database:

        ```bash
        az sql db tde show --name <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName>
        ```

        Ensure the TDE status is `Enabled` for each database.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To enable TDE for SQL databases in Microsoft Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **SQL databases** under your SQL Server instances.
            3. Select each database to configure TDE.
            4. Under the **Security** section, select **Transparent data encryption**.
            5. Set `Data encryption` to `On`.
            6. Save the changes to apply TDE to the selected database.
        - id: cli
          desc: |
            **Using Azure CLI**

            To enable TDE for a specific database, use the following command:

            ```bash
            az sql db tde set --database <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName> --status Enabled
            ```

            Replace `<DatabaseName>`, `<ResourceGroupName>`, and `<ServerName>` with your actual database, resource group, and server names. This command enables TDE for the specified database.
        - id: powershell
          desc: |
            **Using PowerShell**

            To enable TDE for SQL databases, use the following PowerShell command:

            ```powershell
            Set-AzSqlDatabaseTransparentDataEncryption -DatabaseName <DatabaseName> -ServerName <ServerName> -ResourceGroupName <ResourceGroupName> -State 'Enabled'
            ```

            Replace `<DatabaseName>`, `<ServerName>`, and `<ResourceGroupName>` with your actual database, server, and resource group names. This command enables TDE for the specified database.
        - id: terraform
          desc: |
            **Using Terraform**

            To enable TDE for SQL databases, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_sql_database" "example" {
              name                = "example-sql-database"
              resource_group_name = azurerm_resource_group.example.name
              server_name         = azurerm_sql_server.example.name
              requested_service_objective_name = "S0"

              transparent_data_encryption {
                state = "Enabled"
              }
            }
            ```

            This configuration ensures that TDE is enabled for the specified SQL database. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-diagnostic-settings-exist
    title: Ensure that diagnostic settings exist for the subscription
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
    docs:
      desc: |
        This check ensures that diagnostic settings are configured for Azure resources to collect essential logs and metrics, enabling effective monitoring and security analysis.

        **Why this matters**

        Configuring diagnostic settings provides several critical benefits:

        - **Enhanced visibility**: Diagnostic settings capture detailed logs and metrics, offering insights into resource activities and potential security issues.
        - **Compliance alignment**: Many regulatory standards and best practices require the collection and retention of logs for auditing and compliance purposes.
        - **Operational integrity**: Logs and metrics help identify misconfigurations, performance issues, and potential misuse of resources.
        - **Risk mitigation**: Retaining logs for extended periods allows for thorough analysis of activities, helping to detect and address security-related issues.

        By ensuring diagnostic settings are configured, this check helps to enhance the security posture of Azure resources, align with compliance requirements, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Go to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Monitor** and then **Activity log**.
        3. Select **Diagnostic settings** and review the settings for your subscription.
        4. Ensure that there are diagnostic settings configured and that they cover the essential log categories: Administrative, Security, Alert, and Policy.

        **Automated Audit with Azure CLI:**

        To check the diagnostic settings for the subscription:

        ```bash
        az monitor diagnostic-settings list --resource /subscriptions/{subscriptionId}
        ```

        Verify that the output includes diagnostic settings with the necessary categories enabled.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To configure diagnostic settings in the Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **Monitor** and then **Activity log**.
            3. Select **Diagnostic settings** and click on **Add diagnostic setting**.
            4. Provide a name for the diagnostic setting.
            5. Select the necessary log categories: Administrative, Security, Alert, and Policy.
            6. Choose the destination for the logs, such as an Azure Storage account, a Log Analytics workspace, or an Event Hub.
            7. Save the configuration to ensure continuous monitoring.
        - id: cli
          desc: |
            **Using Azure CLI**

            To create or update diagnostic settings for a subscription, use the following command:

            ```bash
            az monitor diagnostic-settings create --name <NameOfSetting> --resource /subscriptions/{subscriptionId} --logs '[{"category": "Administrative", "enabled": true}, {"category": "Security", "enabled": true}, {"category": "Alert", "enabled": true}, {"category": "Policy", "enabled": true}]' --storage-account <StorageAccountId> --workspace <LogAnalyticsWorkspaceId> --event-hub <EventHubName>
            ```

            Replace the placeholders with your specific resource IDs and desired diagnostic setting name.
        - id: powershell
          desc: |
            **Using PowerShell**

            To configure diagnostic settings with PowerShell, use the following command:

            ```powershell
            $subsId = "<SubscriptionId>"
            $settingName = "<DiagnosticSettingName>"
            $storageAccountId = "<StorageAccountId>"
            $workspaceId = "<LogAnalyticsWorkspaceId>"
            $eventHubAuthRuleId = "<EventHubAuthorizationRuleId>"

            Set-AzDiagnosticSetting -ResourceId "/subscriptions/$subsId" -StorageAccountId $storageAccountId -WorkspaceId $workspaceId -Enabled $true -Name $settingName -Category @("Administrative", "Security", "Alert", "Policy")
            ```

            Modify the script to match your specific resource IDs and configuration preferences. It's crucial to routinely review and update these settings to adapt to any changes in your Azure environment or organizational requirements.
        - id: terraform
          desc: |
            **Using Terraform**

            To configure diagnostic settings for a subscription, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_monitor_diagnostic_setting" "example" {
              name               = "example-diagnostic-setting"
              target_resource_id = azurerm_sql_server.example.id

              log {
                category = "Administrative"
                enabled  = true
              }

              log {
                category = "Security"
                enabled  = true
              }

              log {
                category = "Alert"
                enabled  = true
              }

              log {
                category = "Policy"
                enabled  = true
              }

              storage_account_id = azurerm_storage_account.example.id
            }
            ```

            This configuration ensures that the specified log categories are collected for the Azure resource. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-diagnostic-settings-essential-categories
    title: Ensure that diagnostic settings collect essential security categories
    impact: 80
    filters: |
      asset.platform == "azure"
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
    docs:
      desc: |
        This check ensures that diagnostic settings collect essential security categories such as Administrative, Security, Alert, and Policy logs to provide comprehensive monitoring and security insights.

        **Why this matters**

        Capturing essential log categories in diagnostic settings provides several critical benefits:

        - **Enhanced visibility**: Logs offer detailed insights into resource activities, helping to identify unauthorized access or suspicious behavior.
        - **Compliance alignment**: Many regulatory standards and best practices require the collection of specific log categories to meet auditing and compliance requirements.
        - **Operational integrity**: Logs help detect misconfigurations, performance issues, and potential misuse of resources.
        - **Risk mitigation**: Retaining logs for extended periods allows for thorough analysis of activities, helping to detect and address security-related issues.

        By ensuring these log categories are collected, this check helps to enhance the security posture of Azure resources, align with compliance requirements, and maintain operational resilience.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Access **Azure Monitor** within the Azure Portal.
        2. Navigate to **Activity log** and proceed to **Diagnostic settings**.
        3. Review the settings for each subscription ensuring the collection of Administrative, Security, Alert, and Policy logs.
        4. Confirm that these categories are enabled and correctly configured to export to an appropriate destination.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to list and verify the diagnostic settings across subscriptions:

        ```bash
        az monitor diagnostic-settings list --resource /subscriptions/{subscriptionId}
        ```

        Review the settings to confirm that the essential categories are enabled.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To configure diagnostic settings for essential categories in the Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **Monitor** and then **Activity log**.
            3. Select **Diagnostic settings** and either add a new setting or edit an existing one.
            4. Provide a name for the diagnostic setting and ensure the inclusion of Administrative, Security, Alert, and Policy logs.
            5. Choose the destination for these logs, such as an Azure Storage account, Log Analytics workspace, or Event Hub.
            6. Save the configuration to ensure continuous monitoring.
        - id: cli
          desc: |
            **Using Azure CLI**

            To create or update diagnostic settings for capturing essential log categories, use:

            ```bash
            az monitor diagnostic-settings create --name <NameOfSetting> --resource /subscriptions/{subscriptionId} --logs '[{"category": "Administrative", "enabled": true}, {"category": "Security", "enabled": true}, {"category": "Alert", "enabled": true}, {"category": "Policy", "enabled": true}]' --storage-account <StorageAccountId> --workspace <LogAnalyticsWorkspaceId> --event-hub <EventHubName>
            ```

            Replace the placeholders with your specific resource IDs and desired diagnostic setting name.
        - id: powershell
          desc: |
            **Using PowerShell**

            To configure diagnostic settings with PowerShell, use the following command:

            ```powershell
            $subsId = "<SubscriptionId>"
            $settingName = "<DiagnosticSettingName>"
            $storageAccountId = "<StorageAccountId>"
            $workspaceId = "<LogAnalyticsWorkspaceId>"
            $eventHubAuthRuleId = "<EventHubAuthorizationRuleId>"

            Set-AzDiagnosticSetting -ResourceId "/subscriptions/$subsId" -StorageAccountId $storageAccountId -WorkspaceId $workspaceId -Enabled $true -Name $settingName -Category @("Administrative", "Security", "Alert", "Policy")
            ```

            Modify the script to match your specific resource IDs and configuration preferences. It's crucial to routinely review and update these settings to adapt to any changes in your Azure environment or organizational requirements.
        - id: terraform
          desc: |
            **Using Terraform**

            To configure diagnostic settings for essential categories, you can use the following Terraform configuration:

            ```hcl
            resource "azurerm_monitor_diagnostic_setting" "example" {
              name               = "example-diagnostic-setting"
              target_resource_id = azurerm_sql_server.example.id

              log {
                category = "Administrative"
                enabled  = true
              }

              log {
                category = "Security"
                enabled  = true
              }

              log {
                category = "Alert"
                enabled  = true
              }

              log {
                category = "Policy"
                enabled  = true
              }

              storage_account_id = azurerm_storage_account.example.id
            }
            ```

            This configuration ensures that the specified log categories are collected for the Azure resource. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
  - uid: mondoo-azure-security-disable-udp-virtualmachines
    title: Ensure direct UDP access to Resources from the internet is restricted
    impact: 80
    props:
      - uid: mondooAzureSecurityDisallowedPortsUDP
        title: A list of disallowed UDP ports, by default covering common UDP services. Add more as needed.
        mql: |
          return [
            53,    // DNS
            123,   // NTP
            161,   // SNMP
            389,   // CLDAP
            1900   // SSDP
          ]
    filters: |
      asset.platform == "azure-network-security-group"
    mql: |
      allNsgUDP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgUDP.all(properties.destinationPortRange != "*")
      props.mondooAzureSecurityDisallowedPortsUDP {
        disallowedPortUDP = _
        disallowedPortUDP
        allNsgUDP.none(destinationPortRange.any(fromPort <= disallowedPortUDP && toPort >= disallowedPortUDP))
      }
    docs:
      desc: |
        This check ensures that direct UDP access to resources from the internet is restricted to minimize security risks and prevent potential exploitation.

        **Why this matters**

        Exposing UDP services to the internet can lead to significant security risks:

        - **Reflection amplification attacks**: UDP's connectionless nature allows attackers to spoof a target's IP address and send information requests using UDP. This can result in amplified traffic directed at the victim, often leading to denial-of-service (DoS) attacks.
        - **Lack of authentication**: UDP does not verify source IP addresses, making it easier for attackers to manipulate IP datagrams and exploit open UDP ports.
        - **Increased attack surface**: Open UDP ports, especially those using well-known protocols like DNS, NTP, CLDAP, SSDP, or SNMPv2, can be exploited as amplifiers in attacks.
        - **Operational risks**: Misconfigured or exposed UDP services can lead to unintended access, service disruptions, or data breaches.

        By restricting unnecessary UDP traffic from the internet and employing best practices for network security, this check helps to minimize security vulnerabilities, align with compliance requirements, and enhance the overall security posture of Azure resources.

        **Examples of vulnerable UDP-based protocols**

        Some application-layer protocols that rely on UDP and are commonly targeted include:

        - Domain Name System (DNS)
        - Network Time Protocol (NTP)
        - Connection-less Lightweight Directory Access Protocol (CLDAP)
        - Simple Service Discovery Protocol (SSDP)
        - Simple Network Management Protocol version 2 (SNMPv2)
        - Portmap/Remote Procedure Call (RPC)
        - Network Basic Input/Output System (NetBIOS)
        - Trivial File Transfer Protocol (TFTP)

        Employing Network Security Groups (NSGs) to deny or control inbound UDP traffic, especially on ports known to be vulnerable or unnecessary for internet exposure, is a key defensive measure. For services that require UDP access, ensure they are secured, monitored, and only exposed when absolutely necessary, using the principle of least privilege to minimize potential attack vectors.
      audit: |
        **Manual Audit via Azure Portal:**

        1. Access the Azure Portal and review the networking settings for each resource, focusing on those with public internet exposure.
        2. Inspect inbound port rules for associated Network Security Groups (NSGs) and any other relevant firewall settings.
        3. Confirm that none of the critical UDP ports are allowed from the internet, particularly for resources that do not require such access.

        **Automated Audit with Azure CLI:**

        Use the Azure CLI to review NSG rules across your Azure environment:

        ```bash
        az network nsg rule list --query "[].{NSG:networkSecurityGroup, Protocol:protocol, Access:access, Direction:direction, SourceAddressPrefix:sourceAddressPrefix, DestinationPortRange:destinationPortRange}" -o table
        ```

        Ensure no rule improperly exposes the specified UDP ports to the internet.
      remediation:
        - id: portal
          desc: |
            **Using Azure Portal**

            To restrict UDP traffic in Microsoft Azure Portal:

            1. Log into the Azure Portal at https://portal.azure.com.
            2. Navigate to **Network Security Groups** and select the NSG associated with your resources.
            3. Review the inbound security rules and identify any that allow traffic on the disallowed UDP ports from the internet.
            4. Modify or remove these rules as necessary to restrict access.
            5. For services requiring UDP access, consider using secure alternatives or private connections (e.g., VPNs, ExpressRoute).
        - id: cli
          desc: |
            **Using Azure CLI**

            To restrict UDP traffic using the Azure CLI, you can delete or update the NSG rules that allow disallowed UDP ports:

            ```bash
            az network nsg rule list --resource-group <ResourceGroupName> --nsg-name <NSGName> --query "[].{Name:name, Protocol:protocol, Access:access, Direction:direction, SourceAddressPrefix:sourceAddressPrefix, DestinationPortRange:destinationPortRange}" -o table
            ```

            Review the output and identify any rules allowing disallowed UDP ports. Then, either delete or update those rules as needed.
        - id: powershell
          desc: |
            **Using PowerShell**

            To restrict UDP traffic using PowerShell, you can use the following command to list NSG rules:

            ```powershell
            Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup <NSGName> | Where-Object { $_.Access -eq "Allow" -and $_.Direction -eq "Inbound" -and $_.Protocol -match "UDP|*" }
            ```

            Review the output and identify any rules allowing disallowed UDP ports. Then, either delete or update those rules as needed.
        - id: terraform
          desc: |
            **Using Terraform**

            To restrict UDP traffic using Terraform, you can modify the NSG rules in your configuration:

            ```hcl
            resource "azurerm_network_security_rule" "example" {
              name                        = "example-nsg-rule"
              network_security_group_name = azurerm_network_security_group.example.name
              priority                    = 100
              direction                   = "Inbound"
              access                      = "Deny"
              protocol                    = "Udp"
              source_address_prefix      = "*"
              destination_port_range     = "<DisallowedPort>"
            }
            ```

            Replace `<DisallowedPort>` with the specific port you want to restrict. Regularly review and update your Terraform configurations to ensure compliance with security best practices.
