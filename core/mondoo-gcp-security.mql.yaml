# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-gcp-security
    name: Mondoo Google Cloud (GCP) Security
    version: 1.1.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: gcp,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        The Mondoo Google Cloud (GCP) Security policy is designed to identify critical misconfigurations that could leave your Google Cloud infrastructure vulnerable to attackers. This policy helps organizations detect and remediate security risks before they can be exploited, reducing the likelihood of unauthorized access, data breaches, privilege escalation, and operational disruptions.

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable. This policy is open-source and we welcome contributions from the community, whether it's adding new checks, refining existing ones, or providing feedback. If you have suggestions to improve this policy, visit our [cnspec-policies repository](https://github.com/mondoohq/cnspec-policies).
    groups:
      - title: GCP Project
        filters: |
          asset.runtime == "gcp"
        checks:
          - uid: mondoo-gcp-security-block-project-wide-ssh-keys-enabled-vm-instances
          - uid: mondoo-gcp-security-cloud-storage-bucket-not-anonymously-publicly-accessible
          - uid: mondoo-gcp-security-cloud-storage-buckets-have-uniform-bucket-level-access-enabled
          - uid: mondoo-gcp-security-instances-are-not-configured-use-default-service-account
          - uid: mondoo-gcp-security-instances-not-configured-with-default-service-account-full-access-cloud-api
          - uid: mondoo-gcp-security-oslogin-enabled-project
    scoring_system: highest impact
queries:
  - uid: mondoo-gcp-security-instances-are-not-configured-use-default-service-account
    title: Ensure that instances are not configured to use the default service account
    impact: 95
    variants:
      - uid: gcp-compute-instances-configured-use-default-service-account-all
      - uid: gcp-compute-instances-configured-use-default-service-account-single
    docs:
      desc: |
        This check ensures that Google Cloud Compute Engine instances are not configured to use the default service account (-compute@developer.gserviceaccount.com). Instead, instances should use custom service accounts with only the permissions required for their specific function, adhering to the principle of least privilege.

        Rationale:

        When the Compute Engine API is enabled on a new Google Cloud project, Google automatically creates a default Compute Engine service account with the IAM Editor role. This account has broad permissions across many Google Cloud services and is frequently used by default unless explicitly overridden:
          •	Using the default service account grants more privileges than most applications require, increasing the risk of privilege escalation or lateral movement in the event of compromise.
          •	The default service account is shared across all instances in the project, reducing visibility and control over which workloads can access which resources.
          •	Misuse or over-permissioning of default service accounts has been the cause of multiple cloud security incidents, particularly when combined with metadata API access.

        If instances continue to use the default service account, it can lead to:
          •	Excessive permissions, violating least privilege principles and security best practices.
          •	Difficult-to-audit access patterns, as many services share a single identity with broad permissions.
          •	Increased blast radius if the service account credentials are leaked or the instance is compromised.
          •	Non-compliance with security benchmarks such as CIS Google Cloud Platform Foundations Benchmark and NIST 800-53.

        Risk mitigation:
          •	Replace default service accounts with custom service accounts that have narrowly scoped IAM roles tailored to the workload.
          •	Regularly review and audit service account usage to ensure they are aligned with current access needs.
          •	Disable or delete the default service account only after ensuring that no dependent applications or services will be disrupted.
          •	Leverage IAM Conditions and organization policies to prevent the use of default service accounts in new deployments.

        By avoiding the use of the default Compute Engine service account, organizations can enforce better identity isolation, minimize unnecessary permissions, and enhance the overall security posture of their Google Cloud environment.
      remediation: |
        ### Terraform

        To provision or update a compute instance with a custom service account:

        ```hcl
        resource "google_compute_instance" "default" {
          name         = "secure-instance"
          machine_type = var.machine_type
          zone         = var.zone
          tags = ["terraform"]

          service_account {
            email  = "example@example.com"
            scopes = ["user-email", "compute-ro", "storage-ro"]
          }
        }
        ```

        ### Google Cloud Console

        To change the policy using the GCP Console, follow these steps:

        1. Log in to the GCP Console at https://console.cloud.google.com.
        2. Select the Organization and Project where the instance you want to update is running.
        3. Navigate to **Compute Engine**.
        4. Select the compute instance that you want to update.
        5. If the instance is not stopped, select **Stop**. Wait for the instance to stop.
        6. Select **Edit**.
        7. Scroll down to the Service Account section.
        8. Select a different service account.
        9. Select **Save**.
        10. Select **START**.

        ### gcloud cli

        To update the service account using the `gcloud` cli:

        1. Stop the instance:

          ```bash
          gcloud compute instances stop INSTANCE_NAME
          ```

        2. Update the instance:

          ```bash
          gcloud compute instances set-service-account INSTANCE_NAME --serviceaccount=SERVICE_ACCOUNT --scopes [SCOPE1, SCOPE2...]
          ```

        3. Restart the instance:

          ```bash
          gcloud compute instances start INSTANCE_NAME
          ```
  - uid: gcp-compute-instances-configured-use-default-service-account-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.compute.instances.where(name != /^gke-/).all(
        serviceAccounts.none(
          email == /^.*compute@developer\.gserviceaccount\.com$/
        )
      )
  - uid: gcp-compute-instances-configured-use-default-service-account-single
    filters: |
      asset.platform == "gcp-compute-instance"
      gcp.compute.instance.name != /^gke-/
    mql: |
        gcp.compute.instance.serviceAccounts.none(
          email == /^.*compute@developer\.gserviceaccount\.com$/
        )
  - uid: mondoo-gcp-security-instances-not-configured-with-default-service-account-full-access-cloud-api
    title: Ensure instances are not configured to use the default service account with full access to all Cloud APIs
    impact: 90
    variants:
      - uid: gcp-compute-instances-configured-use-default-service-account-full-access-all-cloud-all
      - uid: gcp-compute-instances-configured-use-default-service-account-full-access-all-cloud-single
    docs:
      desc: |
        This check ensures that Google Cloud Compute Engine instances are not provisioned with full access to all Google Cloud APIs. Instead, instances should be assigned custom service accounts with narrowly scoped permissions, adhering to the principle of least privilege.

        Rationale:

        By default, when creating a Compute Engine instance, users can assign it “Allow full access to all Cloud APIs”, granting unrestricted access to most Google Cloud services. This setting is overly permissive and introduces significant security risk:
          •	It allows the instance to interact with nearly any Google Cloud API, regardless of the workload's actual needs.
          •	In the event of a compromise, an attacker could use the instance's credentials to access sensitive resources, manipulate cloud infrastructure, or move laterally across services.
          •	The broad access complicates auditing and access management, making it harder to identify excessive privileges or detect misuse.

        If instances are provisioned with full API access, it can lead to:
          •	Privilege escalation and lateral movement, especially if metadata APIs are accessible from within the VM.
          •	Increased blast radius in the event of credential theft or VM compromise.
          •	Violations of least privilege and non-compliance with security frameworks such as CIS GCP Foundations Benchmark, NIST 800-53, and ISO 27001.
          •	Obscured audit trails, since full access allows interactions with multiple services without role-based segmentation.

        Risk mitigation:
          •	Assign custom service accounts to instances with only the specific roles required for their function.
          •	Avoid using the “Allow full access to all Cloud APIs” option during instance creation.
          •	Enforce IAM policies and organizational constraints to block the use of overly permissive API scopes.
          •	Continuously review service account permissions and API scopes as part of your identity and access governance strategy.

        Restricting Compute Engine instances to minimal necessary API access helps contain the impact of security incidents, improves visibility and control, and supports a robust and compliant cloud security posture.
      remediation: |
        ### Terraform

        To provision or update a compute instance with Terraform:

        ```hcl
        resource "google_compute_instance" "default" {
          name         = "secure-instance"
          machine_type = var.machine_type
          zone         = var.zone
          tags = ["terraform"]

          service_account {
            # Google recommends custom service accounts with cloud-platform scope and permissions granted via IAM Roles.
            email  = google_service_account.default.email
            scopes = ["cloud-platform"]
          }
        }
        ```

        ### Google Cloud Console

        To change the policy using the Google Cloud Console:

        1. Log in to the GCP Console at https://console.cloud.google.com.
        2. Select the Organization and Project where the instance you want to update is running.
        3. Navigate to **Compute Engine**.
        4. Select the compute instance that you want to update.
        5. If the instance is not stopped, select **Stop**. Wait for the instance to stop.
        6. Select **Edit**.
        7. Scroll down to the Service Account section.
        8. Select a different service account or ensure Allow full access to all Cloud APIs is not selected.
        9. Select **Save**.
        10. Select **START**.

        ### gcloud cli

        To update the service account using the `gcloud` cli:

        1. Stop the instance:

          ```bash
          gcloud compute instances stop INSTANCE_NAME
          ```

        2. Update the instance:

          ```bash
          gcloud compute instances set-service-account INSTANCE_NAME --serviceaccount=SERVICE_ACCOUNT --scopes [SCOPE1, SCOPE2...]
          ```

        3. Restart the instance:

          ```bash
          gcloud compute instances start INSTANCE_NAME
          ```
  - uid: gcp-compute-instances-configured-use-default-service-account-full-access-all-cloud-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.compute.instances.where(name != /^gke-/).all(
        serviceAccounts.none(
          scopes == "https://www.googleapis.com/auth/cloud-platform"
        )
      )
  - uid: gcp-compute-instances-configured-use-default-service-account-full-access-all-cloud-single
    filters: |
      asset.platform == "gcp-compute-instance"
      gcp.compute.instance.name != /^gke-/
    mql: |
      gcp.compute.instance.serviceAccounts.none(
        scopes == "https://www.googleapis.com/auth/cloud-platform"
      )
  - uid: mondoo-gcp-security-block-project-wide-ssh-keys-enabled-vm-instances
    title: Ensure "Block Project-wide SSH keys" is enabled for VM instances
    impact: 70
    variants:
      - uid: gcp-compute-block-project-wide-ssh-keys-enabled-vm-instances-all
      - uid: gcp-compute-block-project-wide-ssh-keys-enabled-vm-instances-single
    docs:
      desc: |
        This check ensures that Google Cloud Platform (GCP) projects are configured to use instance-specific SSH keys rather than project-wide SSH keys. This approach limits the impact of credential compromise and supports strong access control at the individual virtual machine level.

        Rationale:

        GCP allows SSH keys to be defined at the project level, enabling access to all Compute Engine instances within the project. While this simplifies SSH key management, it introduces significant security risks:
          •	If a project-wide SSH key is compromised, an attacker may gain access to every VM in the project.
          •	Project-wide keys promote shared access, making it harder to enforce least privilege and track user-specific activity.
          •	Revoking access for a user with a project-wide key affects all instances, which can lead to operational disruption or security gaps.

        In contrast, instance-specific SSH keys offer finer-grained access control:
          •	Keys are scoped only to the VM they are intended for.
          •	It is easier to manage user access on a per-instance basis.
          •	Auditability is improved, as access can be tracked and revoked at the individual instance level.

        If project-wide SSH keys are used, it may result in:
          •	Expanded attack surface, where one key exposes multiple critical systems.
          •	Difficulty in access governance, particularly in large or multi-team environments.
          •	Non-compliance with cloud security benchmarks like the CIS GCP Foundations Benchmark and access control requirements in frameworks such as NIST 800-53 and ISO 27001.

        Risk mitigation:
          •	Disable project-wide SSH key usage by setting the enable-oslogin metadata to TRUE at the project level.
          •	Configure instance-level SSH keys via instance metadata or use OS Login for centralized and auditable access management.
          •	Regularly audit and rotate SSH keys, ensuring access is granted only where needed.
          •	Enforce organizational policies to prohibit the use of project-wide SSH keys across GCP environments.

        Using instance-specific SSH keys improves access control, reduces the blast radius of credential compromise, and aligns with cloud security best practices that emphasize isolation, auditability, and least privilege.
      remediation: |
        ### Terraform

        To provision or update a compute instance with Terraform:

        ```hcl
        resource "google_compute_instance" "default" {
          name         = "secure-instance"
          machine_type = var.machine_type
          zone         = var.zone
          tags = ["terraform"]

          metadata = {
            block-project-ssh-keys = true
          }
        }
        ```

        ### Google Cloud Console

        To change the policy using the GCP Console:

        1. Log in to the GCP Console at https://console.cloud.google.com.
        2. Select the organization/project where the instance(s) you want to update are running.
        3. Navigate to **Compute Engine**.
        4. Select the instance you want to update.
        5. Select **EDIT** in the toolbar.
        6. Under the **Security and access** section, select the **Block project-wide SSH keys** option.
        7. Select **SAVE**.

        Repeat these steps for each impacted Instance.

        ### gcloud cli

        To update an instance using the `gcloud` cli:

        1. Update the instance:

          ```bash
          gcloud compute instances add-metadata INSTANCE_NAME --metadata block-projectssh-keys=TRUE
          ```
  - uid: gcp-compute-block-project-wide-ssh-keys-enabled-vm-instances-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.compute.instances.all(
        metadata['block-project-ssh-keys'] == true
      )
  - uid: gcp-compute-block-project-wide-ssh-keys-enabled-vm-instances-single
    filters: asset.platform == "gcp-compute-instance"
    mql: |
      gcp.compute.instance.metadata['block-project-ssh-keys'] == true
  - uid: mondoo-gcp-security-oslogin-enabled-project
    title: Ensure oslogin is enabled for compute instances
    impact: 70
    variants:
      - uid: gcp-compute-oslogin-enabled-project-all
      - uid: gcp-compute-oslogin-enabled-project-single
    docs:
      desc: |
        This check ensures that OS Login is enabled on Google Cloud Platform (GCP) Compute Engine instances to manage SSH access through IAM roles rather than relying on SSH keys stored in project or instance metadata. OS Login improves access control, auditability, and security by centralizing identity-based SSH authentication.

        Rationale:

        By default, SSH access to GCP Compute Engine instances is managed using manually added SSH keys in project or instance metadata. This method has several limitations:
          •	SSH keys are difficult to track, audit, and revoke, especially in large or dynamic environments.
          •	Key-based access lacks integration with IAM policies, which makes it harder to enforce centralized identity governance.
          •	Users can retain access indefinitely if SSH keys are not manually removed, creating lingering access risks.

        OS Login solves these issues by integrating SSH access with IAM:
          •	Access is granted or revoked based on IAM roles (roles/compute.osLogin, roles/compute.osAdminLogin).
          •	User access is managed centrally and consistently across all instances.
          •	Login activity is auditable through Cloud Audit Logs and linked to the user's Google identity.

        If OS Login is not enabled, it can lead to:
          •	Stale or orphaned SSH keys, increasing the risk of unauthorized access.
          •	Limited visibility and control over who has access to which instances.
          •	Non-compliance with security best practices and frameworks like CIS GCP Foundations Benchmark, NIST 800-53, and ISO 27001.
          •	Operational complexity, as access changes require manual updates to metadata.

        Risk mitigation:
          •	Enable OS Login by setting the enable-oslogin metadata key to TRUE at the project or instance level.
          •	Use IAM roles to define which users can access which instances, and whether they have standard or administrative privileges.
          •	Leverage OS Login with 2-Step Verification (OS Login 2SV) for enhanced access protection.
          •	Regularly review IAM policies and login activity to ensure appropriate access and detect anomalies.

        Enabling OS Login provides a secure, scalable, and manageable way to control SSH access to Compute Engine instances, aligning with best practices for identity-based access control and centralized policy enforcement in GCP environments.
      remediation: |
        ### Terraform

        To configure OS Login for a project:

        ```hcl
        resource "google_compute_project_metadata" "default" {
          metadata = {
            enable-oslogin = "TRUE"
          }
        }
        ```

        To provision or update a compute instance with Terraform:

        ```hcl
        resource "google_compute_instance" "default" {
          name         = "secure-instance"
          machine_type = var.machine_type
          zone         = var.zone
          tags = ["terraform"]

          metadata = {
            enable-oslogin = true
          }
        }
        ```

        ### Google Cloud Console

        To configure OS Login for a project via Google Cloud Console:

        1. In the Google Cloud console, go to the **Metadata** page.
        2. Select **EDIT**.
        3. Add a metadata entry, setting the key to `enable-oslogin` and the value to `TRUE`.
        4. Select **SAVE** to apply the changes.

        To configure OS Login for an existing instance:

        1. In the Google Cloud console, go to the **Compute Engine**.
        2. Select the name of the instance that you want to enable OS Login on.
        3. On the instance details page, select **EDIT**.
        4. Under **Custom metadata**, add a metadata entry, setting the key to `enable-oslogin` and the value to `TRUE`.
        5. Select **SAVE**.

        ### gcloud cli

        To update OS Login for a project using the `gcloud` cli:

          ```bash
          gcloud compute project-info add-metadata --metadata enable-oslogin=TRUE
          ```

        To update OS Login for an existing instance using the `gcloud` cli:

          ```bash
          gcloud compute instances add-metadata INSTANCE_NAME --metadata enable-oslogin=TRUE
          ```
  - uid: gcp-compute-oslogin-enabled-project-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.compute.instances.all(
        metadata['enable-oslogin'] == true
      )
  - uid: gcp-compute-oslogin-enabled-project-single
    filters: asset.platform == "gcp-compute-instance"
    mql:
      gcp.compute.instance.metadata['enable-oslogin'] == true
  - uid: mondoo-gcp-security-cloud-storage-bucket-not-anonymously-publicly-accessible
    title: Ensure that Cloud Storage buckets are not anonymously or publicly accessible
    impact: 90
    variants:
      - uid: gcp-storage-cloud-storage-bucket-anonymously-publicly-accessible-all
      - uid: gcp-storage-cloud-storage-bucket-anonymously-publicly-accessible-single
    docs:
      desc: |
        This check ensures that Google Cloud Storage buckets do not have IAM bindings or ACLs that grant access to the allUsers or allAuthenticatedUsers principals. These principals represent unauthenticated and broadly authenticated public access, which significantly increases the risk of unintentional data exposure.

        Rationale:

        In Google Cloud, the allUsers principal allows anyone on the internet to access a resource without authentication, while allAuthenticatedUsers allows access to any user with a Google account. Assigning these principals to a Cloud Storage bucket—either directly via IAM roles or indirectly through legacy ACLs—exposes data to a much broader audience than intended.

        This type of access is often misconfigured and can lead to:
          •	Public exposure of sensitive data, including personally identifiable information (PII), internal documents, or application configuration files.
          •	Data misuse or leakage, especially if access is granted with roles beyond read-only permissions.
          •	Non-compliance with regulatory frameworks like GDPR, HIPAA, PCI DSS, ISO 27001, and the CIS GCP Foundations Benchmark.
          •	Audit and incident response challenges, since access by allUsers or allAuthenticatedUsers is not attributable to a specific identity.

        Risk mitigation:
          •	Audit IAM policies and bucket ACLs to detect any bindings involving allUsers or allAuthenticatedUsers.
          •	Remove these principals from bucket policies and replace them with specific identities (e.g., service accounts, groups, or individual users) that require access.
          •	Enable Public Access Prevention to proactively block public access configuration.
          •	Enforce organization policies that restrict or deny the use of these principals across your projects.

        Eliminating access for allUsers and allAuthenticatedUsers on Cloud Storage buckets is a critical step in protecting cloud-resident data, enforcing least privilege access, and ensuring compliance with modern cloud security and privacy standards.
      remediation: |
        ### Terraform

        To update public access configuration using Terraform, ensure `allUsers` and `allAuthenticatedUsers` are not set:

        ```hcl
        resource "google_storage_bucket_iam_binding" "binding" {
          bucket = google_storage_bucket.default.name
          role = "roles/storage.admin"
          members = [
            "user:jane@example.com",
          ]
        }
        ```

        ```hcl
        resource "google_storage_bucket_iam_member" "member" {
          bucket = google_storage_bucket.default.name
          role = "roles/storage.admin"
          member = "user:jane@example.com"
        }
        ```

        ### Google Cloud Console
        1. In the Google Cloud console, go to the **Cloud Storage Bucket** page.
        2. For the bucket you want to enforce public access prevention on, select the more actions menu.
        3. Select **Edit access** from the drop-down menu.
        4. In the Public access card, select **Prevent public access** to enforce public access prevention.
        5. Select **Confirm**.

        ### gcloud cli

        To update public access configuration using the `gcloud` cli, ensure `allUsers` and `allAuthenticatedUsers` are not set:

        ```bash
        gcloud storage buckets add-iam-policy-binding gs://BUCKET_NAME --member=allUsers --role=roles/storage.objectViewer
        gcloud storage buckets remove-iam-policy-binding gs://BUCKET_NAME --member=allAuthenticatedUsers --role=roles/storage.objectViewer
        ```
  - uid: gcp-storage-cloud-storage-bucket-anonymously-publicly-accessible-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.storage.buckets.all(iamPolicy.all(members.none(_ == "allUsers")))
      gcp.storage.buckets.all(iamPolicy.all(members.none(_ == "allAuthenticatedUsers")))
  - uid: gcp-storage-cloud-storage-bucket-anonymously-publicly-accessible-single
    filters: asset.platform == "gcp-storage-bucket"
    mql: |
      gcp.storage.bucket.iamPolicy.all(members.none(_ == "allUsers"))
      gcp.storage.bucket.iamPolicy.all(members.none(_ == "allAuthenticatedUsers"))
  - uid: mondoo-gcp-security-cloud-storage-buckets-have-uniform-bucket-level-access-enabled
    title: Ensure that Cloud Storage buckets have uniform bucket-level access enabled
    impact: 60
    variants:
      - uid: gcp-storage-cloud-storage-buckets-uniform-bucket-level-access-enabled-all
      - uid: gcp-storage-cloud-storage-buckets-uniform-bucket-level-access-enabled-single
    docs:
      desc: |
        Cloud Storage offers two systems for granting users permission to access your buckets and objects: IAM and Access Control Lists (ACLs). These systems act in parallel - in order for a user to access a Cloud Storage resource, only one of the systems needs to grant the user permission. IAM is used throughout Google Cloud and allows you to grant a variety of permissions at the bucket and project levels. ACLs are used only by Cloud Storage and have limited permission options, but they allow you to grant permissions on a per-object basis.

        It is recommended to enable uniform bucket-level access on Cloud Storage buckets. Uniform bucket-level access is used to unify and simplify how you grant access to your Cloud Storage resources. Cloud Storage offers two systems that act in parallel to grant users permission to access buckets and objects:
      remediation: |
        ### Terraform

        ```hcl
        resource "google_storage_bucket" "example" {
          name     = "test-bucket"
          bucket_policy_only = true
          uniform_bucket_level_access = true
        }
        ```

        ### Google Cloud Console

        1. In the Google Cloud console, go to the **Cloud Storage Buckets** page.
        2. In the list of buckets, select the name of the desired bucket.
        3. Select the **Permissions** tab near the top of the page.
        4. In the text box named **Access Control**, select the **Switch to** link. Note that the text box disappears 90 days after you enable uniform bucket-level access.
        5. In the pop-up menu that appears, select **Fine-grained**.
        6. Select **Save**.

        ### gcloud cli

        ```bash
        gsutil uniformbucketlevelaccess set STATE gs://BUCKET_NAME
        ```
  - uid: gcp-storage-cloud-storage-buckets-uniform-bucket-level-access-enabled-all
    filters: asset.platform == "gcp-project"
    mql: |
      gcp.storage.buckets.all(
        iamConfiguration.UniformBucketLevelAccess.enabled == true
      )
  - uid: gcp-storage-cloud-storage-buckets-uniform-bucket-level-access-enabled-single
    filters: asset.platform == "gcp-storage-bucket"
    mql: gcp.storage.bucket.iamConfiguration.UniformBucketLevelAccess.enabled == true
