# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-github-organization-security
    name: Mondoo GitHub Organization Security
    version: 1.5.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: github
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        The Mondoo GitHub Organization Security policy provides guidance for establishing minimum recommended security and operational best practices for GitHub organizations.

        ### cnspec GitHub provider

        This policy uses the `github` provider to authenticate with GitHub's API in order to remotely scan GitHub organizations. Additional information on the `github` provider can be found by running this command:

        ```bash
        cnspec scan github --help
        ```

        ## Configuring the GitHub provider

        The `github` provider for cnspec requires a GitHub personal access token to authenticate with GitHub's API. Access to an organization is determined by the level of access the token cnspec is configured with when it runs.

        ### Create a personal access token

        To create a read-only personal access token, see [Creating a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) on GitHub's documentation site.

        ### Configure a GITHUB_TOKEN environment variable

        You supply your personal access token to cnspec using the `GITHUB_TOKEN` environment variable.

        #### Linux / macOS

        ```bash
        export GITHUB_TOKEN=<your personal access token>
        ```

        #### Windows

        ```powershell
        $Env:GITHUB_TOKEN = "<personal-access-token>"
        ```

        ## Scan a GitHub organization

        To scan the configuration of your GitHub organization, run this command:

        ```bash
        cnspec scan github org <ORG_NAME>
        ```

        ## Scan a GitHub organization and all repositories

        cnspec can also scan a GitHub organization and all of its repositories using the `--discover all` flag. To scan your GitHub organization and discover and scan all of the repositories within your organization, run this command:

        ```bash
        cnspec scan github org <ORG_NAME> --discover all
        ```

        > Note: Scanning large GitHub organizations may exceed GitHub API rate limits. For more information see [About rate limits](https://docs.github.com/en/rest/rate-limit?apiVersion=2022-11-28#about-rate-limits) in the GitHub documentation.

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - title: GitHub Org
        filters: asset.platform == "github-org"
        checks:
          - uid: mondoo-github-organization-security-default-permission-level
          - uid: mondoo-github-organization-security-two-factor-auth
          - uid: mondoo-github-organization-security-verified-domain
          - uid: mondoo-github-organization-security-security-policy
    scoring_system: highest impact
  - uid: mondoo-github-repository-security
    name: GitHub Repository Security
    version: 1.5.0
    license: BUSL-1.1
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        # Overview

        GitHub Repository Security by Mondoo provides security assessments of public and private GitHub repositories to ensure minimum recommended security and operational best practices. This policy is also designed to assess public repositories and open source projects your team depends on to evaluate the risk a project poses to your business. Open source projects that do not adhere to GitHub's recommended security best practices pose a higher risk of malicious code making its way into your environments.

        ### cnspec GitHub Provider

        This policy uses the `github` provider to authenticate with GitHub's API in order to remotely scan GitHub repositories. Additional information on the `github` provider can be found by running this command:

        ```bash
        cnspec scan github --help
        ```

        ## Configuring the GitHub provider

        The `github` provider for cnspec requires a GitHub personal access token to authenticate with GitHub's API. The personal access token is required regardless of whether you are scanning a public or a private repository. Access to private repositories is determined by the level of access the token cnspec is configured with when it runs.

        ### Create a personal access token

        To create a read-only personal access token, see [Creating a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) on GitHub's documentation site.

        ### Configure a GITHUB_TOKEN environment variable

        You supply your personal access token to cnspec using the `GITHUB_TOKEN` environment variable.

        #### Linux / macOS

        ```bash
        export GITHUB_TOKEN=<your personal access token>
        ```

        #### Windows

        ```powershell
        $Env:GITHUB_TOKEN = "<personal-access-token>"
        ```

        ## Scanning GitHub repositories

        To scan the configuration of a GitHub repository:

        ```bash
        cnspec scan github repo <ORG_NAME/REPO_NAME>
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - filters: |
          asset.platform == "github-repo"
        checks:
          - uid: mondoo-github-repository-security-binary-artifacts
          - uid: mondoo-github-repository-security-enforce-branch-protection
          - uid: mondoo-github-repository-security-ensure-default-branch-protection
          - uid: mondoo-github-repository-security-ensure-dependabot-workflow
          - uid: mondoo-github-repository-security-ensure-release-branch-protection
          - uid: mondoo-github-repository-security-prevent-force-pushes-default-branch
          - uid: mondoo-github-repository-security-prevent-force-pushes-release-branch
          - uid: mondoo-github-repository-security-require-conversation-resolution
          - uid: mondoo-github-repository-security-require-status-checks-before-merging
          - uid: mondoo-github-repository-security-required-signed-commits
          - uid: mondoo-github-repository-security-security-policy
    scoring_system: highest impact
props:
  - uid: mondooGithubSecurityRequiredPullRequestReviews
    title: Define the required number of reviewers on pull requests
    mql: "1"
queries:
  - uid: mondoo-github-organization-security-two-factor-auth
    title: Enable Two-factor authentication for all users in the organization
    impact: 90
    mql: github.organization.twoFactorRequirementEnabled
    docs:
      desc: |
        This check ensures that GitHub Organizations are configured to require all users to enable two-factor authentication (2FA), providing an additional layer of security for user accounts.

        **Rationale:**

        Two-factor authentication (2FA) is a critical security measure that requires users to provide two forms of authentication when logging into their accounts. This ensures that even if a user's password is compromised, an attacker cannot gain access without the second factor. Enforcing 2FA for all users in a GitHub Organization is highly recommended for the following reasons:
          •	It significantly reduces the risk of unauthorized access to the organization's repositories and sensitive data.
          •	It protects against credential theft, phishing attacks, and other common security threats.
          •	It ensures compliance with security best practices and frameworks, such as CIS Controls and ISO 27001.
          •	It enhances the overall security posture of the organization by mitigating the impact of compromised credentials.

        Failure to enforce 2FA can lead to:
          •	Unauthorized access to repositories, potentially exposing sensitive code or intellectual property.
          •	Compromised accounts being used to inject malicious code or manipulate repositories.
          •	Non-compliance with security standards and organizational policies.
          •	Increased risk of reputational damage and financial loss due to security breaches.
      remediation: |
        GitHub has several options for configuring 2FA for your organization. To enable 2FA, see [Configuring two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication) in GitHub's documentation.
    refs:
      - url: https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa
        title: Securing your account with two-factor authentication (2FA)
  - uid: mondoo-github-organization-security-verified-domain
    title: Organization should have a verified domain attached
    impact: 80
    mql: github.organization.isVerified
    docs:
      desc: |
        This check ensures that GitHub organizations have a verified domain attached to confirm their identity and enhance trust.

        **Rationale:**

        Verifying your organization's domain with GitHub provides several benefits:
          •	It confirms your organization's identity, adding a "Verified" badge to the organization's profile.
          •	It ensures that email notifications sent to members of your organization originate from approved domains.
          •	It enhances the credibility of your organization, especially for public repositories and open-source projects.

        Failure to verify a domain can lead to:
          •	Reduced trust in your organization's profile and repositories.
          •	Potential misuse of your organization's name by malicious actors.
          •	Challenges in managing email notifications and ensuring they are delivered securely.
      remediation: |
        To achieve verified status for your GitHub organization, see [Verifying or approving a domain for your organization](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-organization-settings/verifying-or-approving-a-domain-for-your-organization) in the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-organization-settings/verifying-or-approving-a-domain-for-your-organization
        title: Verifying or approving a domain for your organization
  - uid: mondoo-github-organization-security-default-permission-level
    title: Ensure GitHub Organization has base permissions configured
    impact: 50
    mql: github.organization.defaultRepositoryPermission == "read"
    docs:
      desc: |
        This check ensures that GitHub Organizations have base permissions configured to control the default level of access members have to the organization's repositories.

        **Rationale:**

        By default, members of a GitHub Organization are granted Read permissions to the organization's repositories. Configuring base permissions ensures that access is appropriately restricted, adhering to the principle of least privilege:
          •	It prevents unauthorized or excessive access to sensitive repositories.
          •	It simplifies access management by providing a consistent baseline for all members.
          •	It reduces the risk of accidental or malicious changes to repositories by limiting default permissions.

        Failure to configure base permissions can lead to:
          •	Unintended exposure of sensitive repositories to all organization members.
          •	Challenges in enforcing access control policies across the organization.
          •	Non-compliance with security best practices and frameworks, such as CIS Controls and ISO 27001.
          •	Increased risk of data leakage or unauthorized repository modifications.
      remediation: |
        To set base permissions for GitHub, see [Setting base permissions for an organization](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/setting-base-permissions-for-an-organization) in GitHub's documentation.
    refs:
      - url: https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization
        title: Setting base permissions for an organization
  - uid: mondoo-github-organization-security-security-policy
    title: Ensure repository defines a security policy
    impact: 30
    mql: |
      if ( github.organization.repositories.one(name == ".github") ) {
        github.organization.repositories.where( name == ".github").all(
          securityFile.exists
        ) || github.repository.securityFile.exists
      } else {
        github.repository.securityFile.exists
      }
    docs:
      desc: |
        This check ensures that repositories define a security policy to provide instructions for reporting security vulnerabilities in the project.

        **Rationale:**

        Adding a security policy to a repository is a critical step in ensuring that vulnerabilities are reported and addressed in a timely manner. A well-defined security policy:
          •	Provides clear guidance to users and contributors on how to report security issues.
          •	Helps maintainers respond quickly to vulnerabilities, reducing the risk of exploitation.
          •	Enhances trust and transparency for users and collaborators by demonstrating a commitment to security best practices.

        Failure to define a security policy can lead to:
          •	Delayed or missed reporting of vulnerabilities, increasing the risk of exploitation.
          •	Confusion among users and contributors about how to handle security issues.
          •	Reputational damage due to perceived negligence in addressing security concerns.
          •	Non-compliance with security standards and frameworks, such as OpenSSF Scorecard and ISO 27001.
      remediation: |
        See [Adding a security policy to your repository](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository#adding-a-security-policy-to-your-repository) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
        title: GitHub Docs - Adding a security policy to your repository
  - uid: mondoo-github-repository-security-ensure-default-branch-protection
    title: Ensure GitHub repository default branch is protected
    impact: 90
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
    docs:
      desc: |
        This check ensures that the default branch for the repository has branch protection enabled. Branch protection enforces certain workflows or requirements are met before a collaborator can push changes to a branch in a repository.

        **Rationale:**

        By default, GitHub repositories do not enforce branch protection rules, leaving the default branch vulnerable to unauthorized changes. Enabling branch protection provides several benefits:
          •	It ensures that only authorized changes are merged into the default branch, maintaining code integrity.
          •	It enforces workflows such as requiring pull request reviews, status checks, or signed commits before merging.
          •	It reduces the risk of accidental or malicious changes to critical branches.

        Failure to enable branch protection can lead to:
          •	Unrestricted access to the default branch, increasing the risk of unauthorized changes.
          •	Non-compliance with security best practices and organizational policies.
          •	Challenges in maintaining a secure and stable codebase.
          •	Reputational damage or operational disruptions due to unverified changes being introduced.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: About Branch protection
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/changing-the-default-branch
        title: Changing the default branch
  - uid: mondoo-github-repository-security-ensure-release-branch-protection
    title: Ensure GitHub repository release branches are protected
    impact: 90
    props:
      - uid: mondooGithubReleaseBranches
        title: Pattern for release branch
        mql: |
          return  /^release/
    mql: |
      github.repository.branches
        .where( name == props.mondooGithubReleaseBranches )
        .all( isProtected == true )
    docs:
      desc: |
        This check ensures that any release branches (e.g., 'release-x.y.z') have branch protection rules enabled. Branch protection enforces certain workflows or requirements that must be met before a collaborator can push changes to a branch in a repository. It is recommended that release branches have branch protection enabled, with branch protection rules applied.

        **Rationale:**

        By default, GitHub repositories do not enforce branch protection rules, leaving release branches vulnerable to unauthorized changes. Enabling branch protection provides several benefits:
          •	It ensures that only authorized changes are merged into release branches, maintaining code integrity.
          •	It enforces workflows such as requiring pull request reviews, status checks, or signed commits before merging.
          •	It reduces the risk of accidental or malicious changes to critical branches.

        Failure to enable branch protection on release branches can lead to:
          •	Unrestricted access to release branches, increasing the risk of unauthorized changes.
          •	Non-compliance with security best practices and organizational policies.
          •	Challenges in maintaining a secure and stable codebase.
          •	Reputational damage or operational disruptions due to unverified changes being introduced.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site.
  - uid: mondoo-github-repository-security-prevent-force-pushes-default-branch
    title: Ensure repository does not allow force pushes to the default branch
    impact: 80
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
      github.repository.branches
        .where( isDefault == true )
        .all( protectionRules { allowForcePushes['enabled'] == false } )
    docs:
      desc: |
        This check ensures that the default branch does not allow force pushes. Branch protection enforces certain workflows or requirements that must be met before a collaborator can push changes to a branch in a repository. It is highly recommended to disable force pushes to the default repository branch.

        Rationale:

        By default, GitHub blocks force pushes on all protected branches. However, when force pushes are enabled, they introduce significant risks:
          •	Force pushes can overwrite commits that other collaborators have based their work on, leading to merge conflicts or corrupted pull requests.
          •	They allow changes to bypass standard workflows, such as requiring pull request reviews or status checks.
          •	They increase the likelihood of accidental or malicious changes to critical branches.

        If force pushes are allowed on the default branch, it can lead to:
          •	Disruption of collaborative workflows and potential data loss.
          •	Non-compliance with security best practices and organizational policies.
          •	Challenges in maintaining a secure and stable codebase.
          •	Reputational damage or operational disruptions due to unverified changes being introduced.

        Enabling force pushes does not override other branch protection rules. For example, if a branch requires a linear commit history, you cannot force push merge commits to that branch.     remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Allow force pushes](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#allow-force-pushes) on the GitHub documentation site, and make sure the repository is not configured to allow force pushes.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
  - uid: mondoo-github-repository-security-prevent-force-pushes-release-branch
    title: Ensure repository does not allow force pushes to any release branches
    impact: 80
    props:
      - uid: mondooGithubReleaseBranches
        title: Pattern for release branch
        mql: |
          return  /^release/
    mql: |
      github.repository.branches
        .where( name == props.mondooGithubReleaseBranches )
        .all( isProtected == true )
      github.repository.branches
        .where( name == props.mondooGithubReleaseBranches )
        .all( protectionRules { allowForcePushes['enabled'] == false } )
    docs:
      desc: |
        This check ensures that the release branch does not allow force pushes. Branch protection enforces certain workflows or requirements that must be met before a collaborator can push changes to a branch in a repository. It is recommended to disable force pushes to any release branches.

        **Rationale:**

        By default, GitHub blocks force pushes on all protected branches. However, enabling force pushes introduces significant risks:
          •	Force pushes can overwrite commits that other collaborators have based their work on, leading to merge conflicts or corrupted pull requests.
          •	They allow changes to bypass standard workflows, such as requiring pull request reviews or status checks.
          •	They increase the likelihood of accidental or malicious changes to critical branches.

        If force pushes are allowed on release branches, it can lead to:
          •	Disruption of collaborative workflows and potential data loss.
          •	Non-compliance with security best practices and organizational policies.
          •	Challenges in maintaining a secure and stable codebase.
          •	Reputational damage or operational disruptions due to unverified changes being introduced.

        Enabling force pushes does not override other branch protection rules. For example, if a branch requires a linear commit history, you cannot force push merge commits to that branch.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Allow force pushes](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#allow-force-pushes) on the GitHub documentation site, and make sure the repository is not configured to allow force pushes.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
  - uid: mondoo-github-repository-security-require-conversation-resolution
    title: Ensure branch protection requires conversation resolution before merging
    impact: 80
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
      github.repository.branches
        .where( isDefault == true )
        .all( protectionRules { requiredConversationResolution['enabled'] == true } )
    docs:
      desc: |
        This check ensures that a branch protection rule is configured to require all comments on the pull request to be resolved before it can be merged to a protected branch. Branch protection enforces certain workflows or requirements that must be met before a collaborator can push changes to a branch in a repository.

        **Rationale:**

        By default, GitHub repositories do not enforce conversation resolution before merging pull requests. Enabling this requirement provides several benefits:
          •	It ensures that all comments, including those identifying potential issues or improvements, are addressed before merging.
          •	It promotes better collaboration and code quality by resolving discussions prior to integration.
          •	It reduces the risk of unresolved issues being introduced into the codebase.

        Failure to require conversation resolution can lead to:
          •	Unaddressed feedback or unresolved issues being merged into the codebase.
          •	Decreased code quality and potential technical debt.
          •	Challenges in maintaining a secure and stable codebase.
          •	Non-compliance with organizational policies or best practices for code review.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Require conversation resolution before merging](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-conversation-resolution-before-merging) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-conversation-resolution-before-merging
        title: GitHub Documentation - Require conversation resolution before merging
  - uid: mondoo-github-repository-security-require-status-checks-before-merging
    title: Ensure status checks are passing before merging PRs on the default branch
    impact: 80
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
      github.repository.branches
        .where( isDefault == true )
        .all( protectionRules { requiredStatusChecks.length > 0 } )
    docs:
      desc: |
        This check ensures that all required CI tests pass before collaborators can merge changes to a protected branch. Branch protection enforces certain workflows or requirements that must be met before a collaborator can push changes to a branch in a repository.

        **Rationale:**

        By default, GitHub repositories do not enforce passing status checks before merging pull requests. Enabling this requirement provides several benefits:
          •	It ensures that all CI tests, including those identifying potential issues or regressions, are successfully completed before merging.
          •	It promotes better code quality and stability by validating changes prior to integration.
          •	It reduces the risk of introducing bugs or vulnerabilities into the codebase.

        Failure to require passing status checks can lead to:
          •	Unverified or unstable code being merged into the codebase.
          •	Decreased code quality and potential technical debt.
          •	Challenges in maintaining a secure and stable codebase.
          •	Non-compliance with organizational policies or best practices for code review.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Require status checks before merging](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-status-checks-before-merging) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-status-checks-before-merging
        title: Require status checks before merging
  - uid: mondoo-github-repository-security-required-signed-commits
    title: Ensure repository branch protection requires signed commits
    impact: 80
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
      github.repository.branches
        .where( isDefault == true )
        .all( protectionRules { requiredSignatures == true } )
    docs:
      desc: |
        This check ensures that a branch protection rule exists to require signed commits on the default branch. Signing commits and tags locally gives other people confidence about the origin of changes made to a project. If a commit or tag has a GPG, SSH, or S/MIME signature that is cryptographically verifiable, GitHub marks the commit or tag as "Verified" or "Partially verified."

        **Rationale:**

        By default, GitHub repositories do not enforce signed commits on the default branch. Enabling this requirement provides several benefits:
          •	It ensures that all commits are verified, reducing the risk of unauthorized or malicious changes.
          •	It enhances trust and accountability by confirming the identity of commit authors.
          •	It promotes better security practices and compliance with organizational policies.

        Failure to require signed commits can lead to:
          •	Unverified or unauthorized changes being introduced into the codebase.
          •	Decreased trust in the integrity of the repository.
          •	Challenges in maintaining a secure and stable codebase.
          •	Non-compliance with security best practices or organizational requirements.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Require signed commits](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-signed-commits) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
      - url: https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification
        title: GitHub Docs - About commit signature verification
  - uid: mondoo-github-repository-security-enforce-branch-protection
    title: Ensure repository does not allow bypassing of branch protections rules
    impact: 70
    mql: |
      github.repository.branches
        .where( isDefault == true )
        .all( isProtected == true )
      github.repository.branches
        .where( isDefault == true )
        .all( protectionRules.enforceAdmins['enabled'] == true )
    docs:
      desc: |
        This check ensures that branch protection rules cannot be bypassed. By default, the restrictions of a branch protection rule do not apply to people with admin permissions to the repository or custom roles with the "bypass branch protections" permission in a repository.

        **Rationale:**

        Allowing branch protection rules to be bypassed introduces significant risks:
          •	It permits administrators or users with specific roles to make changes that bypass established workflows, such as requiring pull request reviews or status checks.
          •	It undermines the integrity of the branch protection rules, potentially leading to unauthorized or unverified changes.
          •	It increases the likelihood of accidental or malicious changes to critical branches.

        Failure to enforce branch protection rules for all users can lead to:
          •	Disruption of collaborative workflows and potential data loss.
          •	Non-compliance with security best practices and organizational policies.
          •	Challenges in maintaining a secure and stable codebase.
          •	Reputational damage or operational disruptions due to unverified changes being introduced.
      remediation: |
        To enable branch protection, see [About protected branches](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches) on the GitHub documentation site. Once branch protection is enabled, see [Do not allow bypassing the above settings](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#do-not-allow-bypassing-the-above-settings) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches
        title: GitHub Docs - About protected branches
  - uid: mondoo-github-repository-security-security-policy
    title: Ensure repository defines a security policy
    impact: 30
    mql: |
      github.repository.securityFile.exists
    docs:
      desc: |
        This check ensures that the repository defines a security policy to provide instructions for reporting security vulnerabilities in the project.

        **Rationale:**

        Adding a security policy to a repository is a critical step in ensuring that vulnerabilities are reported and addressed in a timely manner. A well-defined security policy:
          •	Provides clear guidance to users and contributors on how to report security issues.
          •	Helps maintainers respond quickly to vulnerabilities, reducing the risk of exploitation.
          •	Enhances trust and transparency for users and collaborators by demonstrating a commitment to security best practices.

        Failure to define a security policy can lead to:
          •	Delayed or missed reporting of vulnerabilities, increasing the risk of exploitation.
          •	Confusion among users and contributors about how to handle security issues.
          •	Reputational damage due to perceived negligence in addressing security concerns.
          •	Non-compliance with security standards and frameworks, such as OpenSSF Scorecard and ISO 27001.
      remediation: |
        See [Adding a security policy to your repository](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository#adding-a-security-policy-to-your-repository) on the GitHub documentation site.
    refs:
      - url: https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
        title: GitHub Docs - Adding a security policy to your repository
  - uid: mondoo-github-repository-security-binary-artifacts
    title: Ensure repository does not generate binary artifacts
    impact: 90
    mql: |
      github.repository.files
        .all( isBinary == false )
      github.repository.files
        .where( type == "dir" )
        .all( files.where( type != "dir").all( isBinary == false) )
    docs:
      desc: |
        This check ensures that the project does not include generated executable (binary) artifacts in the source repository. Binary artifacts pose significant security challenges because they cannot be reviewed, and their inclusion in the repository can lead to unsafe practices.

        **Rationale:**

        Including binary artifacts in a source repository introduces several risks:
          •	Binary artifacts cannot be audited or reviewed for malicious content, increasing the risk of security vulnerabilities.
          •	Users may directly use these executables without verifying their integrity, leading to unsafe behaviors.
          •	It undermines the principle of building software from source, which ensures transparency and reproducibility.

        Failure to avoid binary artifacts can lead to:
          •	Unverified or malicious code being distributed to users.
          •	Challenges in maintaining a secure and transparent development process.
          •	Non-compliance with security best practices and organizational policies.
          •	Reputational damage due to potential exploitation of unreviewed binaries.
      remediation: |
        Remove the generated executable artifacts from the repository, and then build from source.
    refs:
      - url: https://github.com/ossf/scorecard/blob/main/docs/checks.md#binary-artifacts
        title: OSSF Scorecard - Binary Artifacts
  - uid: mondoo-github-repository-security-ensure-dependabot-workflow
    title: Ensure a GitHub Actions workflow exists for Dependabot
    impact: 70
    mql: |-
      github.repository.files
        .one( name == ".github" && type == "dir" )
      github.repository.files
        .where( path == ".github" )
        .all( files.one( name == "dependabot.yaml" || name == "dependabot.yml" ) )
    docs:
      desc: |
        This check ensures the existence of a GitHub Actions workflow to run Dependabot checks on the repository by looking for the existence of a `.github/dependabot.yml` or `.github/dependabot.yaml` configuration file.

        **Rationale:**

        Dependabot creates pull requests to keep your dependencies up to date, and you can use GitHub Actions to perform automated tasks when these pull requests are created. Enabling this workflow provides several benefits:
          •	It ensures that dependencies are regularly updated, reducing the risk of vulnerabilities in outdated packages.
          •	It automates dependency management, saving time and effort for developers.
          •	It enhances the security and stability of the codebase by keeping dependencies current.

        Failure to configure a Dependabot workflow can lead to:
          •	Outdated dependencies with known vulnerabilities being used in the project.
          •	Manual and error-prone dependency updates, increasing the risk of issues.
          •	Challenges in maintaining a secure and stable codebase.
          •	Non-compliance with security best practices and organizational policies.
      remediation: |
        GitHub Actions provides many different workflows for running Dependabot checks on a project. For more information see [Automating Dependabot with GitHub Actions](https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions) in the GitHub documentation site.
