// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: cnspec_policy.proto

package policy

import (
	explorer "go.mondoo.com/cnquery/v11/explorer"
	resources "go.mondoo.com/cnquery/v11/explorer/resources"
	llx "go.mondoo.com/cnquery/v11/llx"
	inventory "go.mondoo.com/cnquery/v11/providers-sdk/v1/inventory"
	mvd "go.mondoo.com/cnquery/v11/providers-sdk/v1/upstream/mvd"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupType int32

const (
	GroupType_UNCATEGORIZED GroupType = 0
	GroupType_CHAPTER       GroupType = 1
	GroupType_IMPORT        GroupType = 2
	GroupType_OVERRIDE      GroupType = 3 // generic overrides to existing checks/controls
	GroupType_IGNORED       GroupType = 4 // ignore scoring, snooze it
	GroupType_DISABLE       GroupType = 5 // disable execution, turn it off
	GroupType_PROPERTIES    GroupType = 6 // modify properties
	GroupType_OUT_OF_SCOPE  GroupType = 7 // out of scope, meaning it is not applicable
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "UNCATEGORIZED",
		1: "CHAPTER",
		2: "IMPORT",
		3: "OVERRIDE",
		4: "IGNORED",
		5: "DISABLE",
		6: "PROPERTIES",
		7: "OUT_OF_SCOPE",
	}
	GroupType_value = map[string]int32{
		"UNCATEGORIZED": 0,
		"CHAPTER":       1,
		"IMPORT":        2,
		"OVERRIDE":      3,
		"IGNORED":       4,
		"DISABLE":       5,
		"PROPERTIES":    6,
		"OUT_OF_SCOPE":  7,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[0].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[0]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{0}
}

type QueryAction int32

const (
	QueryAction_UNSPECIFIED QueryAction = 0
	QueryAction_MODIFY      QueryAction = 1
	QueryAction_DEACTIVATE  QueryAction = 2
	QueryAction_ACTIVATE    QueryAction = 3
)

// Enum value maps for QueryAction.
var (
	QueryAction_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MODIFY",
		2: "DEACTIVATE",
		3: "ACTIVATE",
	}
	QueryAction_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MODIFY":      1,
		"DEACTIVATE":  2,
		"ACTIVATE":    3,
	}
)

func (x QueryAction) Enum() *QueryAction {
	p := new(QueryAction)
	*p = x
	return p
}

func (x QueryAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryAction) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[1].Descriptor()
}

func (QueryAction) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[1]
}

func (x QueryAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryAction.Descriptor instead.
func (QueryAction) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{1}
}

type ScopeType int32

const (
	// Scope type has not been set
	ScopeType_UNSCOPED ScopeType = 0
	// Scope applies to the entire asset and vulns and security
	ScopeType_ASSET ScopeType = 1
	// Scope applies to vulnerabilities on the entire asset
	ScopeType_ASSET_VULNS ScopeType = 2
	// Scope applies to certain resources on an asset, but not software
	ScopeType_RESOURCE ScopeType = 4
	// Scope applies to certain software (packages/libs), but not resources
	ScopeType_SOFTWARE ScopeType = 5
	// Scope applies to both software and resources on an asset
	ScopeType_SOFTWARE_AND_RESOURCE ScopeType = 6
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "UNSCOPED",
		1: "ASSET",
		2: "ASSET_VULNS",
		4: "RESOURCE",
		5: "SOFTWARE",
		6: "SOFTWARE_AND_RESOURCE",
	}
	ScopeType_value = map[string]int32{
		"UNSCOPED":              0,
		"ASSET":                 1,
		"ASSET_VULNS":           2,
		"RESOURCE":              4,
		"SOFTWARE":              5,
		"SOFTWARE_AND_RESOURCE": 6,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[2].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[2]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{2}
}

type ReviewStatus int32

const (
	ReviewStatus_NOT_REVIEWED ReviewStatus = 0
	ReviewStatus_APPROVED     ReviewStatus = 1
	ReviewStatus_REJECTED     ReviewStatus = 2
)

// Enum value maps for ReviewStatus.
var (
	ReviewStatus_name = map[int32]string{
		0: "NOT_REVIEWED",
		1: "APPROVED",
		2: "REJECTED",
	}
	ReviewStatus_value = map[string]int32{
		"NOT_REVIEWED": 0,
		"APPROVED":     1,
		"REJECTED":     2,
	}
)

func (x ReviewStatus) Enum() *ReviewStatus {
	p := new(ReviewStatus)
	*p = x
	return p
}

func (x ReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[3].Descriptor()
}

func (ReviewStatus) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[3]
}

func (x ReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewStatus.Descriptor instead.
func (ReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{3}
}

type ScoreRating int32

const (
	ScoreRating_unrated ScoreRating = 0
	ScoreRating_aPlus   ScoreRating = 1
	ScoreRating_a       ScoreRating = 2
	ScoreRating_aMinus  ScoreRating = 3
	ScoreRating_bPlus   ScoreRating = 4
	ScoreRating_b       ScoreRating = 5
	ScoreRating_bMinus  ScoreRating = 6
	ScoreRating_cPlus   ScoreRating = 7
	ScoreRating_c       ScoreRating = 8
	ScoreRating_cMinus  ScoreRating = 9
	ScoreRating_dPlus   ScoreRating = 10
	ScoreRating_d       ScoreRating = 11
	ScoreRating_dMinus  ScoreRating = 12
	ScoreRating_failed  ScoreRating = 13
	ScoreRating_error   ScoreRating = 14
	ScoreRating_skip    ScoreRating = 15
)

// Enum value maps for ScoreRating.
var (
	ScoreRating_name = map[int32]string{
		0:  "unrated",
		1:  "aPlus",
		2:  "a",
		3:  "aMinus",
		4:  "bPlus",
		5:  "b",
		6:  "bMinus",
		7:  "cPlus",
		8:  "c",
		9:  "cMinus",
		10: "dPlus",
		11: "d",
		12: "dMinus",
		13: "failed",
		14: "error",
		15: "skip",
	}
	ScoreRating_value = map[string]int32{
		"unrated": 0,
		"aPlus":   1,
		"a":       2,
		"aMinus":  3,
		"bPlus":   4,
		"b":       5,
		"bMinus":  6,
		"cPlus":   7,
		"c":       8,
		"cMinus":  9,
		"dPlus":   10,
		"d":       11,
		"dMinus":  12,
		"failed":  13,
		"error":   14,
		"skip":    15,
	}
)

func (x ScoreRating) Enum() *ScoreRating {
	p := new(ScoreRating)
	*p = x
	return p
}

func (x ScoreRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRating) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[4].Descriptor()
}

func (ScoreRating) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[4]
}

func (x ScoreRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRating.Descriptor instead.
func (ScoreRating) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{4}
}

type Comparison int32

const (
	Comparison_GREATER_THAN Comparison = 0
	Comparison_LESS_THAN    Comparison = 1
)

// Enum value maps for Comparison.
var (
	Comparison_name = map[int32]string{
		0: "GREATER_THAN",
		1: "LESS_THAN",
	}
	Comparison_value = map[string]int32{
		"GREATER_THAN": 0,
		"LESS_THAN":    1,
	}
)

func (x Comparison) Enum() *Comparison {
	p := new(Comparison)
	*p = x
	return p
}

func (x Comparison) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparison) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[5].Descriptor()
}

func (Comparison) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[5]
}

func (x Comparison) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparison.Descriptor instead.
func (Comparison) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{5}
}

type DateFilterField int32

const (
	DateFilterField_FILTER_LAST_UPDATED DateFilterField = 0
	DateFilterField_FILTER_CREATED      DateFilterField = 1
)

// Enum value maps for DateFilterField.
var (
	DateFilterField_name = map[int32]string{
		0: "FILTER_LAST_UPDATED",
		1: "FILTER_CREATED",
	}
	DateFilterField_value = map[string]int32{
		"FILTER_LAST_UPDATED": 0,
		"FILTER_CREATED":      1,
	}
)

func (x DateFilterField) Enum() *DateFilterField {
	p := new(DateFilterField)
	*p = x
	return p
}

func (x DateFilterField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateFilterField) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[6].Descriptor()
}

func (DateFilterField) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[6]
}

func (x DateFilterField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateFilterField.Descriptor instead.
func (DateFilterField) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{6}
}

type ReportingJob_Type int32

const (
	ReportingJob_UNSPECIFIED ReportingJob_Type = 0
	ReportingJob_CHECK       ReportingJob_Type = 1
	ReportingJob_DATA_QUERY  ReportingJob_Type = 2
	ReportingJob_CONTROL     ReportingJob_Type = 3
	ReportingJob_POLICY      ReportingJob_Type = 4
	ReportingJob_FRAMEWORK   ReportingJob_Type = 5
	ReportingJob_RISK_FACTOR ReportingJob_Type = 6
)

// Enum value maps for ReportingJob_Type.
var (
	ReportingJob_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CHECK",
		2: "DATA_QUERY",
		3: "CONTROL",
		4: "POLICY",
		5: "FRAMEWORK",
		6: "RISK_FACTOR",
	}
	ReportingJob_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CHECK":       1,
		"DATA_QUERY":  2,
		"CONTROL":     3,
		"POLICY":      4,
		"FRAMEWORK":   5,
		"RISK_FACTOR": 6,
	}
)

func (x ReportingJob_Type) Enum() *ReportingJob_Type {
	p := new(ReportingJob_Type)
	*p = x
	return p
}

func (x ReportingJob_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportingJob_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[7].Descriptor()
}

func (ReportingJob_Type) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[7]
}

func (x ReportingJob_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportingJob_Type.Descriptor instead.
func (ReportingJob_Type) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{30, 0}
}

type PolicyDelta_PolicyAssignmentActionType int32

const (
	PolicyDelta_ADD    PolicyDelta_PolicyAssignmentActionType = 0
	PolicyDelta_DELETE PolicyDelta_PolicyAssignmentActionType = 1
)

// Enum value maps for PolicyDelta_PolicyAssignmentActionType.
var (
	PolicyDelta_PolicyAssignmentActionType_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
	}
	PolicyDelta_PolicyAssignmentActionType_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
	}
)

func (x PolicyDelta_PolicyAssignmentActionType) Enum() *PolicyDelta_PolicyAssignmentActionType {
	p := new(PolicyDelta_PolicyAssignmentActionType)
	*p = x
	return p
}

func (x PolicyDelta_PolicyAssignmentActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyDelta_PolicyAssignmentActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cnspec_policy_proto_enumTypes[8].Descriptor()
}

func (PolicyDelta_PolicyAssignmentActionType) Type() protoreflect.EnumType {
	return &file_cnspec_policy_proto_enumTypes[8]
}

func (x PolicyDelta_PolicyAssignmentActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyDelta_PolicyAssignmentActionType.Descriptor instead.
func (PolicyDelta_PolicyAssignmentActionType) EnumDescriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{56, 0}
}

// PolicyGroup specifies and overrides a policy and all its queries and referenced policies.
// - Queries have UUIDs across all policies, so these overrides reach across policies.
// - Policies are targeted via UUID as well and may override their scoring behavior.
// - PolicyGroups can be time-limited
// - PolicyGroups can be limited to a subset of assets
type PolicyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*PolicyRef       `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	Checks   []*explorer.Mquery `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
	Queries  []*explorer.Mquery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	Type     GroupType          `protobuf:"varint,4,opt,name=type,proto3,enum=cnspec.policy.v1.GroupType" json:"type,omitempty"`
	Uid      string             `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// filter for the assets this applies to
	Filters *explorer.Filters `protobuf:"bytes,20,opt,name=filters,proto3" json:"filters,omitempty"`
	// the timeline during which overrides are active and reminders will be sent
	StartDate    int64 `protobuf:"varint,21,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      int64 `protobuf:"varint,22,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ReminderDate int64 `protobuf:"varint,23,opt,name=reminder_date,json=reminderDate,proto3" json:"reminder_date,omitempty"`
	// metadata
	Title     string             `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	Docs      *PolicyGroupDocs   `protobuf:"bytes,25,opt,name=docs,proto3" json:"docs,omitempty"`
	Authors   []*explorer.Author `protobuf:"bytes,26,rep,name=authors,proto3" json:"authors,omitempty"`
	Reviewers []*explorer.Author `protobuf:"bytes,27,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
	// only applies to GroupType IGNORED/DISABLED
	// Only if status is REJECTED, we ignore the group
	// Which means that unapproved groups get handled as if they were approved
	ReviewStatus ReviewStatus `protobuf:"varint,28,opt,name=review_status,json=reviewStatus,proto3,enum=cnspec.policy.v1.ReviewStatus" json:"review_status,omitempty"`
	Created      int64        `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified     int64        `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *PolicyGroup) Reset() {
	*x = PolicyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroup) ProtoMessage() {}

func (x *PolicyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroup.ProtoReflect.Descriptor instead.
func (*PolicyGroup) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyGroup) GetPolicies() []*PolicyRef {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PolicyGroup) GetChecks() []*explorer.Mquery {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *PolicyGroup) GetQueries() []*explorer.Mquery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *PolicyGroup) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_UNCATEGORIZED
}

func (x *PolicyGroup) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PolicyGroup) GetFilters() *explorer.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PolicyGroup) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *PolicyGroup) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *PolicyGroup) GetReminderDate() int64 {
	if x != nil {
		return x.ReminderDate
	}
	return 0
}

func (x *PolicyGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PolicyGroup) GetDocs() *PolicyGroupDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *PolicyGroup) GetAuthors() []*explorer.Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *PolicyGroup) GetReviewers() []*explorer.Author {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *PolicyGroup) GetReviewStatus() ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return ReviewStatus_NOT_REVIEWED
}

func (x *PolicyGroup) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PolicyGroup) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

type PolicyRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Action is used for all policy overrides
	Action explorer.Action `protobuf:"varint,41,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
	// Impact allows to override the way the score of the policy is aggregated
	Impact *explorer.Impact `protobuf:"bytes,23,opt,name=impact,proto3" json:"impact,omitempty"`
	// ScoringSystem allows overriding the scoring system of the policy
	ScoringSystem explorer.ScoringSystem `protobuf:"varint,42,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnquery.explorer.ScoringSystem" json:"scoring_system,omitempty"`
	// local checksum for the contents of this policy reference
	Checksum string `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *PolicyRef) Reset() {
	*x = PolicyRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRef) ProtoMessage() {}

func (x *PolicyRef) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRef.ProtoReflect.Descriptor instead.
func (*PolicyRef) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyRef) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *PolicyRef) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PolicyRef) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

func (x *PolicyRef) GetImpact() *explorer.Impact {
	if x != nil {
		return x.Impact
	}
	return nil
}

func (x *PolicyRef) GetScoringSystem() explorer.ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return explorer.ScoringSystem(0)
}

func (x *PolicyRef) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Policy definition, re-usable or assigned to the user's environment
// - Contains all policies and overrides
// - Can limit to what it supports
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn           string                 `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`  // will be filled from UID on upload
	Uid           string                 `protobuf:"bytes,36,opt,name=uid,proto3" json:"uid,omitempty"` // uid is only used initially, to generate the MRN
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OwnerMrn      string                 `protobuf:"bytes,8,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Groups        []*PolicyGroup         `protobuf:"bytes,11,rep,name=groups,proto3" json:"groups,omitempty"`
	License       string                 `protobuf:"bytes,21,opt,name=license,proto3" json:"license,omitempty"`
	Docs          *PolicyDocs            `protobuf:"bytes,41,opt,name=docs,proto3" json:"docs,omitempty"`
	Summary       string                 `protobuf:"bytes,46,opt,name=summary,proto3" json:"summary,omitempty"`
	ScoringSystem explorer.ScoringSystem `protobuf:"varint,10,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnquery.explorer.ScoringSystem" json:"scoring_system,omitempty"`
	Authors       []*explorer.Author     `protobuf:"bytes,30,rep,name=authors,proto3" json:"authors,omitempty"`
	Created       int64                  `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified      int64                  `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Props         []*explorer.Property   `protobuf:"bytes,45,rep,name=props,proto3" json:"props,omitempty"`
	RiskFactors   []*RiskFactor          `protobuf:"bytes,47,rep,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty"`
	// checksums are grouped into:
	// local... meaning this policy, not policy dependencies
	// graph... meaning this and all dependent policies
	// content... meaning all the content in the policy, everything there is
	// execution... meaning everything that changes the resolved policy
	LocalContentChecksum   string `protobuf:"bytes,37,opt,name=local_content_checksum,json=localContentChecksum,proto3" json:"local_content_checksum,omitempty"`
	GraphContentChecksum   string `protobuf:"bytes,38,opt,name=graph_content_checksum,json=graphContentChecksum,proto3" json:"graph_content_checksum,omitempty"`
	LocalExecutionChecksum string `protobuf:"bytes,39,opt,name=local_execution_checksum,json=localExecutionChecksum,proto3" json:"local_execution_checksum,omitempty"`
	GraphExecutionChecksum string `protobuf:"bytes,40,opt,name=graph_execution_checksum,json=graphExecutionChecksum,proto3" json:"graph_execution_checksum,omitempty"`
	// aggregation of all filters applicable to this policy. auto-generated
	ComputedFilters *explorer.Filters `protobuf:"bytes,43,opt,name=computed_filters,json=computedFilters,proto3" json:"computed_filters,omitempty"`
	QueryCounts     *QueryCounts      `protobuf:"bytes,42,opt,name=query_counts,json=queryCounts,proto3" json:"query_counts,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Policy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Policy) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *Policy) GetGroups() []*PolicyGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Policy) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Policy) GetDocs() *PolicyDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Policy) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Policy) GetScoringSystem() explorer.ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return explorer.ScoringSystem(0)
}

func (x *Policy) GetAuthors() []*explorer.Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Policy) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Policy) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Policy) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Policy) GetProps() []*explorer.Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Policy) GetRiskFactors() []*RiskFactor {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

func (x *Policy) GetLocalContentChecksum() string {
	if x != nil {
		return x.LocalContentChecksum
	}
	return ""
}

func (x *Policy) GetGraphContentChecksum() string {
	if x != nil {
		return x.GraphContentChecksum
	}
	return ""
}

func (x *Policy) GetLocalExecutionChecksum() string {
	if x != nil {
		return x.LocalExecutionChecksum
	}
	return ""
}

func (x *Policy) GetGraphExecutionChecksum() string {
	if x != nil {
		return x.GraphExecutionChecksum
	}
	return ""
}

func (x *Policy) GetComputedFilters() *explorer.Filters {
	if x != nil {
		return x.ComputedFilters
	}
	return nil
}

func (x *Policy) GetQueryCounts() *QueryCounts {
	if x != nil {
		return x.QueryCounts
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Policy `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Policies) GetItems() []*Policy {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoringCount int64 `protobuf:"varint,1,opt,name=scoring_count,json=scoringCount,proto3" json:"scoring_count,omitempty"`
	DataCount    int64 `protobuf:"varint,2,opt,name=data_count,json=dataCount,proto3" json:"data_count,omitempty"`
	TotalCount   int64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *QueryCounts) Reset() {
	*x = QueryCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCounts) ProtoMessage() {}

func (x *QueryCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCounts.ProtoReflect.Descriptor instead.
func (*QueryCounts) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCounts) GetScoringCount() int64 {
	if x != nil {
		return x.ScoringCount
	}
	return 0
}

func (x *QueryCounts) GetDataCount() int64 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *QueryCounts) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerMrn      string                `protobuf:"bytes,1,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Policies      []*Policy             `protobuf:"bytes,7,rep,name=policies,proto3" json:"policies,omitempty"`
	Packs         []*explorer.QueryPack `protobuf:"bytes,10,rep,name=packs,proto3" json:"packs,omitempty"`
	Props         []*explorer.Property  `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	Queries       []*explorer.Mquery    `protobuf:"bytes,6,rep,name=queries,proto3" json:"queries,omitempty"`
	Frameworks    []*Framework          `protobuf:"bytes,8,rep,name=frameworks,proto3" json:"frameworks,omitempty"`
	FrameworkMaps []*FrameworkMap       `protobuf:"bytes,9,rep,name=framework_maps,json=frameworkMaps,proto3" json:"framework_maps,omitempty"`
	Docs          *PolicyDocs           `protobuf:"bytes,5,opt,name=docs,proto3" json:"docs,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{5}
}

func (x *Bundle) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *Bundle) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Bundle) GetPacks() []*explorer.QueryPack {
	if x != nil {
		return x.Packs
	}
	return nil
}

func (x *Bundle) GetProps() []*explorer.Property {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Bundle) GetQueries() []*explorer.Mquery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Bundle) GetFrameworks() []*Framework {
	if x != nil {
		return x.Frameworks
	}
	return nil
}

func (x *Bundle) GetFrameworkMaps() []*FrameworkMap {
	if x != nil {
		return x.FrameworkMaps
	}
	return nil
}

func (x *Bundle) GetDocs() *PolicyDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

type SoftwareSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Methods to select software. Either:
	// 1. By PURL, omitted fields are treated as glibglob (*)
	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// 2. By MQL package data returned from a query
	MqlMrn string `protobuf:"bytes,5,opt,name=mql_mrn,json=mqlMrn,proto3" json:"mql_mrn,omitempty"`
}

func (x *SoftwareSelector) Reset() {
	*x = SoftwareSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareSelector) ProtoMessage() {}

func (x *SoftwareSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareSelector.ProtoReflect.Descriptor instead.
func (*SoftwareSelector) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{6}
}

func (x *SoftwareSelector) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SoftwareSelector) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SoftwareSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoftwareSelector) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SoftwareSelector) GetMqlMrn() string {
	if x != nil {
		return x.MqlMrn
	}
	return ""
}

type ResourceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResourceSelector) Reset() {
	*x = ResourceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSelector) ProtoMessage() {}

func (x *ResourceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSelector.ProtoReflect.Descriptor instead.
func (*ResourceSelector) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RiskMagnitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	IsToxic bool    `protobuf:"varint,2,opt,name=is_toxic,json=isToxic,proto3" json:"is_toxic,omitempty"`
}

func (x *RiskMagnitude) Reset() {
	*x = RiskMagnitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskMagnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskMagnitude) ProtoMessage() {}

func (x *RiskMagnitude) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskMagnitude.ProtoReflect.Descriptor instead.
func (*RiskMagnitude) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{8}
}

func (x *RiskMagnitude) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RiskMagnitude) GetIsToxic() bool {
	if x != nil {
		return x.IsToxic
	}
	return false
}

type RiskFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn      string          `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Uid      string          `protobuf:"bytes,36,opt,name=uid,proto3" json:"uid,omitempty"`
	Checksum string          `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Title    string          `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	Docs     *RiskFactorDocs `protobuf:"bytes,25,opt,name=docs,proto3" json:"docs,omitempty"`
	// filter for the assets this applies to
	Filters                 *explorer.Filters   `protobuf:"bytes,20,opt,name=filters,proto3" json:"filters,omitempty"`
	Checks                  []*explorer.Mquery  `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
	Scope                   ScopeType           `protobuf:"varint,70,opt,name=scope,proto3,enum=cnspec.policy.v1.ScopeType" json:"scope,omitempty"`
	DeprecatedV11Magnitude  float32             `protobuf:"fixed32,71,opt,name=deprecated_v11_magnitude,json=deprecatedV11Magnitude,proto3" json:"deprecated_v11_magnitude,omitempty"`
	DeprecatedV11IsAbsolute bool                `protobuf:"varint,72,opt,name=deprecated_v11_is_absolute,json=deprecatedV11IsAbsolute,proto3" json:"deprecated_v11_is_absolute,omitempty"`
	Magnitude               *RiskMagnitude      `protobuf:"bytes,76,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	Software                []*SoftwareSelector `protobuf:"bytes,73,rep,name=software,proto3" json:"software,omitempty"`
	Resources               []*ResourceSelector `protobuf:"bytes,74,rep,name=resources,proto3" json:"resources,omitempty"`
	// Risk Factor indicators are freely configurable. Currently we support:
	//
	// 1. Contextual risks
	//
	//   - Internet-facing asset   [internet-facing]
	//     Any assets that are facing the internet may be at risk of being breached
	//
	//   - Asset or service in use   [asset-in-use]
	//     Assets or services that are currently being used. If vulnerabilities
	//     are found on an asset in use, their priority is increased. However,
	//     vulnerabilities on an asset not in use may be reduced in priority.
	//
	//   - Exploitable vulnerabilities   [exploitable]
	//     Exploitable vulnerabilities are detected on the asset. These are more
	//     likely to lead to a breach.
	//
	//   - Code Execution risks   [code-execution]
	//     Vulnerabilities are detected which contain (remote) code executions.
	//     These can cause serious damage to other resources on the asset.
	//
	//   - End of life   [eol]
	//     The asset or some of its resources have reach their end of life and
	//     no longer receive security updates. Vulnerability analysis is
	//     unreliable and may not be actionable.
	//
	//   - Defensive countermeasures   [defensive]
	//     Defensive countermeasures have been detected on the asset. These may
	//     contain security modules, firewalls, or other mitigations.
	//
	// 2. Downstream exposure
	//
	//   - DB access   [db-access]
	//     Databases are downstream exposures that may hold valuable customer data
	//
	//   - User risks   [user-risk]
	//     Users, often with elevated privileges, that are at risk
	//
	//   - Sensitive data   [sensitive-data]
	//     The asset contains sensitivie data, which an attacker may access if
	//     they manage to breach it.
	//
	//   - Credential risks   [credentials]
	//     Credentials are found on the asset that attackers may use to elevate
	//     their privileges or breach other systems.
	//
	//   - Containers or Kubernetes   [containers]
	//     Containers or Kuberenetes environments are found ont he asset. Attackers
	//     may expand their attacks to these virtual systems.
	//
	// 3. Misc
	//
	//   - Tagged assets   [tagged]
	//     Tagged assets may be increased or decreased in priority, depending on
	//     a users' needs. For example: Critical production infrastructure may
	//     increase the risk of findings.
	//
	//   - Other risks   [uncategorized]
	//     This captures any other type of risk factor, that doesn't fit the above
	//     risk categories.
	Indicator string          `protobuf:"bytes,75,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Action    explorer.Action `protobuf:"varint,77,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
}

func (x *RiskFactor) Reset() {
	*x = RiskFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactor) ProtoMessage() {}

func (x *RiskFactor) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactor.ProtoReflect.Descriptor instead.
func (*RiskFactor) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{9}
}

func (x *RiskFactor) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *RiskFactor) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RiskFactor) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *RiskFactor) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RiskFactor) GetDocs() *RiskFactorDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *RiskFactor) GetFilters() *explorer.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RiskFactor) GetChecks() []*explorer.Mquery {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *RiskFactor) GetScope() ScopeType {
	if x != nil {
		return x.Scope
	}
	return ScopeType_UNSCOPED
}

func (x *RiskFactor) GetDeprecatedV11Magnitude() float32 {
	if x != nil {
		return x.DeprecatedV11Magnitude
	}
	return 0
}

func (x *RiskFactor) GetDeprecatedV11IsAbsolute() bool {
	if x != nil {
		return x.DeprecatedV11IsAbsolute
	}
	return false
}

func (x *RiskFactor) GetMagnitude() *RiskMagnitude {
	if x != nil {
		return x.Magnitude
	}
	return nil
}

func (x *RiskFactor) GetSoftware() []*SoftwareSelector {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *RiskFactor) GetResources() []*ResourceSelector {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RiskFactor) GetIndicator() string {
	if x != nil {
		return x.Indicator
	}
	return ""
}

func (x *RiskFactor) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

type RiskFactorDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active   string `protobuf:"bytes,1,opt,name=active,proto3" json:"active,omitempty"`
	Inactive string `protobuf:"bytes,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *RiskFactorDocs) Reset() {
	*x = RiskFactorDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactorDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactorDocs) ProtoMessage() {}

func (x *RiskFactorDocs) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactorDocs.ProtoReflect.Descriptor instead.
func (*RiskFactorDocs) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{10}
}

func (x *RiskFactorDocs) GetActive() string {
	if x != nil {
		return x.Active
	}
	return ""
}

func (x *RiskFactorDocs) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

type PolicyGroupDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc          string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Justification string `protobuf:"bytes,2,opt,name=justification,proto3" json:"justification,omitempty"`
}

func (x *PolicyGroupDocs) Reset() {
	*x = PolicyGroupDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupDocs) ProtoMessage() {}

func (x *PolicyGroupDocs) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupDocs.ProtoReflect.Descriptor instead.
func (*PolicyGroupDocs) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{11}
}

func (x *PolicyGroupDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PolicyGroupDocs) GetJustification() string {
	if x != nil {
		return x.Justification
	}
	return ""
}

type PolicyDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PolicyDocs) Reset() {
	*x = PolicyDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDocs) ProtoMessage() {}

func (x *PolicyDocs) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDocs.ProtoReflect.Descriptor instead.
func (*PolicyDocs) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type Framework struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn      string             `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`  // will be filled from UID on upload
	Uid      string             `protobuf:"bytes,36,opt,name=uid,proto3" json:"uid,omitempty"` // uid is only used initially to generate the MRN
	Name     string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OwnerMrn string             `protobuf:"bytes,8,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Groups   []*FrameworkGroup  `protobuf:"bytes,11,rep,name=groups,proto3" json:"groups,omitempty"`
	License  string             `protobuf:"bytes,21,opt,name=license,proto3" json:"license,omitempty"`
	Docs     *PolicyDocs        `protobuf:"bytes,41,opt,name=docs,proto3" json:"docs,omitempty"`
	Summary  string             `protobuf:"bytes,46,opt,name=summary,proto3" json:"summary,omitempty"`
	Authors  []*explorer.Author `protobuf:"bytes,30,rep,name=authors,proto3" json:"authors,omitempty"`
	Created  int64              `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified int64              `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
	Tags     map[string]string  `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// references to child frameworks that are applied directly
	Dependencies []*FrameworkRef `protobuf:"bytes,35,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// checksums are grouped into:
	// local... meaning this policy, not policy dependencies
	// graph... meaning this and all dependent policies
	// content... meaning all the content in the policy, everything there is
	// execution... meaning everything that changes the resolved policy
	LocalContentChecksum   string `protobuf:"bytes,37,opt,name=local_content_checksum,json=localContentChecksum,proto3" json:"local_content_checksum,omitempty"`
	GraphContentChecksum   string `protobuf:"bytes,38,opt,name=graph_content_checksum,json=graphContentChecksum,proto3" json:"graph_content_checksum,omitempty"`
	LocalExecutionChecksum string `protobuf:"bytes,39,opt,name=local_execution_checksum,json=localExecutionChecksum,proto3" json:"local_execution_checksum,omitempty"`
	GraphExecutionChecksum string `protobuf:"bytes,40,opt,name=graph_execution_checksum,json=graphExecutionChecksum,proto3" json:"graph_execution_checksum,omitempty"`
	// Framework maps describe how frameworks and controls map to
	// checks, policies, and other controls; auto-generated from embedded content.
	// This field is never directly exported back to YAML. Instead
	// framework maps are turned into top-level objects again.
	FrameworkMaps []*FrameworkMap `protobuf:"bytes,53,rep,name=framework_maps,json=frameworkMaps,proto3" json:"framework_maps,omitempty"`
}

func (x *Framework) Reset() {
	*x = Framework{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{13}
}

func (x *Framework) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Framework) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Framework) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Framework) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Framework) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *Framework) GetGroups() []*FrameworkGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Framework) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Framework) GetDocs() *PolicyDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Framework) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Framework) GetAuthors() []*explorer.Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Framework) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Framework) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Framework) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Framework) GetDependencies() []*FrameworkRef {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Framework) GetLocalContentChecksum() string {
	if x != nil {
		return x.LocalContentChecksum
	}
	return ""
}

func (x *Framework) GetGraphContentChecksum() string {
	if x != nil {
		return x.GraphContentChecksum
	}
	return ""
}

func (x *Framework) GetLocalExecutionChecksum() string {
	if x != nil {
		return x.LocalExecutionChecksum
	}
	return ""
}

func (x *Framework) GetGraphExecutionChecksum() string {
	if x != nil {
		return x.GraphExecutionChecksum
	}
	return ""
}

func (x *Framework) GetFrameworkMaps() []*FrameworkMap {
	if x != nil {
		return x.FrameworkMaps
	}
	return nil
}

type Frameworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Framework `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Frameworks) Reset() {
	*x = Frameworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frameworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frameworks) ProtoMessage() {}

func (x *Frameworks) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frameworks.ProtoReflect.Descriptor instead.
func (*Frameworks) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{14}
}

func (x *Frameworks) GetItems() []*Framework {
	if x != nil {
		return x.Items
	}
	return nil
}

type FrameworkGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controls []*Control `protobuf:"bytes,1,rep,name=controls,proto3" json:"controls,omitempty"`
	Type     GroupType  `protobuf:"varint,4,opt,name=type,proto3,enum=cnspec.policy.v1.GroupType" json:"type,omitempty"`
	Uid      string     `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// the timeline during which overrides are active and reminders will be sent
	StartDate int64 `protobuf:"varint,21,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// only applies to IGNORE action
	// empty is interpreted as "infinite"
	EndDate      int64 `protobuf:"varint,22,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ReminderDate int64 `protobuf:"varint,23,opt,name=reminder_date,json=reminderDate,proto3" json:"reminder_date,omitempty"`
	// metadata
	Title     string             `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	Docs      *PolicyGroupDocs   `protobuf:"bytes,25,opt,name=docs,proto3" json:"docs,omitempty"`
	Authors   []*explorer.Author `protobuf:"bytes,26,rep,name=authors,proto3" json:"authors,omitempty"`
	Reviewers []*explorer.Author `protobuf:"bytes,27,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
	// only applies to GroupType IGNORED/DISABLED
	// Only if status is REJECTED, we ignore the group
	// Which means that unapproved groups get handled as if they were approved
	ReviewStatus ReviewStatus `protobuf:"varint,28,opt,name=review_status,json=reviewStatus,proto3,enum=cnspec.policy.v1.ReviewStatus" json:"review_status,omitempty"`
	Created      int64        `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified     int64        `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *FrameworkGroup) Reset() {
	*x = FrameworkGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkGroup) ProtoMessage() {}

func (x *FrameworkGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkGroup.ProtoReflect.Descriptor instead.
func (*FrameworkGroup) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{15}
}

func (x *FrameworkGroup) GetControls() []*Control {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *FrameworkGroup) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_UNCATEGORIZED
}

func (x *FrameworkGroup) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FrameworkGroup) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *FrameworkGroup) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *FrameworkGroup) GetReminderDate() int64 {
	if x != nil {
		return x.ReminderDate
	}
	return 0
}

func (x *FrameworkGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FrameworkGroup) GetDocs() *PolicyGroupDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *FrameworkGroup) GetAuthors() []*explorer.Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *FrameworkGroup) GetReviewers() []*explorer.Author {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *FrameworkGroup) GetReviewStatus() ReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return ReviewStatus_NOT_REVIEWED
}

func (x *FrameworkGroup) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *FrameworkGroup) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

type FrameworkRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn    string          `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Uid    string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Action explorer.Action `protobuf:"varint,41,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
}

func (x *FrameworkRef) Reset() {
	*x = FrameworkRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkRef) ProtoMessage() {}

func (x *FrameworkRef) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkRef.ProtoReflect.Descriptor instead.
func (*FrameworkRef) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{16}
}

func (x *FrameworkRef) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *FrameworkRef) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FrameworkRef) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

// Represents evidence for a given compliance framework control.
type Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc     string             `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Uid      string             `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Mrn      string             `protobuf:"bytes,4,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Checks   []*explorer.Mquery `protobuf:"bytes,21,rep,name=checks,proto3" json:"checks,omitempty"`
	Queries  []*explorer.Mquery `protobuf:"bytes,22,rep,name=queries,proto3" json:"queries,omitempty"`
	Controls []*ControlRef      `protobuf:"bytes,23,rep,name=controls,proto3" json:"controls,omitempty"`
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{17}
}

func (x *Evidence) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Evidence) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Evidence) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Evidence) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Evidence) GetChecks() []*explorer.Mquery {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *Evidence) GetQueries() []*explorer.Mquery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Evidence) GetControls() []*ControlRef {
	if x != nil {
		return x.Controls
	}
	return nil
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Mrn      string `protobuf:"bytes,4,opt,name=mrn,proto3" json:"mrn,omitempty"`
	// UID is only needed on Mquery upload, when the MRN is computed.
	// It is not be persisted.
	Uid   string            `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Title string            `protobuf:"bytes,20,opt,name=title,proto3" json:"title,omitempty"`
	Docs  *ControlDocs      `protobuf:"bytes,21,opt,name=docs,proto3" json:"docs,omitempty"`
	Tags  map[string]string `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// actions applied to this control, only necessary for overrides
	Action   explorer.Action `protobuf:"varint,41,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
	Manual   bool            `protobuf:"varint,50,opt,name=manual,proto3" json:"manual,omitempty"` // indicates that this is a manual control
	Evidence []*Evidence     `protobuf:"bytes,51,rep,name=evidence,proto3" json:"evidence,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{18}
}

func (x *Control) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Control) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Control) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Control) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Control) GetDocs() *ControlDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Control) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Control) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

func (x *Control) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Control) GetEvidence() []*Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

type FrameworkMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn                    string                `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Uid                    string                `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	FrameworkDependencies  []*explorer.ObjectRef `protobuf:"bytes,3,rep,name=framework_dependencies,json=frameworkDependencies,proto3" json:"framework_dependencies,omitempty"`
	PolicyDependencies     []*explorer.ObjectRef `protobuf:"bytes,4,rep,name=policy_dependencies,json=policyDependencies,proto3" json:"policy_dependencies,omitempty"`
	QueryPackDependencies  []*explorer.ObjectRef `protobuf:"bytes,6,rep,name=query_pack_dependencies,json=queryPackDependencies,proto3" json:"query_pack_dependencies,omitempty"`
	Controls               []*ControlMap         `protobuf:"bytes,5,rep,name=controls,proto3" json:"controls,omitempty"`
	FrameworkOwner         *explorer.ObjectRef   `protobuf:"bytes,20,opt,name=framework_owner,json=frameworkOwner,proto3" json:"framework_owner,omitempty"`
	LocalContentChecksum   string                `protobuf:"bytes,21,opt,name=local_content_checksum,json=localContentChecksum,proto3" json:"local_content_checksum,omitempty"`
	LocalExecutionChecksum string                `protobuf:"bytes,22,opt,name=local_execution_checksum,json=localExecutionChecksum,proto3" json:"local_execution_checksum,omitempty"`
}

func (x *FrameworkMap) Reset() {
	*x = FrameworkMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkMap) ProtoMessage() {}

func (x *FrameworkMap) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkMap.ProtoReflect.Descriptor instead.
func (*FrameworkMap) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{19}
}

func (x *FrameworkMap) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *FrameworkMap) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FrameworkMap) GetFrameworkDependencies() []*explorer.ObjectRef {
	if x != nil {
		return x.FrameworkDependencies
	}
	return nil
}

func (x *FrameworkMap) GetPolicyDependencies() []*explorer.ObjectRef {
	if x != nil {
		return x.PolicyDependencies
	}
	return nil
}

func (x *FrameworkMap) GetQueryPackDependencies() []*explorer.ObjectRef {
	if x != nil {
		return x.QueryPackDependencies
	}
	return nil
}

func (x *FrameworkMap) GetControls() []*ControlMap {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *FrameworkMap) GetFrameworkOwner() *explorer.ObjectRef {
	if x != nil {
		return x.FrameworkOwner
	}
	return nil
}

func (x *FrameworkMap) GetLocalContentChecksum() string {
	if x != nil {
		return x.LocalContentChecksum
	}
	return ""
}

func (x *FrameworkMap) GetLocalExecutionChecksum() string {
	if x != nil {
		return x.LocalExecutionChecksum
	}
	return ""
}

type ControlMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string        `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Mrn      string        `protobuf:"bytes,4,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Checks   []*ControlRef `protobuf:"bytes,7,rep,name=checks,proto3" json:"checks,omitempty"`
	Policies []*ControlRef `protobuf:"bytes,8,rep,name=policies,proto3" json:"policies,omitempty"`
	Controls []*ControlRef `protobuf:"bytes,9,rep,name=controls,proto3" json:"controls,omitempty"`
	Queries  []*ControlRef `protobuf:"bytes,10,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ControlMap) Reset() {
	*x = ControlMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMap) ProtoMessage() {}

func (x *ControlMap) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMap.ProtoReflect.Descriptor instead.
func (*ControlMap) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{20}
}

func (x *ControlMap) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ControlMap) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *ControlMap) GetChecks() []*ControlRef {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *ControlMap) GetPolicies() []*ControlRef {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ControlMap) GetControls() []*ControlRef {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *ControlMap) GetQueries() []*ControlRef {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ControlDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string                `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Refs []*explorer.MqueryRef `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *ControlDocs) Reset() {
	*x = ControlDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDocs) ProtoMessage() {}

func (x *ControlDocs) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDocs.ProtoReflect.Descriptor instead.
func (*ControlDocs) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{21}
}

func (x *ControlDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ControlDocs) GetRefs() []*explorer.MqueryRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

type ControlRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn    string          `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Uid    string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Action explorer.Action `protobuf:"varint,41,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
}

func (x *ControlRef) Reset() {
	*x = ControlRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlRef) ProtoMessage() {}

func (x *ControlRef) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlRef.ProtoReflect.Descriptor instead.
func (*ControlRef) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{22}
}

func (x *ControlRef) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *ControlRef) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ControlRef) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

// Asset is a lean layer of information about an asset
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn      string              `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Name     string              `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Url      string              `protobuf:"bytes,19,opt,name=url,proto3" json:"url,omitempty"`
	Platform *inventory.Platform `protobuf:"bytes,21,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{23}
}

func (x *Asset) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Asset) GetPlatform() *inventory.Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

// Once a policy has been                     , it can easily be retrieved.
// We will store the different ways in which policies are resolved in the DB
// for fast retrieval.
type ResolvedPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionJob           *ExecutionJob      `protobuf:"bytes,2,opt,name=execution_job,json=executionJob,proto3" json:"execution_job,omitempty"`
	CollectorJob           *CollectorJob      `protobuf:"bytes,3,opt,name=collector_job,json=collectorJob,proto3" json:"collector_job,omitempty"`
	Filters                []*explorer.Mquery `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	GraphExecutionChecksum string             `protobuf:"bytes,7,opt,name=graph_execution_checksum,json=graphExecutionChecksum,proto3" json:"graph_execution_checksum,omitempty"`
	FiltersChecksum        string             `protobuf:"bytes,20,opt,name=filters_checksum,json=filtersChecksum,proto3" json:"filters_checksum,omitempty"`
	ReportingJobUuid       string             `protobuf:"bytes,21,opt,name=reporting_job_uuid,json=reportingJobUuid,proto3" json:"reporting_job_uuid,omitempty"`
}

func (x *ResolvedPolicy) Reset() {
	*x = ResolvedPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedPolicy) ProtoMessage() {}

func (x *ResolvedPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedPolicy.ProtoReflect.Descriptor instead.
func (*ResolvedPolicy) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{24}
}

func (x *ResolvedPolicy) GetExecutionJob() *ExecutionJob {
	if x != nil {
		return x.ExecutionJob
	}
	return nil
}

func (x *ResolvedPolicy) GetCollectorJob() *CollectorJob {
	if x != nil {
		return x.CollectorJob
	}
	return nil
}

func (x *ResolvedPolicy) GetFilters() []*explorer.Mquery {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ResolvedPolicy) GetGraphExecutionChecksum() string {
	if x != nil {
		return x.GraphExecutionChecksum
	}
	return ""
}

func (x *ResolvedPolicy) GetFiltersChecksum() string {
	if x != nil {
		return x.FiltersChecksum
	}
	return ""
}

func (x *ResolvedPolicy) GetReportingJobUuid() string {
	if x != nil {
		return x.ReportingJobUuid
	}
	return ""
}

// The list of queries that an asset needs to execute
// May be identical amongst multiple individual policies
// - Checksum helps deduplicate this job
// - Queries have a map from query checksum to query query contents
type ExecutionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// map of all queries that should be executed, checksum => query
	Queries map[string]*ExecutionQuery `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionJob) Reset() {
	*x = ExecutionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionJob) ProtoMessage() {}

func (x *ExecutionJob) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionJob.ProtoReflect.Descriptor instead.
func (*ExecutionJob) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{25}
}

func (x *ExecutionJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ExecutionJob) GetQueries() map[string]*ExecutionQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// A query which is part of an ExecutionJob
// Reduced to the bare minimum for the execution
type ExecutionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// mapping from name => datapoint checksum, which is in the execution job
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// list of checksums that we collect as data points
	Datapoints []string        `protobuf:"bytes,4,rep,name=datapoints,proto3" json:"datapoints,omitempty"`
	Code       *llx.CodeBundle `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecutionQuery) Reset() {
	*x = ExecutionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionQuery) ProtoMessage() {}

func (x *ExecutionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionQuery.ProtoReflect.Descriptor instead.
func (*ExecutionQuery) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{26}
}

func (x *ExecutionQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecutionQuery) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ExecutionQuery) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExecutionQuery) GetDatapoints() []string {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

func (x *ExecutionQuery) GetCode() *llx.CodeBundle {
	if x != nil {
		return x.Code
	}
	return nil
}

// The scoring job used by the collector, to know what happens with all
// individual scores that the asset sends.
// - Checksum helps deduplicate this job
// - Every score points to a reporting job
// - For optimization, assets may have multiple scoring jobs
type CollectorJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// links incoming score/query-checksum to reporting job
	ReportingJobs map[string]*ReportingJob `protobuf:"bytes,2,rep,name=reporting_jobs,json=reportingJobs,proto3" json:"reporting_jobs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps a query checksum (llx) to a list of query objects (uuid)
	ReportingQueries map[string]*StringArray `protobuf:"bytes,3,rep,name=reporting_queries,json=reportingQueries,proto3" json:"reporting_queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps a query datapoint checksum (llx) to its type and reporting jobs (uuids)
	Datapoints map[string]*DataQueryInfo `protobuf:"bytes,4,rep,name=datapoints,proto3" json:"datapoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps a query checksum (llx) to a list of risk MRNs it belongs to
	RiskMrns map[string]*StringArray `protobuf:"bytes,5,rep,name=risk_mrns,json=riskMrns,proto3" json:"risk_mrns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// risk factors with only limited fields necessary for the collector
	RiskFactors map[string]*RiskFactor `protobuf:"bytes,6,rep,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectorJob) Reset() {
	*x = CollectorJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorJob) ProtoMessage() {}

func (x *CollectorJob) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorJob.ProtoReflect.Descriptor instead.
func (*CollectorJob) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{27}
}

func (x *CollectorJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *CollectorJob) GetReportingJobs() map[string]*ReportingJob {
	if x != nil {
		return x.ReportingJobs
	}
	return nil
}

func (x *CollectorJob) GetReportingQueries() map[string]*StringArray {
	if x != nil {
		return x.ReportingQueries
	}
	return nil
}

func (x *CollectorJob) GetDatapoints() map[string]*DataQueryInfo {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

func (x *CollectorJob) GetRiskMrns() map[string]*StringArray {
	if x != nil {
		return x.RiskMrns
	}
	return nil
}

func (x *CollectorJob) GetRiskFactors() map[string]*RiskFactor {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{28}
}

func (x *StringArray) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type DataQueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Notify []string `protobuf:"bytes,2,rep,name=notify,proto3" json:"notify,omitempty"`
}

func (x *DataQueryInfo) Reset() {
	*x = DataQueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQueryInfo) ProtoMessage() {}

func (x *DataQueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQueryInfo.ProtoReflect.Descriptor instead.
func (*DataQueryInfo) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{29}
}

func (x *DataQueryInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataQueryInfo) GetNotify() []string {
	if x != nil {
		return x.Notify
	}
	return nil
}

// Reporting jobs help build reports from all the scores they receive
// 1. When a query score arrives, it is first reported to the CollectorJob.
// 2. It picks the first reportingJob and fills the result in, no additional
// specs need to be called. However, it notifies all other reporting jobs.
// 3. Once a notified reporting job runs, it looks at alal the specs and collects
// their values and scores them. Repeat this step for all notified reports.
// - uuid specifies the query or policy
// - spec has all the other results that need to be pulled and their scorings
type ReportingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXME: DEPRECATED, remove in v10.0 vv
	// This is replaced by the new type field, which now carries more info
	DeprecatedV8IsData bool                        `protobuf:"varint,8,opt,name=deprecated_v8_is_data,json=deprecatedV8IsData,proto3" json:"deprecated_v8_is_data,omitempty"` // ^^
	Checksum           string                      `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	QrId               string                      `protobuf:"bytes,2,opt,name=qr_id,json=qrId,proto3" json:"qr_id,omitempty"`
	Uuid               string                      `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Notify             []string                    `protobuf:"bytes,5,rep,name=notify,proto3" json:"notify,omitempty"`
	ScoringSystem      explorer.ScoringSystem      `protobuf:"varint,6,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnquery.explorer.ScoringSystem" json:"scoring_system,omitempty"`
	Datapoints         map[string]bool             `protobuf:"bytes,7,rep,name=datapoints,proto3" json:"datapoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChildJobs          map[string]*explorer.Impact `protobuf:"bytes,9,rep,name=child_jobs,json=childJobs,proto3" json:"child_jobs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type               ReportingJob_Type           `protobuf:"varint,10,opt,name=type,proto3,enum=cnspec.policy.v1.ReportingJob_Type" json:"type,omitempty"`
	// The MRNs of all the checks/queries this reporting job represents
	Mrns []string `protobuf:"bytes,11,rep,name=mrns,proto3" json:"mrns,omitempty"`
}

func (x *ReportingJob) Reset() {
	*x = ReportingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingJob) ProtoMessage() {}

func (x *ReportingJob) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingJob.ProtoReflect.Descriptor instead.
func (*ReportingJob) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{30}
}

func (x *ReportingJob) GetDeprecatedV8IsData() bool {
	if x != nil {
		return x.DeprecatedV8IsData
	}
	return false
}

func (x *ReportingJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ReportingJob) GetQrId() string {
	if x != nil {
		return x.QrId
	}
	return ""
}

func (x *ReportingJob) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReportingJob) GetNotify() []string {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *ReportingJob) GetScoringSystem() explorer.ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return explorer.ScoringSystem(0)
}

func (x *ReportingJob) GetDatapoints() map[string]bool {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

func (x *ReportingJob) GetChildJobs() map[string]*explorer.Impact {
	if x != nil {
		return x.ChildJobs
	}
	return nil
}

func (x *ReportingJob) GetType() ReportingJob_Type {
	if x != nil {
		return x.Type
	}
	return ReportingJob_UNSPECIFIED
}

func (x *ReportingJob) GetMrns() []string {
	if x != nil {
		return x.Mrns
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoringMrn            string                 `protobuf:"bytes,1,opt,name=scoring_mrn,json=scoringMrn,proto3" json:"scoring_mrn,omitempty"`
	EntityMrn             string                 `protobuf:"bytes,2,opt,name=entity_mrn,json=entityMrn,proto3" json:"entity_mrn,omitempty"`
	Score                 *Score                 `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Scores                map[string]*Score      `protobuf:"bytes,4,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                  map[string]*llx.Result `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stats                 *Stats                 `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Risks                 *ScoredRiskFactors     `protobuf:"bytes,7,opt,name=risks,proto3" json:"risks,omitempty"`
	Created               int64                  `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Modified              int64                  `protobuf:"varint,21,opt,name=modified,proto3" json:"modified,omitempty"`
	IgnoredStats          *Stats                 `protobuf:"bytes,22,opt,name=ignored_stats,json=ignoredStats,proto3" json:"ignored_stats,omitempty"`
	CvssScore             *Cvss                  `protobuf:"bytes,30,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	CvssScores            map[string]*Cvss       `protobuf:"bytes,31,rep,name=cvss_scores,json=cvssScores,proto3" json:"cvss_scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CvssStats             *CvssStats             `protobuf:"bytes,32,opt,name=cvss_stats,json=cvssStats,proto3" json:"cvss_stats,omitempty"`
	ResolvedPolicyVersion string                 `protobuf:"bytes,33,opt,name=resolved_policy_version,json=resolvedPolicyVersion,proto3" json:"resolved_policy_version,omitempty"`
	Url                   string                 `protobuf:"bytes,34,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{31}
}

func (x *Report) GetScoringMrn() string {
	if x != nil {
		return x.ScoringMrn
	}
	return ""
}

func (x *Report) GetEntityMrn() string {
	if x != nil {
		return x.EntityMrn
	}
	return ""
}

func (x *Report) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *Report) GetScores() map[string]*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Report) GetData() map[string]*llx.Result {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Report) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Report) GetRisks() *ScoredRiskFactors {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *Report) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Report) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Report) GetIgnoredStats() *Stats {
	if x != nil {
		return x.IgnoredStats
	}
	return nil
}

func (x *Report) GetCvssScore() *Cvss {
	if x != nil {
		return x.CvssScore
	}
	return nil
}

func (x *Report) GetCvssScores() map[string]*Cvss {
	if x != nil {
		return x.CvssScores
	}
	return nil
}

func (x *Report) GetCvssStats() *CvssStats {
	if x != nil {
		return x.CvssStats
	}
	return nil
}

func (x *Report) GetResolvedPolicyVersion() string {
	if x != nil {
		return x.ResolvedPolicyVersion
	}
	return ""
}

func (x *Report) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Reports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *Reports) Reset() {
	*x = Reports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reports) ProtoMessage() {}

func (x *Reports) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reports.ProtoReflect.Descriptor instead.
func (*Reports) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{32}
}

func (x *Reports) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ReportCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets           map[string]*inventory.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bundle           *Bundle                     `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Reports          map[string]*Report          `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors           map[string]string           `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResolvedPolicies map[string]*ResolvedPolicy  `protobuf:"bytes,5,rep,name=resolved_policies,json=resolvedPolicies,proto3" json:"resolved_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VulnReports      map[string]*mvd.VulnReport  `protobuf:"bytes,6,rep,name=vuln_reports,json=vulnReports,proto3" json:"vuln_reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportCollection) Reset() {
	*x = ReportCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCollection) ProtoMessage() {}

func (x *ReportCollection) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCollection.ProtoReflect.Descriptor instead.
func (*ReportCollection) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{33}
}

func (x *ReportCollection) GetAssets() map[string]*inventory.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ReportCollection) GetBundle() *Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ReportCollection) GetReports() map[string]*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ReportCollection) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ReportCollection) GetResolvedPolicies() map[string]*ResolvedPolicy {
	if x != nil {
		return x.ResolvedPolicies
	}
	return nil
}

func (x *ReportCollection) GetVulnReports() map[string]*mvd.VulnReport {
	if x != nil {
		return x.VulnReports
	}
	return nil
}

type FrameworkReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoringMrn string          `protobuf:"bytes,1,opt,name=scoring_mrn,json=scoringMrn,proto3" json:"scoring_mrn,omitempty"`
	EntityMrn  string          `protobuf:"bytes,2,opt,name=entity_mrn,json=entityMrn,proto3" json:"entity_mrn,omitempty"`
	Score      *ControlScore   `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Controls   []*ControlScore `protobuf:"bytes,4,rep,name=controls,proto3" json:"controls,omitempty"`
}

func (x *FrameworkReport) Reset() {
	*x = FrameworkReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkReport) ProtoMessage() {}

func (x *FrameworkReport) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkReport.ProtoReflect.Descriptor instead.
func (*FrameworkReport) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{34}
}

func (x *FrameworkReport) GetScoringMrn() string {
	if x != nil {
		return x.ScoringMrn
	}
	return ""
}

func (x *FrameworkReport) GetEntityMrn() string {
	if x != nil {
		return x.EntityMrn
	}
	return ""
}

func (x *FrameworkReport) GetScore() *ControlScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *FrameworkReport) GetControls() []*ControlScore {
	if x != nil {
		return x.Controls
	}
	return nil
}

type ControlScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn        string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Completion uint32 `protobuf:"varint,2,opt,name=completion,proto3" json:"completion,omitempty"` // completion of the control in %; 100% = passed
	Compliant  uint32 `protobuf:"varint,3,opt,name=compliant,proto3" json:"compliant,omitempty"`   // # of compliant referenced scores (checks/policies)
	Failed     uint32 `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`         // # of failed referenced scores (checks/policies)
	Total      uint32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`           // # of referenced scores (checks/policies)
	// total - compliant - failed = remaining exceptions, skipped or disabled
	AssetCount           uint32               `protobuf:"varint,6,opt,name=asset_count,json=assetCount,proto3" json:"asset_count,omitempty"`                                 // # of assets reporting into this score
	CompliantAssetsCount uint32               `protobuf:"varint,9,opt,name=compliant_assets_count,json=compliantAssetsCount,proto3" json:"compliant_assets_count,omitempty"` // # of compliant assets
	FailedAssetsCount    uint32               `protobuf:"varint,10,opt,name=failed_assets_count,json=failedAssetsCount,proto3" json:"failed_assets_count,omitempty"`         // # of non-compliant assets
	Assets               []*ControlScore      `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`                                                            // control score for each asset
	Scores               []*ScoreDistribution `protobuf:"bytes,8,rep,name=scores,proto3" json:"scores,omitempty"`                                                            // referenced scores (checks/policies)
	Manual               uint32               `protobuf:"varint,20,opt,name=manual,proto3" json:"manual,omitempty"`                                                          // # of manual controls that report into this score
}

func (x *ControlScore) Reset() {
	*x = ControlScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlScore) ProtoMessage() {}

func (x *ControlScore) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlScore.ProtoReflect.Descriptor instead.
func (*ControlScore) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{35}
}

func (x *ControlScore) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *ControlScore) GetCompletion() uint32 {
	if x != nil {
		return x.Completion
	}
	return 0
}

func (x *ControlScore) GetCompliant() uint32 {
	if x != nil {
		return x.Compliant
	}
	return 0
}

func (x *ControlScore) GetFailed() uint32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ControlScore) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ControlScore) GetAssetCount() uint32 {
	if x != nil {
		return x.AssetCount
	}
	return 0
}

func (x *ControlScore) GetCompliantAssetsCount() uint32 {
	if x != nil {
		return x.CompliantAssetsCount
	}
	return 0
}

func (x *ControlScore) GetFailedAssetsCount() uint32 {
	if x != nil {
		return x.FailedAssetsCount
	}
	return 0
}

func (x *ControlScore) GetAssets() []*ControlScore {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ControlScore) GetScores() []*ScoreDistribution {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ControlScore) GetManual() uint32 {
	if x != nil {
		return x.Manual
	}
	return 0
}

// Cvss scores are specific to CVEs
type Cvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Score    int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Vector   string `protobuf:"bytes,4,opt,name=vector,proto3" json:"vector,omitempty"`
	Source   string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Cvss) Reset() {
	*x = Cvss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cvss) ProtoMessage() {}

func (x *Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cvss.ProtoReflect.Descriptor instead.
func (*Cvss) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{36}
}

func (x *Cvss) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cvss) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Cvss) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Cvss) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *Cvss) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type CvssStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Critical uint32 `protobuf:"varint,2,opt,name=critical,proto3" json:"critical,omitempty"` // 9.0 <= .. <= 10.0
	High     uint32 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`         // 7.0 <= .. < 9.0
	Medium   uint32 `protobuf:"varint,4,opt,name=medium,proto3" json:"medium,omitempty"`     // 4.0 <= .. < 7.0
	Low      uint32 `protobuf:"varint,5,opt,name=low,proto3" json:"low,omitempty"`           // 0.0 < .. < 4.0
	None     uint32 `protobuf:"varint,6,opt,name=none,proto3" json:"none,omitempty"`         // 0.0
	Unscored uint32 `protobuf:"varint,7,opt,name=unscored,proto3" json:"unscored,omitempty"` // no value
	Worst    uint32 `protobuf:"varint,8,opt,name=worst,proto3" json:"worst,omitempty"`
}

func (x *CvssStats) Reset() {
	*x = CvssStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvssStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvssStats) ProtoMessage() {}

func (x *CvssStats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvssStats.ProtoReflect.Descriptor instead.
func (*CvssStats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{37}
}

func (x *CvssStats) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CvssStats) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *CvssStats) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *CvssStats) GetMedium() uint32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *CvssStats) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *CvssStats) GetNone() uint32 {
	if x != nil {
		return x.None
	}
	return 0
}

func (x *CvssStats) GetUnscored() uint32 {
	if x != nil {
		return x.Unscored
	}
	return 0
}

func (x *CvssStats) GetWorst() uint32 {
	if x != nil {
		return x.Worst
	}
	return 0
}

// Scores are numeric values with weith that provide a summary about the asset
type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskScore       uint32 `protobuf:"varint,1,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	QrId            string `protobuf:"bytes,2,opt,name=qr_id,json=qrId,proto3" json:"qr_id,omitempty"`
	Type            uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Value           uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Weight          uint32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	ScoreCompletion uint32 `protobuf:"varint,5,opt,name=score_completion,json=scoreCompletion,proto3" json:"score_completion,omitempty"`
	DataTotal       uint32 `protobuf:"varint,9,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	DataCompletion  uint32 `protobuf:"varint,6,opt,name=data_completion,json=dataCompletion,proto3" json:"data_completion,omitempty"`
	Message         string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// captures the timestamp when the score value was last modified
	ValueModifiedTime int64 `protobuf:"varint,10,opt,name=value_modified_time,json=valueModifiedTime,proto3" json:"value_modified_time,omitempty"`
	// captures when the score first failed (non-100 value)
	// a value of 0 indicates that this field is not set
	FailureTime int64 `protobuf:"varint,11,opt,name=failure_time,json=failureTime,proto3" json:"failure_time,omitempty"`
	// risk factors that were applied to this score
	RiskFactors *ScoredRiskFactors `protobuf:"bytes,12,opt,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{38}
}

func (x *Score) GetRiskScore() uint32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *Score) GetQrId() string {
	if x != nil {
		return x.QrId
	}
	return ""
}

func (x *Score) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Score) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Score) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Score) GetScoreCompletion() uint32 {
	if x != nil {
		return x.ScoreCompletion
	}
	return 0
}

func (x *Score) GetDataTotal() uint32 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *Score) GetDataCompletion() uint32 {
	if x != nil {
		return x.DataCompletion
	}
	return 0
}

func (x *Score) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Score) GetValueModifiedTime() int64 {
	if x != nil {
		return x.ValueModifiedTime
	}
	return 0
}

func (x *Score) GetFailureTime() int64 {
	if x != nil {
		return x.FailureTime
	}
	return 0
}

func (x *Score) GetRiskFactors() *ScoredRiskFactors {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

type ScoreDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskScore uint32 `protobuf:"varint,1,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	QrId      string `protobuf:"bytes,2,opt,name=qr_id,json=qrId,proto3" json:"qr_id,omitempty"`
	Type      uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Weight    uint32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Time      int64  `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ScoreDelta) Reset() {
	*x = ScoreDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreDelta) ProtoMessage() {}

func (x *ScoreDelta) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreDelta.ProtoReflect.Descriptor instead.
func (*ScoreDelta) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{39}
}

func (x *ScoreDelta) GetRiskScore() uint32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *ScoreDelta) GetQrId() string {
	if x != nil {
		return x.QrId
	}
	return ""
}

func (x *ScoreDelta) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ScoreDelta) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ScoreDelta) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ScoredRiskFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn        string  `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Risk       float32 `protobuf:"fixed32,2,opt,name=risk,proto3" json:"risk,omitempty"`
	IsToxic    bool    `protobuf:"varint,3,opt,name=is_toxic,json=isToxic,proto3" json:"is_toxic,omitempty"`
	IsDetected bool    `protobuf:"varint,4,opt,name=is_detected,json=isDetected,proto3" json:"is_detected,omitempty"`
}

func (x *ScoredRiskFactor) Reset() {
	*x = ScoredRiskFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredRiskFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredRiskFactor) ProtoMessage() {}

func (x *ScoredRiskFactor) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredRiskFactor.ProtoReflect.Descriptor instead.
func (*ScoredRiskFactor) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{40}
}

func (x *ScoredRiskFactor) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *ScoredRiskFactor) GetRisk() float32 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *ScoredRiskFactor) GetIsToxic() bool {
	if x != nil {
		return x.IsToxic
	}
	return false
}

func (x *ScoredRiskFactor) GetIsDetected() bool {
	if x != nil {
		return x.IsDetected
	}
	return false
}

type ScoredRiskFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ScoredRiskFactor `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ScoredRiskFactors) Reset() {
	*x = ScoredRiskFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredRiskFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredRiskFactors) ProtoMessage() {}

func (x *ScoredRiskFactors) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredRiskFactors.ProtoReflect.Descriptor instead.
func (*ScoredRiskFactors) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{41}
}

func (x *ScoredRiskFactors) GetItems() []*ScoredRiskFactor {
	if x != nil {
		return x.Items
	}
	return nil
}

type RiskFactorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn       string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Affected  uint64 `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
	Total     uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Indicator string `protobuf:"bytes,4,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Title     string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *RiskFactorStats) Reset() {
	*x = RiskFactorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactorStats) ProtoMessage() {}

func (x *RiskFactorStats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactorStats.ProtoReflect.Descriptor instead.
func (*RiskFactorStats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{42}
}

func (x *RiskFactorStats) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *RiskFactorStats) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

func (x *RiskFactorStats) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RiskFactorStats) GetIndicator() string {
	if x != nil {
		return x.Indicator
	}
	return ""
}

func (x *RiskFactorStats) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RiskFactorsStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RiskFactorStats `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RiskFactorsStats) Reset() {
	*x = RiskFactorsStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactorsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactorsStats) ProtoMessage() {}

func (x *RiskFactorsStats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactorsStats.ProtoReflect.Descriptor instead.
func (*RiskFactorsStats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{43}
}

func (x *RiskFactorsStats) GetItems() []*RiskFactorStats {
	if x != nil {
		return x.Items
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      uint32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Incomplete uint32             `protobuf:"varint,8,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	Skipped    uint32             `protobuf:"varint,10,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Worst      uint32             `protobuf:"varint,11,opt,name=worst,proto3" json:"worst,omitempty"`
	Unknown    uint32             `protobuf:"varint,12,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Failed     *ScoreDistribution `protobuf:"bytes,14,opt,name=failed,proto3" json:"failed,omitempty"`
	Passed     *ScoreDistribution `protobuf:"bytes,15,opt,name=passed,proto3" json:"passed,omitempty"`
	Errors     *ScoreDistribution `protobuf:"bytes,16,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{44}
}

func (x *Stats) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Stats) GetIncomplete() uint32 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

func (x *Stats) GetSkipped() uint32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *Stats) GetWorst() uint32 {
	if x != nil {
		return x.Worst
	}
	return 0
}

func (x *Stats) GetUnknown() uint32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *Stats) GetFailed() *ScoreDistribution {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Stats) GetPassed() *ScoreDistribution {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *Stats) GetErrors() *ScoreDistribution {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ScoreDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	A       uint32 `protobuf:"varint,2,opt,name=a,proto3" json:"a,omitempty"`
	B       uint32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	C       uint32 `protobuf:"varint,4,opt,name=c,proto3" json:"c,omitempty"`
	D       uint32 `protobuf:"varint,5,opt,name=d,proto3" json:"d,omitempty"`
	F       uint32 `protobuf:"varint,6,opt,name=f,proto3" json:"f,omitempty"`
	Error   uint32 `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
	Unrated uint32 `protobuf:"varint,8,opt,name=unrated,proto3" json:"unrated,omitempty"`
}

func (x *ScoreDistribution) Reset() {
	*x = ScoreDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreDistribution) ProtoMessage() {}

func (x *ScoreDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreDistribution.ProtoReflect.Descriptor instead.
func (*ScoreDistribution) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{45}
}

func (x *ScoreDistribution) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ScoreDistribution) GetA() uint32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *ScoreDistribution) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *ScoreDistribution) GetC() uint32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *ScoreDistribution) GetD() uint32 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *ScoreDistribution) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *ScoreDistribution) GetError() uint32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ScoreDistribution) GetUnrated() uint32 {
	if x != nil {
		return x.Unrated
	}
	return 0
}

type ScoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assets in the top groups of stats. For the total number of assets in the
	// stats just add up all the categories.
	Assets uint64 `protobuf:"varint,1,opt,name=assets,proto3" json:"assets,omitempty"`
	// Critical findings
	Critical uint64 `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
	// High risk findings
	High uint64 `protobuf:"varint,4,opt,name=high,proto3" json:"high,omitempty"`
	// Medium risk findings
	Medium uint64 `protobuf:"varint,5,opt,name=medium,proto3" json:"medium,omitempty"`
	// Low risks findings
	Low uint64 `protobuf:"varint,6,opt,name=low,proto3" json:"low,omitempty"`
	// Passing observations
	Pass uint64 `protobuf:"varint,7,opt,name=pass,proto3" json:"pass,omitempty"`
	// Unknown results
	Unknown uint64 `protobuf:"varint,8,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// Error results
	Error uint64 `protobuf:"varint,9,opt,name=error,proto3" json:"error,omitempty"`
	// First time a failure was detected
	FirstFailureTime int64 `protobuf:"varint,10,opt,name=first_failure_time,json=firstFailureTime,proto3" json:"first_failure_time,omitempty"`
	// Oldest scan in the set of assets observed
	OldestScanTime int64 `protobuf:"varint,11,opt,name=oldest_scan_time,json=oldestScanTime,proto3" json:"oldest_scan_time,omitempty"`
	// Newest scan in the set of assets observed
	NewestScanTime int64 `protobuf:"varint,12,opt,name=newest_scan_time,json=newestScanTime,proto3" json:"newest_scan_time,omitempty"`
}

func (x *ScoreStats) Reset() {
	*x = ScoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreStats) ProtoMessage() {}

func (x *ScoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreStats.ProtoReflect.Descriptor instead.
func (*ScoreStats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{46}
}

func (x *ScoreStats) GetAssets() uint64 {
	if x != nil {
		return x.Assets
	}
	return 0
}

func (x *ScoreStats) GetCritical() uint64 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *ScoreStats) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ScoreStats) GetMedium() uint64 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ScoreStats) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ScoreStats) GetPass() uint64 {
	if x != nil {
		return x.Pass
	}
	return 0
}

func (x *ScoreStats) GetUnknown() uint64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *ScoreStats) GetError() uint64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ScoreStats) GetFirstFailureTime() int64 {
	if x != nil {
		return x.FirstFailureTime
	}
	return 0
}

func (x *ScoreStats) GetOldestScanTime() int64 {
	if x != nil {
		return x.OldestScanTime
	}
	return 0
}

func (x *ScoreStats) GetNewestScanTime() int64 {
	if x != nil {
		return x.NewestScanTime
	}
	return 0
}

type AssetFindingsStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset       string            `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Finding     string            `protobuf:"bytes,2,opt,name=finding,proto3" json:"finding,omitempty"`
	BaseScore   uint32            `protobuf:"varint,3,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
	RiskScore   uint32            `protobuf:"varint,4,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	Weight      float32           `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	ScoreStats  *ScoreStats       `protobuf:"bytes,6,opt,name=score_stats,json=scoreStats,proto3" json:"score_stats,omitempty"`
	RiskFactors *RiskFactorsStats `protobuf:"bytes,7,opt,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty"`
}

func (x *AssetFindingsStats) Reset() {
	*x = AssetFindingsStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetFindingsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetFindingsStats) ProtoMessage() {}

func (x *AssetFindingsStats) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetFindingsStats.ProtoReflect.Descriptor instead.
func (*AssetFindingsStats) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{47}
}

func (x *AssetFindingsStats) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AssetFindingsStats) GetFinding() string {
	if x != nil {
		return x.Finding
	}
	return ""
}

func (x *AssetFindingsStats) GetBaseScore() uint32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *AssetFindingsStats) GetRiskScore() uint32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *AssetFindingsStats) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AssetFindingsStats) GetScoreStats() *ScoreStats {
	if x != nil {
		return x.ScoreStats
	}
	return nil
}

func (x *AssetFindingsStats) GetRiskFactors() *RiskFactorsStats {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{48}
}

// MRNs are used to uniquely identify resources. They are globally unique.
type Mrn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
}

func (x *Mrn) Reset() {
	*x = Mrn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mrn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mrn) ProtoMessage() {}

func (x *Mrn) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mrn.ProtoReflect.Descriptor instead.
func (*Mrn) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{49}
}

func (x *Mrn) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

type Mqueries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*explorer.Mquery `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Mqueries) Reset() {
	*x = Mqueries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mqueries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mqueries) ProtoMessage() {}

func (x *Mqueries) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mqueries.ProtoReflect.Descriptor instead.
func (*Mqueries) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{50}
}

func (x *Mqueries) GetItems() []*explorer.Mquery {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerMrn string `protobuf:"bytes,1,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{51}
}

func (x *ListReq) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *ListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DefaultPoliciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Platform string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Runtime  string   `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Version  string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Family   []string `protobuf:"bytes,5,rep,name=family,proto3" json:"family,omitempty"`
}

func (x *DefaultPoliciesReq) Reset() {
	*x = DefaultPoliciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultPoliciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultPoliciesReq) ProtoMessage() {}

func (x *DefaultPoliciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultPoliciesReq.ProtoReflect.Descriptor instead.
func (*DefaultPoliciesReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{52}
}

func (x *DefaultPoliciesReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DefaultPoliciesReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DefaultPoliciesReq) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *DefaultPoliciesReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DefaultPoliciesReq) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

type URLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *URLs) Reset() {
	*x = URLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLs) ProtoMessage() {}

func (x *URLs) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLs.ProtoReflect.Descriptor instead.
func (*URLs) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{53}
}

func (x *URLs) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type PolicyAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn      string                 `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	PolicyMrns    []string               `protobuf:"bytes,2,rep,name=policy_mrns,json=policyMrns,proto3" json:"policy_mrns,omitempty"`
	FrameworkMrns []string               `protobuf:"bytes,4,rep,name=framework_mrns,json=frameworkMrns,proto3" json:"framework_mrns,omitempty"`
	Action        explorer.Action        `protobuf:"varint,3,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
	ScoringSystem explorer.ScoringSystem `protobuf:"varint,5,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnquery.explorer.ScoringSystem" json:"scoring_system,omitempty"`
}

func (x *PolicyAssignment) Reset() {
	*x = PolicyAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAssignment) ProtoMessage() {}

func (x *PolicyAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAssignment.ProtoReflect.Descriptor instead.
func (*PolicyAssignment) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{54}
}

func (x *PolicyAssignment) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *PolicyAssignment) GetPolicyMrns() []string {
	if x != nil {
		return x.PolicyMrns
	}
	return nil
}

func (x *PolicyAssignment) GetFrameworkMrns() []string {
	if x != nil {
		return x.FrameworkMrns
	}
	return nil
}

func (x *PolicyAssignment) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

func (x *PolicyAssignment) GetScoringSystem() explorer.ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return explorer.ScoringSystem(0)
}

type PolicyMutationDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn    string                  `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	PolicyDeltas map[string]*PolicyDelta `protobuf:"bytes,2,rep,name=policy_deltas,json=policyDeltas,proto3" json:"policy_deltas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Action       explorer.Action         `protobuf:"varint,3,opt,name=action,proto3,enum=cnquery.explorer.Action" json:"action,omitempty"`
}

func (x *PolicyMutationDelta) Reset() {
	*x = PolicyMutationDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMutationDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMutationDelta) ProtoMessage() {}

func (x *PolicyMutationDelta) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMutationDelta.ProtoReflect.Descriptor instead.
func (*PolicyMutationDelta) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{55}
}

func (x *PolicyMutationDelta) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *PolicyMutationDelta) GetPolicyDeltas() map[string]*PolicyDelta {
	if x != nil {
		return x.PolicyDeltas
	}
	return nil
}

func (x *PolicyMutationDelta) GetAction() explorer.Action {
	if x != nil {
		return x.Action
	}
	return explorer.Action(0)
}

type PolicyDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn     string                                 `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	Action        PolicyDelta_PolicyAssignmentActionType `protobuf:"varint,2,opt,name=action,proto3,enum=cnspec.policy.v1.PolicyDelta_PolicyAssignmentActionType" json:"action,omitempty"`
	ScoringSystem explorer.ScoringSystem                 `protobuf:"varint,3,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnquery.explorer.ScoringSystem" json:"scoring_system,omitempty"`
}

func (x *PolicyDelta) Reset() {
	*x = PolicyDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDelta) ProtoMessage() {}

func (x *PolicyDelta) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDelta.ProtoReflect.Descriptor instead.
func (*PolicyDelta) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{56}
}

func (x *PolicyDelta) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *PolicyDelta) GetAction() PolicyDelta_PolicyAssignmentActionType {
	if x != nil {
		return x.Action
	}
	return PolicyDelta_ADD
}

func (x *PolicyDelta) GetScoringSystem() explorer.ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return explorer.ScoringSystem(0)
}

type ResolveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn    string             `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	AssetFilters []*explorer.Mquery `protobuf:"bytes,2,rep,name=asset_filters,json=assetFilters,proto3" json:"asset_filters,omitempty"`
}

func (x *ResolveReq) Reset() {
	*x = ResolveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveReq) ProtoMessage() {}

func (x *ResolveReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveReq.ProtoReflect.Descriptor instead.
func (*ResolveReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{57}
}

func (x *ResolveReq) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *ResolveReq) GetAssetFilters() []*explorer.Mquery {
	if x != nil {
		return x.AssetFilters
	}
	return nil
}

type UpdateAssetJobsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn     string             `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	AssetFilters []*explorer.Mquery `protobuf:"bytes,2,rep,name=asset_filters,json=assetFilters,proto3" json:"asset_filters,omitempty"`
}

func (x *UpdateAssetJobsReq) Reset() {
	*x = UpdateAssetJobsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetJobsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetJobsReq) ProtoMessage() {}

func (x *UpdateAssetJobsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetJobsReq.ProtoReflect.Descriptor instead.
func (*UpdateAssetJobsReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateAssetJobsReq) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *UpdateAssetJobsReq) GetAssetFilters() []*explorer.Mquery {
	if x != nil {
		return x.AssetFilters
	}
	return nil
}

type StoreResultsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn string   `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	Scores   []*Score `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"` // in this context, Scores only carry their checksum, not their ID
	// combination of query-checksum + result (which has entrypoint checksum):
	// TODO: remove the string-map, we don't need it anymore; the llx result contains everything we need (the CodeID)
	Data           map[string]*llx.Result            `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources      map[string]*llx.ResourceRecording `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Risks          []*ScoredRiskFactor               `protobuf:"bytes,5,rep,name=risks,proto3" json:"risks,omitempty"`
	CvssScores     []*Cvss                           `protobuf:"bytes,20,rep,name=cvssScores,proto3" json:"cvssScores,omitempty"`
	IsPreprocessed bool                              `protobuf:"varint,21,opt,name=is_preprocessed,json=isPreprocessed,proto3" json:"is_preprocessed,omitempty"`
	NotifyUpdates  []string                          `protobuf:"bytes,22,rep,name=notify_updates,json=notifyUpdates,proto3" json:"notify_updates,omitempty"`
	// Determines if this is the last batch of results for the asset
	IsLastBatch bool `protobuf:"varint,23,opt,name=is_last_batch,json=isLastBatch,proto3" json:"is_last_batch,omitempty"`
}

func (x *StoreResultsReq) Reset() {
	*x = StoreResultsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResultsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResultsReq) ProtoMessage() {}

func (x *StoreResultsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResultsReq.ProtoReflect.Descriptor instead.
func (*StoreResultsReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{59}
}

func (x *StoreResultsReq) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *StoreResultsReq) GetScores() []*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *StoreResultsReq) GetData() map[string]*llx.Result {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StoreResultsReq) GetResources() map[string]*llx.ResourceRecording {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *StoreResultsReq) GetRisks() []*ScoredRiskFactor {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *StoreResultsReq) GetCvssScores() []*Cvss {
	if x != nil {
		return x.CvssScores
	}
	return nil
}

func (x *StoreResultsReq) GetIsPreprocessed() bool {
	if x != nil {
		return x.IsPreprocessed
	}
	return false
}

func (x *StoreResultsReq) GetNotifyUpdates() []string {
	if x != nil {
		return x.NotifyUpdates
	}
	return nil
}

func (x *StoreResultsReq) GetIsLastBatch() bool {
	if x != nil {
		return x.IsLastBatch
	}
	return false
}

type EntityScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityMrn string `protobuf:"bytes,1,opt,name=entity_mrn,json=entityMrn,proto3" json:"entity_mrn,omitempty"`
	ScoreMrn  string `protobuf:"bytes,2,opt,name=score_mrn,json=scoreMrn,proto3" json:"score_mrn,omitempty"`
}

func (x *EntityScoreReq) Reset() {
	*x = EntityScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityScoreReq) ProtoMessage() {}

func (x *EntityScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityScoreReq.ProtoReflect.Descriptor instead.
func (*EntityScoreReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{60}
}

func (x *EntityScoreReq) GetEntityMrn() string {
	if x != nil {
		return x.EntityMrn
	}
	return ""
}

func (x *EntityScoreReq) GetScoreMrn() string {
	if x != nil {
		return x.ScoreMrn
	}
	return ""
}

type SynchronizeAssetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceMrn string             `protobuf:"bytes,1,opt,name=space_mrn,json=spaceMrn,proto3" json:"space_mrn,omitempty"`
	List     []*inventory.Asset `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SynchronizeAssetsReq) Reset() {
	*x = SynchronizeAssetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeAssetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeAssetsReq) ProtoMessage() {}

func (x *SynchronizeAssetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeAssetsReq.ProtoReflect.Descriptor instead.
func (*SynchronizeAssetsReq) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{61}
}

func (x *SynchronizeAssetsReq) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *SynchronizeAssetsReq) GetList() []*inventory.Asset {
	if x != nil {
		return x.List
	}
	return nil
}

type SynchronizeAssetsRespAssetDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformMrn string `protobuf:"bytes,1,opt,name=platform_mrn,json=platformMrn,proto3" json:"platform_mrn,omitempty"`
	AssetMrn    string `protobuf:"bytes,2,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ProjectId   string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SynchronizeAssetsRespAssetDetail) Reset() {
	*x = SynchronizeAssetsRespAssetDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeAssetsRespAssetDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeAssetsRespAssetDetail) ProtoMessage() {}

func (x *SynchronizeAssetsRespAssetDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeAssetsRespAssetDetail.ProtoReflect.Descriptor instead.
func (*SynchronizeAssetsRespAssetDetail) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{62}
}

func (x *SynchronizeAssetsRespAssetDetail) GetPlatformMrn() string {
	if x != nil {
		return x.PlatformMrn
	}
	return ""
}

func (x *SynchronizeAssetsRespAssetDetail) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *SynchronizeAssetsRespAssetDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SynchronizeAssetsRespAssetDetail) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type SynchronizeAssetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details map[string]*SynchronizeAssetsRespAssetDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SynchronizeAssetsResp) Reset() {
	*x = SynchronizeAssetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeAssetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeAssetsResp) ProtoMessage() {}

func (x *SynchronizeAssetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeAssetsResp.ProtoReflect.Descriptor instead.
func (*SynchronizeAssetsResp) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{63}
}

func (x *SynchronizeAssetsResp) GetDetails() map[string]*SynchronizeAssetsRespAssetDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type PurgeAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceMrn        string      `protobuf:"bytes,1,opt,name=spaceMrn,proto3" json:"spaceMrn,omitempty"`
	AssetMrns       []string    `protobuf:"bytes,2,rep,name=asset_mrns,json=assetMrns,proto3" json:"asset_mrns,omitempty"`
	PurgeAll        bool        `protobuf:"varint,3,opt,name=purge_all,json=purgeAll,proto3" json:"purge_all,omitempty"` // if you want to purge all assets in the space
	DateFilter      *DateFilter `protobuf:"bytes,4,opt,name=date_filter,json=dateFilter,proto3" json:"date_filter,omitempty"`
	ManagedBy       string      `protobuf:"bytes,5,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	PlatformRuntime string      `protobuf:"bytes,6,opt,name=platform_runtime,json=platformRuntime,proto3" json:"platform_runtime,omitempty"`
	// Labels to filter on. Only assets with all of these labels will be purged.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PurgeAssetsRequest) Reset() {
	*x = PurgeAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeAssetsRequest) ProtoMessage() {}

func (x *PurgeAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeAssetsRequest.ProtoReflect.Descriptor instead.
func (*PurgeAssetsRequest) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{64}
}

func (x *PurgeAssetsRequest) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *PurgeAssetsRequest) GetAssetMrns() []string {
	if x != nil {
		return x.AssetMrns
	}
	return nil
}

func (x *PurgeAssetsRequest) GetPurgeAll() bool {
	if x != nil {
		return x.PurgeAll
	}
	return false
}

func (x *PurgeAssetsRequest) GetDateFilter() *DateFilter {
	if x != nil {
		return x.DateFilter
	}
	return nil
}

func (x *PurgeAssetsRequest) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *PurgeAssetsRequest) GetPlatformRuntime() string {
	if x != nil {
		return x.PlatformRuntime
	}
	return ""
}

func (x *PurgeAssetsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  string          `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // RFC3339
	Comparison Comparison      `protobuf:"varint,2,opt,name=comparison,proto3,enum=cnspec.policy.v1.Comparison" json:"comparison,omitempty"`
	Field      DateFilterField `protobuf:"varint,3,opt,name=field,proto3,enum=cnspec.policy.v1.DateFilterField" json:"field,omitempty"`
}

func (x *DateFilter) Reset() {
	*x = DateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateFilter) ProtoMessage() {}

func (x *DateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateFilter.ProtoReflect.Descriptor instead.
func (*DateFilter) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{65}
}

func (x *DateFilter) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *DateFilter) GetComparison() Comparison {
	if x != nil {
		return x.Comparison
	}
	return Comparison_GREATER_THAN
}

func (x *DateFilter) GetField() DateFilterField {
	if x != nil {
		return x.Field
	}
	return DateFilterField_FILTER_LAST_UPDATED
}

type PurgeAssetsConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrns []string          `protobuf:"bytes,1,rep,name=asset_mrns,json=assetMrns,proto3" json:"asset_mrns,omitempty"`
	Errors    map[string]string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PurgeAssetsConfirmation) Reset() {
	*x = PurgeAssetsConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cnspec_policy_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeAssetsConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeAssetsConfirmation) ProtoMessage() {}

func (x *PurgeAssetsConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_cnspec_policy_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeAssetsConfirmation.ProtoReflect.Descriptor instead.
func (*PurgeAssetsConfirmation) Descriptor() ([]byte, []int) {
	return file_cnspec_policy_proto_rawDescGZIP(), []int{66}
}

func (x *PurgeAssetsConfirmation) GetAssetMrns() []string {
	if x != nil {
		return x.AssetMrns
	}
	return nil
}

func (x *PurgeAssetsConfirmation) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_cnspec_policy_proto protoreflect.FileDescriptor

var file_cnspec_policy_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x0d, 0x6c, 0x6c, 0x78, 0x2f, 0x6c, 0x6c, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2f, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x76, 0x64, 0x2f, 0x6d, 0x76, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb7, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04,
	0x64, 0x6f, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x09,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x92, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x72, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x72, 0x6e, 0x12,
	0x35, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x34, 0x0a, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x38, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x08, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x72, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x06, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x72, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x45,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63,
	0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x71, 0x6c, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x71, 0x6c, 0x4d, 0x72, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a,
	0x0d, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x78, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x78, 0x69, 0x63, 0x22,
	0xba, 0x05, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x31, 0x31, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x31, 0x31, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x31, 0x31,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x31,
	0x31, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52,
	0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0e,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x75, 0x73,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x20, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x22, 0xe3, 0x06, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x72, 0x6e, 0x12, 0x38,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04,
	0x64, 0x6f, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x32,
	0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x34, 0x0a,
	0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a,
	0x18, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x52,
	0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x04, 0x0a, 0x0e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63,
	0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a,
	0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8,
	0x01, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e,
	0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x33, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x99, 0x04, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x92,
	0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x52,
	0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f,
	0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x62, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x05,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x22,
	0xe1, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x55,
	0x75, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x45, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6c, 0x6c, 0x78, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x07, 0x0a, 0x0c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x61, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x72, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x0c, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x1a, 0x60, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x4d,
	0x72, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x10, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x22, 0xd5, 0x05, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x38, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x38, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0a,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x72, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4a,
	0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x22, 0xcc, 0x07, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x69,
	0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x05,
	0x72, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x76, 0x73,
	0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x09, 0x63, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x63, 0x76,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x1a, 0x52, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6c, 0x6c,
	0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x43, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x89, 0x07, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x75, 0x6c,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76,
	0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0b, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x56, 0x75,
	0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x78,
	0x0a, 0x04, 0x43, 0x76, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x43, 0x76, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x22, 0xa5, 0x03, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0c,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x71, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x10, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x69, 0x73,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x78, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x78, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x4d, 0x0a,
	0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x0f, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x69, 0x73, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x6f, 0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12,
	0x3b, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x61,
	0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x12, 0x0c,
	0x0a, 0x01, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa0, 0x02, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x0a, 0x03, 0x4d,
	0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x72, 0x6e, 0x22, 0x3a, 0x0a, 0x08, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x3a, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22,
	0x1a, 0x0a, 0x04, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x72, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0xa4, 0x02, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0x31, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x01, 0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x12,
	0x3d, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x70,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72,
	0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x4d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x82, 0x05, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x36, 0x0a,
	0x0a, 0x63, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x6c, 0x6c, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6c, 0x6c, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x72, 0x6e, 0x22, 0x64, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x53, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x72,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x6e, 0x0a, 0x0c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x81, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x10, 0x07, 0x2a, 0x48, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x6c, 0x0a,
	0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x55, 0x4c,
	0x4e, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x05,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x2a, 0x3c, 0x0a, 0x0c, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xb3, 0x01, 0x0a, 0x0b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10,
	0x01, 0x12, 0x05, 0x0a, 0x01, 0x61, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x4d, 0x69, 0x6e,
	0x75, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x04, 0x12,
	0x05, 0x0a, 0x01, 0x62, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x4d, 0x69, 0x6e, 0x75, 0x73,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x07, 0x12, 0x05, 0x0a,
	0x01, 0x63, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x05, 0x0a, 0x01, 0x64,
	0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x0a,
	0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x10, 0x0f, 0x2a,
	0x2d, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x2a, 0x3e,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x32, 0x8b,
	0x06, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x75, 0x62, 0x12, 0x40, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x17, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x72, 0x6e, 0x1a, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52,
	0x4c, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x1b, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x00, 0x32, 0xba, 0x09, 0x0a,
	0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x1a, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x24, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e,
	0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x6f, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cnspec_policy_proto_rawDescOnce sync.Once
	file_cnspec_policy_proto_rawDescData = file_cnspec_policy_proto_rawDesc
)

func file_cnspec_policy_proto_rawDescGZIP() []byte {
	file_cnspec_policy_proto_rawDescOnce.Do(func() {
		file_cnspec_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_cnspec_policy_proto_rawDescData)
	})
	return file_cnspec_policy_proto_rawDescData
}

var file_cnspec_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_cnspec_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_cnspec_policy_proto_goTypes = []any{
	(GroupType)(0),         // 0: cnspec.policy.v1.GroupType
	(QueryAction)(0),       // 1: cnspec.policy.v1.QueryAction
	(ScopeType)(0),         // 2: cnspec.policy.v1.ScopeType
	(ReviewStatus)(0),      // 3: cnspec.policy.v1.ReviewStatus
	(ScoreRating)(0),       // 4: cnspec.policy.v1.ScoreRating
	(Comparison)(0),        // 5: cnspec.policy.v1.Comparison
	(DateFilterField)(0),   // 6: cnspec.policy.v1.DateFilterField
	(ReportingJob_Type)(0), // 7: cnspec.policy.v1.ReportingJob.Type
	(PolicyDelta_PolicyAssignmentActionType)(0), // 8: cnspec.policy.v1.PolicyDelta.PolicyAssignmentActionType
	(*PolicyGroup)(nil),                         // 9: cnspec.policy.v1.PolicyGroup
	(*PolicyRef)(nil),                           // 10: cnspec.policy.v1.PolicyRef
	(*Policy)(nil),                              // 11: cnspec.policy.v1.Policy
	(*Policies)(nil),                            // 12: cnspec.policy.v1.Policies
	(*QueryCounts)(nil),                         // 13: cnspec.policy.v1.QueryCounts
	(*Bundle)(nil),                              // 14: cnspec.policy.v1.Bundle
	(*SoftwareSelector)(nil),                    // 15: cnspec.policy.v1.SoftwareSelector
	(*ResourceSelector)(nil),                    // 16: cnspec.policy.v1.ResourceSelector
	(*RiskMagnitude)(nil),                       // 17: cnspec.policy.v1.RiskMagnitude
	(*RiskFactor)(nil),                          // 18: cnspec.policy.v1.RiskFactor
	(*RiskFactorDocs)(nil),                      // 19: cnspec.policy.v1.RiskFactorDocs
	(*PolicyGroupDocs)(nil),                     // 20: cnspec.policy.v1.PolicyGroupDocs
	(*PolicyDocs)(nil),                          // 21: cnspec.policy.v1.PolicyDocs
	(*Framework)(nil),                           // 22: cnspec.policy.v1.Framework
	(*Frameworks)(nil),                          // 23: cnspec.policy.v1.Frameworks
	(*FrameworkGroup)(nil),                      // 24: cnspec.policy.v1.FrameworkGroup
	(*FrameworkRef)(nil),                        // 25: cnspec.policy.v1.FrameworkRef
	(*Evidence)(nil),                            // 26: cnspec.policy.v1.Evidence
	(*Control)(nil),                             // 27: cnspec.policy.v1.Control
	(*FrameworkMap)(nil),                        // 28: cnspec.policy.v1.FrameworkMap
	(*ControlMap)(nil),                          // 29: cnspec.policy.v1.ControlMap
	(*ControlDocs)(nil),                         // 30: cnspec.policy.v1.ControlDocs
	(*ControlRef)(nil),                          // 31: cnspec.policy.v1.ControlRef
	(*Asset)(nil),                               // 32: cnspec.policy.v1.Asset
	(*ResolvedPolicy)(nil),                      // 33: cnspec.policy.v1.ResolvedPolicy
	(*ExecutionJob)(nil),                        // 34: cnspec.policy.v1.ExecutionJob
	(*ExecutionQuery)(nil),                      // 35: cnspec.policy.v1.ExecutionQuery
	(*CollectorJob)(nil),                        // 36: cnspec.policy.v1.CollectorJob
	(*StringArray)(nil),                         // 37: cnspec.policy.v1.StringArray
	(*DataQueryInfo)(nil),                       // 38: cnspec.policy.v1.DataQueryInfo
	(*ReportingJob)(nil),                        // 39: cnspec.policy.v1.ReportingJob
	(*Report)(nil),                              // 40: cnspec.policy.v1.Report
	(*Reports)(nil),                             // 41: cnspec.policy.v1.Reports
	(*ReportCollection)(nil),                    // 42: cnspec.policy.v1.ReportCollection
	(*FrameworkReport)(nil),                     // 43: cnspec.policy.v1.FrameworkReport
	(*ControlScore)(nil),                        // 44: cnspec.policy.v1.ControlScore
	(*Cvss)(nil),                                // 45: cnspec.policy.v1.Cvss
	(*CvssStats)(nil),                           // 46: cnspec.policy.v1.CvssStats
	(*Score)(nil),                               // 47: cnspec.policy.v1.Score
	(*ScoreDelta)(nil),                          // 48: cnspec.policy.v1.ScoreDelta
	(*ScoredRiskFactor)(nil),                    // 49: cnspec.policy.v1.ScoredRiskFactor
	(*ScoredRiskFactors)(nil),                   // 50: cnspec.policy.v1.ScoredRiskFactors
	(*RiskFactorStats)(nil),                     // 51: cnspec.policy.v1.RiskFactorStats
	(*RiskFactorsStats)(nil),                    // 52: cnspec.policy.v1.RiskFactorsStats
	(*Stats)(nil),                               // 53: cnspec.policy.v1.Stats
	(*ScoreDistribution)(nil),                   // 54: cnspec.policy.v1.ScoreDistribution
	(*ScoreStats)(nil),                          // 55: cnspec.policy.v1.ScoreStats
	(*AssetFindingsStats)(nil),                  // 56: cnspec.policy.v1.AssetFindingsStats
	(*Empty)(nil),                               // 57: cnspec.policy.v1.Empty
	(*Mrn)(nil),                                 // 58: cnspec.policy.v1.Mrn
	(*Mqueries)(nil),                            // 59: cnspec.policy.v1.Mqueries
	(*ListReq)(nil),                             // 60: cnspec.policy.v1.ListReq
	(*DefaultPoliciesReq)(nil),                  // 61: cnspec.policy.v1.DefaultPoliciesReq
	(*URLs)(nil),                                // 62: cnspec.policy.v1.URLs
	(*PolicyAssignment)(nil),                    // 63: cnspec.policy.v1.PolicyAssignment
	(*PolicyMutationDelta)(nil),                 // 64: cnspec.policy.v1.PolicyMutationDelta
	(*PolicyDelta)(nil),                         // 65: cnspec.policy.v1.PolicyDelta
	(*ResolveReq)(nil),                          // 66: cnspec.policy.v1.ResolveReq
	(*UpdateAssetJobsReq)(nil),                  // 67: cnspec.policy.v1.UpdateAssetJobsReq
	(*StoreResultsReq)(nil),                     // 68: cnspec.policy.v1.StoreResultsReq
	(*EntityScoreReq)(nil),                      // 69: cnspec.policy.v1.EntityScoreReq
	(*SynchronizeAssetsReq)(nil),                // 70: cnspec.policy.v1.SynchronizeAssetsReq
	(*SynchronizeAssetsRespAssetDetail)(nil),    // 71: cnspec.policy.v1.SynchronizeAssetsRespAssetDetail
	(*SynchronizeAssetsResp)(nil),               // 72: cnspec.policy.v1.SynchronizeAssetsResp
	(*PurgeAssetsRequest)(nil),                  // 73: cnspec.policy.v1.PurgeAssetsRequest
	(*DateFilter)(nil),                          // 74: cnspec.policy.v1.DateFilter
	(*PurgeAssetsConfirmation)(nil),             // 75: cnspec.policy.v1.PurgeAssetsConfirmation
	nil,                                         // 76: cnspec.policy.v1.Policy.TagsEntry
	nil,                                         // 77: cnspec.policy.v1.Framework.TagsEntry
	nil,                                         // 78: cnspec.policy.v1.Control.TagsEntry
	nil,                                         // 79: cnspec.policy.v1.ExecutionJob.QueriesEntry
	nil,                                         // 80: cnspec.policy.v1.ExecutionQuery.PropertiesEntry
	nil,                                         // 81: cnspec.policy.v1.CollectorJob.ReportingJobsEntry
	nil,                                         // 82: cnspec.policy.v1.CollectorJob.ReportingQueriesEntry
	nil,                                         // 83: cnspec.policy.v1.CollectorJob.DatapointsEntry
	nil,                                         // 84: cnspec.policy.v1.CollectorJob.RiskMrnsEntry
	nil,                                         // 85: cnspec.policy.v1.CollectorJob.RiskFactorsEntry
	nil,                                         // 86: cnspec.policy.v1.ReportingJob.DatapointsEntry
	nil,                                         // 87: cnspec.policy.v1.ReportingJob.ChildJobsEntry
	nil,                                         // 88: cnspec.policy.v1.Report.ScoresEntry
	nil,                                         // 89: cnspec.policy.v1.Report.DataEntry
	nil,                                         // 90: cnspec.policy.v1.Report.CvssScoresEntry
	nil,                                         // 91: cnspec.policy.v1.ReportCollection.AssetsEntry
	nil,                                         // 92: cnspec.policy.v1.ReportCollection.ReportsEntry
	nil,                                         // 93: cnspec.policy.v1.ReportCollection.ErrorsEntry
	nil,                                         // 94: cnspec.policy.v1.ReportCollection.ResolvedPoliciesEntry
	nil,                                         // 95: cnspec.policy.v1.ReportCollection.VulnReportsEntry
	nil,                                         // 96: cnspec.policy.v1.PolicyMutationDelta.PolicyDeltasEntry
	nil,                                         // 97: cnspec.policy.v1.StoreResultsReq.DataEntry
	nil,                                         // 98: cnspec.policy.v1.StoreResultsReq.ResourcesEntry
	nil,                                         // 99: cnspec.policy.v1.SynchronizeAssetsResp.DetailsEntry
	nil,                                         // 100: cnspec.policy.v1.PurgeAssetsRequest.LabelsEntry
	nil,                                         // 101: cnspec.policy.v1.PurgeAssetsConfirmation.ErrorsEntry
	(*explorer.Mquery)(nil),                     // 102: cnquery.explorer.Mquery
	(*explorer.Filters)(nil),                    // 103: cnquery.explorer.Filters
	(*explorer.Author)(nil),                     // 104: cnquery.explorer.Author
	(explorer.Action)(0),                        // 105: cnquery.explorer.Action
	(*explorer.Impact)(nil),                     // 106: cnquery.explorer.Impact
	(explorer.ScoringSystem)(0),                 // 107: cnquery.explorer.ScoringSystem
	(*explorer.Property)(nil),                   // 108: cnquery.explorer.Property
	(*explorer.QueryPack)(nil),                  // 109: cnquery.explorer.QueryPack
	(*explorer.ObjectRef)(nil),                  // 110: cnquery.explorer.ObjectRef
	(*explorer.MqueryRef)(nil),                  // 111: cnquery.explorer.MqueryRef
	(*inventory.Platform)(nil),                  // 112: cnquery.providers.v1.Platform
	(*llx.CodeBundle)(nil),                      // 113: cnquery.llx.CodeBundle
	(*inventory.Asset)(nil),                     // 114: cnquery.providers.v1.Asset
	(*llx.Result)(nil),                          // 115: cnquery.llx.Result
	(*mvd.VulnReport)(nil),                      // 116: mondoo.mvd.v1.VulnReport
	(*llx.ResourceRecording)(nil),               // 117: cnquery.llx.ResourceRecording
	(*explorer.PropsReq)(nil),                   // 118: cnquery.explorer.PropsReq
	(*resources.EntityResourcesReq)(nil),        // 119: cnquery.explorer.resources.EntityResourcesReq
	(*explorer.Empty)(nil),                      // 120: cnquery.explorer.Empty
	(*resources.EntityResourcesRes)(nil),        // 121: cnquery.explorer.resources.EntityResourcesRes
}
var file_cnspec_policy_proto_depIdxs = []int32{
	10,  // 0: cnspec.policy.v1.PolicyGroup.policies:type_name -> cnspec.policy.v1.PolicyRef
	102, // 1: cnspec.policy.v1.PolicyGroup.checks:type_name -> cnquery.explorer.Mquery
	102, // 2: cnspec.policy.v1.PolicyGroup.queries:type_name -> cnquery.explorer.Mquery
	0,   // 3: cnspec.policy.v1.PolicyGroup.type:type_name -> cnspec.policy.v1.GroupType
	103, // 4: cnspec.policy.v1.PolicyGroup.filters:type_name -> cnquery.explorer.Filters
	20,  // 5: cnspec.policy.v1.PolicyGroup.docs:type_name -> cnspec.policy.v1.PolicyGroupDocs
	104, // 6: cnspec.policy.v1.PolicyGroup.authors:type_name -> cnquery.explorer.Author
	104, // 7: cnspec.policy.v1.PolicyGroup.reviewers:type_name -> cnquery.explorer.Author
	3,   // 8: cnspec.policy.v1.PolicyGroup.review_status:type_name -> cnspec.policy.v1.ReviewStatus
	105, // 9: cnspec.policy.v1.PolicyRef.action:type_name -> cnquery.explorer.Action
	106, // 10: cnspec.policy.v1.PolicyRef.impact:type_name -> cnquery.explorer.Impact
	107, // 11: cnspec.policy.v1.PolicyRef.scoring_system:type_name -> cnquery.explorer.ScoringSystem
	9,   // 12: cnspec.policy.v1.Policy.groups:type_name -> cnspec.policy.v1.PolicyGroup
	21,  // 13: cnspec.policy.v1.Policy.docs:type_name -> cnspec.policy.v1.PolicyDocs
	107, // 14: cnspec.policy.v1.Policy.scoring_system:type_name -> cnquery.explorer.ScoringSystem
	104, // 15: cnspec.policy.v1.Policy.authors:type_name -> cnquery.explorer.Author
	76,  // 16: cnspec.policy.v1.Policy.tags:type_name -> cnspec.policy.v1.Policy.TagsEntry
	108, // 17: cnspec.policy.v1.Policy.props:type_name -> cnquery.explorer.Property
	18,  // 18: cnspec.policy.v1.Policy.risk_factors:type_name -> cnspec.policy.v1.RiskFactor
	103, // 19: cnspec.policy.v1.Policy.computed_filters:type_name -> cnquery.explorer.Filters
	13,  // 20: cnspec.policy.v1.Policy.query_counts:type_name -> cnspec.policy.v1.QueryCounts
	11,  // 21: cnspec.policy.v1.Policies.items:type_name -> cnspec.policy.v1.Policy
	11,  // 22: cnspec.policy.v1.Bundle.policies:type_name -> cnspec.policy.v1.Policy
	109, // 23: cnspec.policy.v1.Bundle.packs:type_name -> cnquery.explorer.QueryPack
	108, // 24: cnspec.policy.v1.Bundle.props:type_name -> cnquery.explorer.Property
	102, // 25: cnspec.policy.v1.Bundle.queries:type_name -> cnquery.explorer.Mquery
	22,  // 26: cnspec.policy.v1.Bundle.frameworks:type_name -> cnspec.policy.v1.Framework
	28,  // 27: cnspec.policy.v1.Bundle.framework_maps:type_name -> cnspec.policy.v1.FrameworkMap
	21,  // 28: cnspec.policy.v1.Bundle.docs:type_name -> cnspec.policy.v1.PolicyDocs
	19,  // 29: cnspec.policy.v1.RiskFactor.docs:type_name -> cnspec.policy.v1.RiskFactorDocs
	103, // 30: cnspec.policy.v1.RiskFactor.filters:type_name -> cnquery.explorer.Filters
	102, // 31: cnspec.policy.v1.RiskFactor.checks:type_name -> cnquery.explorer.Mquery
	2,   // 32: cnspec.policy.v1.RiskFactor.scope:type_name -> cnspec.policy.v1.ScopeType
	17,  // 33: cnspec.policy.v1.RiskFactor.magnitude:type_name -> cnspec.policy.v1.RiskMagnitude
	15,  // 34: cnspec.policy.v1.RiskFactor.software:type_name -> cnspec.policy.v1.SoftwareSelector
	16,  // 35: cnspec.policy.v1.RiskFactor.resources:type_name -> cnspec.policy.v1.ResourceSelector
	105, // 36: cnspec.policy.v1.RiskFactor.action:type_name -> cnquery.explorer.Action
	24,  // 37: cnspec.policy.v1.Framework.groups:type_name -> cnspec.policy.v1.FrameworkGroup
	21,  // 38: cnspec.policy.v1.Framework.docs:type_name -> cnspec.policy.v1.PolicyDocs
	104, // 39: cnspec.policy.v1.Framework.authors:type_name -> cnquery.explorer.Author
	77,  // 40: cnspec.policy.v1.Framework.tags:type_name -> cnspec.policy.v1.Framework.TagsEntry
	25,  // 41: cnspec.policy.v1.Framework.dependencies:type_name -> cnspec.policy.v1.FrameworkRef
	28,  // 42: cnspec.policy.v1.Framework.framework_maps:type_name -> cnspec.policy.v1.FrameworkMap
	22,  // 43: cnspec.policy.v1.Frameworks.items:type_name -> cnspec.policy.v1.Framework
	27,  // 44: cnspec.policy.v1.FrameworkGroup.controls:type_name -> cnspec.policy.v1.Control
	0,   // 45: cnspec.policy.v1.FrameworkGroup.type:type_name -> cnspec.policy.v1.GroupType
	20,  // 46: cnspec.policy.v1.FrameworkGroup.docs:type_name -> cnspec.policy.v1.PolicyGroupDocs
	104, // 47: cnspec.policy.v1.FrameworkGroup.authors:type_name -> cnquery.explorer.Author
	104, // 48: cnspec.policy.v1.FrameworkGroup.reviewers:type_name -> cnquery.explorer.Author
	3,   // 49: cnspec.policy.v1.FrameworkGroup.review_status:type_name -> cnspec.policy.v1.ReviewStatus
	105, // 50: cnspec.policy.v1.FrameworkRef.action:type_name -> cnquery.explorer.Action
	102, // 51: cnspec.policy.v1.Evidence.checks:type_name -> cnquery.explorer.Mquery
	102, // 52: cnspec.policy.v1.Evidence.queries:type_name -> cnquery.explorer.Mquery
	31,  // 53: cnspec.policy.v1.Evidence.controls:type_name -> cnspec.policy.v1.ControlRef
	30,  // 54: cnspec.policy.v1.Control.docs:type_name -> cnspec.policy.v1.ControlDocs
	78,  // 55: cnspec.policy.v1.Control.tags:type_name -> cnspec.policy.v1.Control.TagsEntry
	105, // 56: cnspec.policy.v1.Control.action:type_name -> cnquery.explorer.Action
	26,  // 57: cnspec.policy.v1.Control.evidence:type_name -> cnspec.policy.v1.Evidence
	110, // 58: cnspec.policy.v1.FrameworkMap.framework_dependencies:type_name -> cnquery.explorer.ObjectRef
	110, // 59: cnspec.policy.v1.FrameworkMap.policy_dependencies:type_name -> cnquery.explorer.ObjectRef
	110, // 60: cnspec.policy.v1.FrameworkMap.query_pack_dependencies:type_name -> cnquery.explorer.ObjectRef
	29,  // 61: cnspec.policy.v1.FrameworkMap.controls:type_name -> cnspec.policy.v1.ControlMap
	110, // 62: cnspec.policy.v1.FrameworkMap.framework_owner:type_name -> cnquery.explorer.ObjectRef
	31,  // 63: cnspec.policy.v1.ControlMap.checks:type_name -> cnspec.policy.v1.ControlRef
	31,  // 64: cnspec.policy.v1.ControlMap.policies:type_name -> cnspec.policy.v1.ControlRef
	31,  // 65: cnspec.policy.v1.ControlMap.controls:type_name -> cnspec.policy.v1.ControlRef
	31,  // 66: cnspec.policy.v1.ControlMap.queries:type_name -> cnspec.policy.v1.ControlRef
	111, // 67: cnspec.policy.v1.ControlDocs.refs:type_name -> cnquery.explorer.MqueryRef
	105, // 68: cnspec.policy.v1.ControlRef.action:type_name -> cnquery.explorer.Action
	112, // 69: cnspec.policy.v1.Asset.platform:type_name -> cnquery.providers.v1.Platform
	34,  // 70: cnspec.policy.v1.ResolvedPolicy.execution_job:type_name -> cnspec.policy.v1.ExecutionJob
	36,  // 71: cnspec.policy.v1.ResolvedPolicy.collector_job:type_name -> cnspec.policy.v1.CollectorJob
	102, // 72: cnspec.policy.v1.ResolvedPolicy.filters:type_name -> cnquery.explorer.Mquery
	79,  // 73: cnspec.policy.v1.ExecutionJob.queries:type_name -> cnspec.policy.v1.ExecutionJob.QueriesEntry
	80,  // 74: cnspec.policy.v1.ExecutionQuery.properties:type_name -> cnspec.policy.v1.ExecutionQuery.PropertiesEntry
	113, // 75: cnspec.policy.v1.ExecutionQuery.code:type_name -> cnquery.llx.CodeBundle
	81,  // 76: cnspec.policy.v1.CollectorJob.reporting_jobs:type_name -> cnspec.policy.v1.CollectorJob.ReportingJobsEntry
	82,  // 77: cnspec.policy.v1.CollectorJob.reporting_queries:type_name -> cnspec.policy.v1.CollectorJob.ReportingQueriesEntry
	83,  // 78: cnspec.policy.v1.CollectorJob.datapoints:type_name -> cnspec.policy.v1.CollectorJob.DatapointsEntry
	84,  // 79: cnspec.policy.v1.CollectorJob.risk_mrns:type_name -> cnspec.policy.v1.CollectorJob.RiskMrnsEntry
	85,  // 80: cnspec.policy.v1.CollectorJob.risk_factors:type_name -> cnspec.policy.v1.CollectorJob.RiskFactorsEntry
	107, // 81: cnspec.policy.v1.ReportingJob.scoring_system:type_name -> cnquery.explorer.ScoringSystem
	86,  // 82: cnspec.policy.v1.ReportingJob.datapoints:type_name -> cnspec.policy.v1.ReportingJob.DatapointsEntry
	87,  // 83: cnspec.policy.v1.ReportingJob.child_jobs:type_name -> cnspec.policy.v1.ReportingJob.ChildJobsEntry
	7,   // 84: cnspec.policy.v1.ReportingJob.type:type_name -> cnspec.policy.v1.ReportingJob.Type
	47,  // 85: cnspec.policy.v1.Report.score:type_name -> cnspec.policy.v1.Score
	88,  // 86: cnspec.policy.v1.Report.scores:type_name -> cnspec.policy.v1.Report.ScoresEntry
	89,  // 87: cnspec.policy.v1.Report.data:type_name -> cnspec.policy.v1.Report.DataEntry
	53,  // 88: cnspec.policy.v1.Report.stats:type_name -> cnspec.policy.v1.Stats
	50,  // 89: cnspec.policy.v1.Report.risks:type_name -> cnspec.policy.v1.ScoredRiskFactors
	53,  // 90: cnspec.policy.v1.Report.ignored_stats:type_name -> cnspec.policy.v1.Stats
	45,  // 91: cnspec.policy.v1.Report.cvss_score:type_name -> cnspec.policy.v1.Cvss
	90,  // 92: cnspec.policy.v1.Report.cvss_scores:type_name -> cnspec.policy.v1.Report.CvssScoresEntry
	46,  // 93: cnspec.policy.v1.Report.cvss_stats:type_name -> cnspec.policy.v1.CvssStats
	40,  // 94: cnspec.policy.v1.Reports.reports:type_name -> cnspec.policy.v1.Report
	91,  // 95: cnspec.policy.v1.ReportCollection.assets:type_name -> cnspec.policy.v1.ReportCollection.AssetsEntry
	14,  // 96: cnspec.policy.v1.ReportCollection.bundle:type_name -> cnspec.policy.v1.Bundle
	92,  // 97: cnspec.policy.v1.ReportCollection.reports:type_name -> cnspec.policy.v1.ReportCollection.ReportsEntry
	93,  // 98: cnspec.policy.v1.ReportCollection.errors:type_name -> cnspec.policy.v1.ReportCollection.ErrorsEntry
	94,  // 99: cnspec.policy.v1.ReportCollection.resolved_policies:type_name -> cnspec.policy.v1.ReportCollection.ResolvedPoliciesEntry
	95,  // 100: cnspec.policy.v1.ReportCollection.vuln_reports:type_name -> cnspec.policy.v1.ReportCollection.VulnReportsEntry
	44,  // 101: cnspec.policy.v1.FrameworkReport.score:type_name -> cnspec.policy.v1.ControlScore
	44,  // 102: cnspec.policy.v1.FrameworkReport.controls:type_name -> cnspec.policy.v1.ControlScore
	44,  // 103: cnspec.policy.v1.ControlScore.assets:type_name -> cnspec.policy.v1.ControlScore
	54,  // 104: cnspec.policy.v1.ControlScore.scores:type_name -> cnspec.policy.v1.ScoreDistribution
	50,  // 105: cnspec.policy.v1.Score.risk_factors:type_name -> cnspec.policy.v1.ScoredRiskFactors
	49,  // 106: cnspec.policy.v1.ScoredRiskFactors.items:type_name -> cnspec.policy.v1.ScoredRiskFactor
	51,  // 107: cnspec.policy.v1.RiskFactorsStats.items:type_name -> cnspec.policy.v1.RiskFactorStats
	54,  // 108: cnspec.policy.v1.Stats.failed:type_name -> cnspec.policy.v1.ScoreDistribution
	54,  // 109: cnspec.policy.v1.Stats.passed:type_name -> cnspec.policy.v1.ScoreDistribution
	54,  // 110: cnspec.policy.v1.Stats.errors:type_name -> cnspec.policy.v1.ScoreDistribution
	55,  // 111: cnspec.policy.v1.AssetFindingsStats.score_stats:type_name -> cnspec.policy.v1.ScoreStats
	52,  // 112: cnspec.policy.v1.AssetFindingsStats.risk_factors:type_name -> cnspec.policy.v1.RiskFactorsStats
	102, // 113: cnspec.policy.v1.Mqueries.items:type_name -> cnquery.explorer.Mquery
	105, // 114: cnspec.policy.v1.PolicyAssignment.action:type_name -> cnquery.explorer.Action
	107, // 115: cnspec.policy.v1.PolicyAssignment.scoring_system:type_name -> cnquery.explorer.ScoringSystem
	96,  // 116: cnspec.policy.v1.PolicyMutationDelta.policy_deltas:type_name -> cnspec.policy.v1.PolicyMutationDelta.PolicyDeltasEntry
	105, // 117: cnspec.policy.v1.PolicyMutationDelta.action:type_name -> cnquery.explorer.Action
	8,   // 118: cnspec.policy.v1.PolicyDelta.action:type_name -> cnspec.policy.v1.PolicyDelta.PolicyAssignmentActionType
	107, // 119: cnspec.policy.v1.PolicyDelta.scoring_system:type_name -> cnquery.explorer.ScoringSystem
	102, // 120: cnspec.policy.v1.ResolveReq.asset_filters:type_name -> cnquery.explorer.Mquery
	102, // 121: cnspec.policy.v1.UpdateAssetJobsReq.asset_filters:type_name -> cnquery.explorer.Mquery
	47,  // 122: cnspec.policy.v1.StoreResultsReq.scores:type_name -> cnspec.policy.v1.Score
	97,  // 123: cnspec.policy.v1.StoreResultsReq.data:type_name -> cnspec.policy.v1.StoreResultsReq.DataEntry
	98,  // 124: cnspec.policy.v1.StoreResultsReq.resources:type_name -> cnspec.policy.v1.StoreResultsReq.ResourcesEntry
	49,  // 125: cnspec.policy.v1.StoreResultsReq.risks:type_name -> cnspec.policy.v1.ScoredRiskFactor
	45,  // 126: cnspec.policy.v1.StoreResultsReq.cvssScores:type_name -> cnspec.policy.v1.Cvss
	114, // 127: cnspec.policy.v1.SynchronizeAssetsReq.list:type_name -> cnquery.providers.v1.Asset
	99,  // 128: cnspec.policy.v1.SynchronizeAssetsResp.details:type_name -> cnspec.policy.v1.SynchronizeAssetsResp.DetailsEntry
	74,  // 129: cnspec.policy.v1.PurgeAssetsRequest.date_filter:type_name -> cnspec.policy.v1.DateFilter
	100, // 130: cnspec.policy.v1.PurgeAssetsRequest.labels:type_name -> cnspec.policy.v1.PurgeAssetsRequest.LabelsEntry
	5,   // 131: cnspec.policy.v1.DateFilter.comparison:type_name -> cnspec.policy.v1.Comparison
	6,   // 132: cnspec.policy.v1.DateFilter.field:type_name -> cnspec.policy.v1.DateFilterField
	101, // 133: cnspec.policy.v1.PurgeAssetsConfirmation.errors:type_name -> cnspec.policy.v1.PurgeAssetsConfirmation.ErrorsEntry
	35,  // 134: cnspec.policy.v1.ExecutionJob.QueriesEntry.value:type_name -> cnspec.policy.v1.ExecutionQuery
	39,  // 135: cnspec.policy.v1.CollectorJob.ReportingJobsEntry.value:type_name -> cnspec.policy.v1.ReportingJob
	37,  // 136: cnspec.policy.v1.CollectorJob.ReportingQueriesEntry.value:type_name -> cnspec.policy.v1.StringArray
	38,  // 137: cnspec.policy.v1.CollectorJob.DatapointsEntry.value:type_name -> cnspec.policy.v1.DataQueryInfo
	37,  // 138: cnspec.policy.v1.CollectorJob.RiskMrnsEntry.value:type_name -> cnspec.policy.v1.StringArray
	18,  // 139: cnspec.policy.v1.CollectorJob.RiskFactorsEntry.value:type_name -> cnspec.policy.v1.RiskFactor
	106, // 140: cnspec.policy.v1.ReportingJob.ChildJobsEntry.value:type_name -> cnquery.explorer.Impact
	47,  // 141: cnspec.policy.v1.Report.ScoresEntry.value:type_name -> cnspec.policy.v1.Score
	115, // 142: cnspec.policy.v1.Report.DataEntry.value:type_name -> cnquery.llx.Result
	45,  // 143: cnspec.policy.v1.Report.CvssScoresEntry.value:type_name -> cnspec.policy.v1.Cvss
	114, // 144: cnspec.policy.v1.ReportCollection.AssetsEntry.value:type_name -> cnquery.providers.v1.Asset
	40,  // 145: cnspec.policy.v1.ReportCollection.ReportsEntry.value:type_name -> cnspec.policy.v1.Report
	33,  // 146: cnspec.policy.v1.ReportCollection.ResolvedPoliciesEntry.value:type_name -> cnspec.policy.v1.ResolvedPolicy
	116, // 147: cnspec.policy.v1.ReportCollection.VulnReportsEntry.value:type_name -> mondoo.mvd.v1.VulnReport
	65,  // 148: cnspec.policy.v1.PolicyMutationDelta.PolicyDeltasEntry.value:type_name -> cnspec.policy.v1.PolicyDelta
	115, // 149: cnspec.policy.v1.StoreResultsReq.DataEntry.value:type_name -> cnquery.llx.Result
	117, // 150: cnspec.policy.v1.StoreResultsReq.ResourcesEntry.value:type_name -> cnquery.llx.ResourceRecording
	71,  // 151: cnspec.policy.v1.SynchronizeAssetsResp.DetailsEntry.value:type_name -> cnspec.policy.v1.SynchronizeAssetsRespAssetDetail
	14,  // 152: cnspec.policy.v1.PolicyHub.SetBundle:input_type -> cnspec.policy.v1.Bundle
	14,  // 153: cnspec.policy.v1.PolicyHub.ValidateBundle:input_type -> cnspec.policy.v1.Bundle
	58,  // 154: cnspec.policy.v1.PolicyHub.GetBundle:input_type -> cnspec.policy.v1.Mrn
	58,  // 155: cnspec.policy.v1.PolicyHub.GetPolicy:input_type -> cnspec.policy.v1.Mrn
	58,  // 156: cnspec.policy.v1.PolicyHub.DeletePolicy:input_type -> cnspec.policy.v1.Mrn
	58,  // 157: cnspec.policy.v1.PolicyHub.GetPolicyFilters:input_type -> cnspec.policy.v1.Mrn
	60,  // 158: cnspec.policy.v1.PolicyHub.List:input_type -> cnspec.policy.v1.ListReq
	61,  // 159: cnspec.policy.v1.PolicyHub.DefaultPolicies:input_type -> cnspec.policy.v1.DefaultPoliciesReq
	58,  // 160: cnspec.policy.v1.PolicyHub.GetFramework:input_type -> cnspec.policy.v1.Mrn
	58,  // 161: cnspec.policy.v1.PolicyHub.DeleteFramework:input_type -> cnspec.policy.v1.Mrn
	60,  // 162: cnspec.policy.v1.PolicyHub.ListFrameworks:input_type -> cnspec.policy.v1.ListReq
	63,  // 163: cnspec.policy.v1.PolicyResolver.Assign:input_type -> cnspec.policy.v1.PolicyAssignment
	63,  // 164: cnspec.policy.v1.PolicyResolver.Unassign:input_type -> cnspec.policy.v1.PolicyAssignment
	118, // 165: cnspec.policy.v1.PolicyResolver.SetProps:input_type -> cnquery.explorer.PropsReq
	66,  // 166: cnspec.policy.v1.PolicyResolver.Resolve:input_type -> cnspec.policy.v1.ResolveReq
	67,  // 167: cnspec.policy.v1.PolicyResolver.UpdateAssetJobs:input_type -> cnspec.policy.v1.UpdateAssetJobsReq
	67,  // 168: cnspec.policy.v1.PolicyResolver.ResolveAndUpdateJobs:input_type -> cnspec.policy.v1.UpdateAssetJobsReq
	58,  // 169: cnspec.policy.v1.PolicyResolver.GetResolvedPolicy:input_type -> cnspec.policy.v1.Mrn
	68,  // 170: cnspec.policy.v1.PolicyResolver.StoreResults:input_type -> cnspec.policy.v1.StoreResultsReq
	69,  // 171: cnspec.policy.v1.PolicyResolver.GetReport:input_type -> cnspec.policy.v1.EntityScoreReq
	69,  // 172: cnspec.policy.v1.PolicyResolver.GetFrameworkReport:input_type -> cnspec.policy.v1.EntityScoreReq
	69,  // 173: cnspec.policy.v1.PolicyResolver.GetScore:input_type -> cnspec.policy.v1.EntityScoreReq
	119, // 174: cnspec.policy.v1.PolicyResolver.GetResourcesData:input_type -> cnquery.explorer.resources.EntityResourcesReq
	70,  // 175: cnspec.policy.v1.PolicyResolver.SynchronizeAssets:input_type -> cnspec.policy.v1.SynchronizeAssetsReq
	73,  // 176: cnspec.policy.v1.PolicyResolver.PurgeAssets:input_type -> cnspec.policy.v1.PurgeAssetsRequest
	57,  // 177: cnspec.policy.v1.PolicyHub.SetBundle:output_type -> cnspec.policy.v1.Empty
	57,  // 178: cnspec.policy.v1.PolicyHub.ValidateBundle:output_type -> cnspec.policy.v1.Empty
	14,  // 179: cnspec.policy.v1.PolicyHub.GetBundle:output_type -> cnspec.policy.v1.Bundle
	11,  // 180: cnspec.policy.v1.PolicyHub.GetPolicy:output_type -> cnspec.policy.v1.Policy
	57,  // 181: cnspec.policy.v1.PolicyHub.DeletePolicy:output_type -> cnspec.policy.v1.Empty
	59,  // 182: cnspec.policy.v1.PolicyHub.GetPolicyFilters:output_type -> cnspec.policy.v1.Mqueries
	12,  // 183: cnspec.policy.v1.PolicyHub.List:output_type -> cnspec.policy.v1.Policies
	62,  // 184: cnspec.policy.v1.PolicyHub.DefaultPolicies:output_type -> cnspec.policy.v1.URLs
	22,  // 185: cnspec.policy.v1.PolicyHub.GetFramework:output_type -> cnspec.policy.v1.Framework
	57,  // 186: cnspec.policy.v1.PolicyHub.DeleteFramework:output_type -> cnspec.policy.v1.Empty
	23,  // 187: cnspec.policy.v1.PolicyHub.ListFrameworks:output_type -> cnspec.policy.v1.Frameworks
	57,  // 188: cnspec.policy.v1.PolicyResolver.Assign:output_type -> cnspec.policy.v1.Empty
	57,  // 189: cnspec.policy.v1.PolicyResolver.Unassign:output_type -> cnspec.policy.v1.Empty
	120, // 190: cnspec.policy.v1.PolicyResolver.SetProps:output_type -> cnquery.explorer.Empty
	33,  // 191: cnspec.policy.v1.PolicyResolver.Resolve:output_type -> cnspec.policy.v1.ResolvedPolicy
	57,  // 192: cnspec.policy.v1.PolicyResolver.UpdateAssetJobs:output_type -> cnspec.policy.v1.Empty
	33,  // 193: cnspec.policy.v1.PolicyResolver.ResolveAndUpdateJobs:output_type -> cnspec.policy.v1.ResolvedPolicy
	33,  // 194: cnspec.policy.v1.PolicyResolver.GetResolvedPolicy:output_type -> cnspec.policy.v1.ResolvedPolicy
	57,  // 195: cnspec.policy.v1.PolicyResolver.StoreResults:output_type -> cnspec.policy.v1.Empty
	40,  // 196: cnspec.policy.v1.PolicyResolver.GetReport:output_type -> cnspec.policy.v1.Report
	43,  // 197: cnspec.policy.v1.PolicyResolver.GetFrameworkReport:output_type -> cnspec.policy.v1.FrameworkReport
	40,  // 198: cnspec.policy.v1.PolicyResolver.GetScore:output_type -> cnspec.policy.v1.Report
	121, // 199: cnspec.policy.v1.PolicyResolver.GetResourcesData:output_type -> cnquery.explorer.resources.EntityResourcesRes
	72,  // 200: cnspec.policy.v1.PolicyResolver.SynchronizeAssets:output_type -> cnspec.policy.v1.SynchronizeAssetsResp
	75,  // 201: cnspec.policy.v1.PolicyResolver.PurgeAssets:output_type -> cnspec.policy.v1.PurgeAssetsConfirmation
	177, // [177:202] is the sub-list for method output_type
	152, // [152:177] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_cnspec_policy_proto_init() }
func file_cnspec_policy_proto_init() {
	if File_cnspec_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cnspec_policy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QueryCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SoftwareSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RiskMagnitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RiskFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RiskFactorDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Framework); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Frameworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FrameworkGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FrameworkRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FrameworkMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ControlMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ControlDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ControlRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CollectorJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DataQueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ReportingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*Reports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ReportCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FrameworkReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ControlScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Cvss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CvssStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ScoreDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ScoredRiskFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ScoredRiskFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*RiskFactorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*RiskFactorsStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ScoreDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ScoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*AssetFindingsStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*Mrn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*Mqueries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*DefaultPoliciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*URLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMutationDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAssetJobsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*StoreResultsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*EntityScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*SynchronizeAssetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*SynchronizeAssetsRespAssetDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*SynchronizeAssetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*PurgeAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*DateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cnspec_policy_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PurgeAssetsConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cnspec_policy_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cnspec_policy_proto_goTypes,
		DependencyIndexes: file_cnspec_policy_proto_depIdxs,
		EnumInfos:         file_cnspec_policy_proto_enumTypes,
		MessageInfos:      file_cnspec_policy_proto_msgTypes,
	}.Build()
	File_cnspec_policy_proto = out.File
	file_cnspec_policy_proto_rawDesc = nil
	file_cnspec_policy_proto_goTypes = nil
	file_cnspec_policy_proto_depIdxs = nil
}
