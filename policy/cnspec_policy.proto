syntax = "proto3";

package cnspec.policy.v1;
option go_package = "go.mondoo.com/cnspec/policy";

import "llx/llx.proto";
import "motor/asset/asset.proto";
import "explorer/cnquery_explorer.proto";

enum GroupType {
  UNCATEGORIZED = 0;
  CHAPTER = 1;
  IMPORT = 2;
  OVERRIDE = 3;
}

/*
  PolicyGroup specifies and overrides a policy and all its queries and referenced policies.
  - Queries have UUIDs across all policies, so these overrides reach across policies.
  - Policies are targeted via UUID as well and may override their scoring behavior.
  - PolicyGroups can be time-limited
  - PolicyGroups can be limited to a subset of assets
*/
message PolicyGroup {
  repeated PolicyRef policies = 1;
  repeated cnquery.explorer.Mquery checks = 2;
  repeated cnquery.explorer.Mquery queries = 3;
  GroupType type = 4;

  // filter for the assets this applies to
  cnquery.explorer.Filters filters = 20;

  // the timeline during which this scoring spec is active and reminders will be sent
  int64 start_date = 21;
  int64 end_date = 22;
  int64 reminder_date = 23;

  // metadata
  string title = 24;
  PolicyGroupDocs docs = 25;

  int64 created = 32;
  int64 modified = 33;
}

message PolicyRef {
  string mrn = 1;
  string uid = 2;

  // TODO: we are adding support for these overrides later on
  //repeated cnquery.explorer.Property props = 35;
  //cnquery.explorer.Filters filters = 43;

  // Action is used for all policy overrides
  cnquery.explorer.Action action = 41;
  // Impact allows to override the way the score of the policy is aggregated
  cnquery.explorer.Impact impact = 23;

  // local checksum for the contents of this policy reference
  string checksum = 4;
}

/*
  Policy definition, re-usable or assigned to the user's environment
  - Contains all policies and overrides
  - Can limit to what it supports
*/
message Policy {
  // FIXME: DEPRECATED, remove in v9.0 vv
  // We carry these fields for old services still using the API with this proto.
  repeated DeprecatedV7_PolicySpec specs = 6;
  map<string,DeprecatedV7_Mquery> asset_filters = 7; // key == checksum
  // ^^

  string mrn = 1; // will be filled from UID on upload
  string uid = 36; // uid is only used initially, to generate the MRN
  string name = 2;
  string version = 3;
  string owner_mrn = 8;

  repeated PolicyGroup groups = 11;

  string license = 21;
  PolicyDocs docs = 41;
  string summary = 46;

  cnquery.explorer.ScoringSystem scoring_system = 10;

  repeated cnquery.explorer.Author authors = 30;
  int64 created = 32;
  int64 modified = 33;
  map<string,string> tags = 34;
  repeated cnquery.explorer.Property props = 45;

  // checksums are grouped into:
  // local... meaning this policy, not policy dependencies
  // graph... meaning this and all dependent policies
  // content... meaning all the content in the policy, everything there is
  // execution... meaning everything that changes the resolved policy
  string local_content_checksum = 37;
  string graph_content_checksum = 38;
  string local_execution_checksum = 39;
  string graph_execution_checksum = 40;

  // aggregation of all filters applicable to this policy. auto-generated
  cnquery.explorer.Filters computed_filters = 43;

  QueryCounts query_counts = 42;
}

message Policies {
  repeated DeprecatedV7_Policy deprecated_v7_items = 1;
  repeated Policy items = 2;
}

// FIXME: DEPRECATED, remove in v9.0 vv
// All of these have been replaced as of the policy overhaul
message DeprecatedV7_PolicySpec {
  map<string,DeprecatedV7_ScoringSpec> policies = 1;
  map<string,DeprecatedV7_ScoringSpec> scoring_queries = 2;
  map<string,QueryAction> data_queries = 3;

  // filter for the assets this applies to
  DeprecatedV7_Mquery asset_filter = 20;

  // the timeline during which this scoring spec is active and reminders will be sent
  int64 start_date = 21;
  int64 end_date = 22;
  int64 reminder_date = 23;

  // metadata
  string title = 24;
  PolicyGroupDocs docs = 25;

  int64 created = 32;
  int64 modified = 33;
}

message DeprecatedV7_Policy {
  string mrn = 1; // will be filled from UID on upload
  string name = 2;
  string version = 3;

  // checksums are grouped into:
  // local... meaning this policy, not policy dependencies
  // graph... meaning this and all dependent policies
  // content... meaning all the content in the policy, everything there is
  // execution... meaning everything that changes the resolved policy
  string local_content_checksum = 37;
  string graph_content_checksum = 38;
  string local_execution_checksum = 39;
  string graph_execution_checksum = 40;

  repeated DeprecatedV7_PolicySpec specs = 6;
  map<string,DeprecatedV7_Mquery> asset_filters = 7; // key == checksum

  string owner_mrn = 8;
  bool is_public = 9;

  cnquery.explorer.ScoringSystem scoring_system = 10;

  repeated DeprecatedV7_Author authors = 30;
  int64 created = 32;
  int64 modified = 33;
  map<string,string> tags = 34;
  // mapping query ref => target; target may be empty if not overwriting
  map<string,string> props = 35;
  // user-defined uid, which is used to generate the MRN
  string uid = 36;
  PolicyDocs docs = 41;

  QueryCounts query_counts = 42;
}

message DeprecatedV7_ScoringSpec {
  string id = 1; // id of the policy or query, can also be an mrn
  // weight: 0 means the result has no weight and will be ignored
  // if weight_is_percentage, this value must be in 0 - 100 range
  uint32 weight = 2;
  bool weight_is_percentage = 3;

  // only ever relevant when multiple scores bubble up into this spec
  // the default is average if not specified
  cnquery.explorer.ScoringSystem scoring_system = 4;

  QueryAction action = 6;

  DeprecatedV7_SeverityValue severity = 7;
}

message DeprecatedV7_Bundle {
  string owner_mrn = 1;
  repeated DeprecatedV7_Mquery queries = 4;
  repeated DeprecatedV7_Policy policies = 2;
  repeated DeprecatedV7_Mquery props = 3;
  PolicyDocs docs = 5;

}

message DeprecatedV7_Author {
  string name = 1;
  string email = 2;
}
// ^^

enum QueryAction {
  UNSPECIFIED = 0;
  MODIFY = 1;
  DEACTIVATE = 2;
  ACTIVATE = 3;
}

message QueryCounts {
  int64 scoring_count = 1;
  int64 data_count = 2;
  int64 total_count = 3;
}

message Bundle {
  string owner_mrn = 1;
  repeated Policy policies = 7;
  repeated cnquery.explorer.Property props = 3;
  repeated cnquery.explorer.Mquery queries = 6;
  PolicyDocs docs = 5;

  // FIXME: DEPRECATED, remove in v9.0 vv
  // This is replaced by queries using cnquery structures
  repeated DeprecatedV7_Policy deprecated_v7_policies = 2;
  // We left props largely unchanged, because it only used 2 fields from the
  // Mquery message: uid and query (#5 and #1). Internally it used
  // code_id, checksum and mrn (#2, #3, #4). These have been kept consistent
  // between all protos and messages.
  repeated DeprecatedV7_Mquery deprecated_v7_queries = 4;
  // ^^
}

message PolicyGroupDocs {
  string desc = 1;
}

message PolicyDocs {
  string desc = 1;
}

// FIXME: DEPRECATED, remove in v9.0 vv
// This is moving entirely to cnquery's Mquery object.
message DeprecatedV7_Mquery {
  string query = 1;
  string code_id = 2;
  string checksum = 3;
  string mrn = 4;
  // UID is only needed on Mquery upload, when the MRN is computed.
  // It is not be persisted.
  string uid = 5;
  string type = 6;
  DeprecatedV7_SeverityValue severity = 19;
  string title = 20;
  DeprecatedV7_MqueryDocs docs = 21;
  repeated DeprecatedV7_MqueryRef refs = 22;
  map<string,string> tags = 34;
}

message DeprecatedV7_SeverityValue {
  int64 value = 1;
}

message DeprecatedV7_MqueryDocs {
  string desc = 1;
  string audit = 2;
  string remediation = 3;
}

message DeprecatedV7_MqueryRef {
  string title = 1;
  string url = 2;
}
// ^^

// **********  Resolution / Execution **************

// Asset is a lean layer of information about an asset
message Asset {
  string mrn = 1;
  string name = 18;
  string url = 19;
  string platformName = 20;
}

/*
  Once a policy has been                     , it can easily be retrieved.
  We will store the different ways in which policies are resolved in the DB
  for fast retrieval.
*/
message ResolvedPolicy {
  // FIXME: DEPRECATED, remove in v9.0 vv
  // Replaced by the new Mquery version
  repeated DeprecatedV7_Mquery deprecated_v7_filters = 4;
  // ^^

  ExecutionJob execution_job = 2;
  CollectorJob collector_job = 3;
  repeated cnquery.explorer.Mquery filters = 1;
  string graph_execution_checksum = 7;
  string filters_checksum = 20;
  string reporting_job_uuid = 21;
}

/*
  The list of queries that an asset needs to execute
  May be identical amongst multiple individual policies
  - Checksum helps deduplicate this job
  - Queries have a map from query checksum to query query contents
*/
message ExecutionJob {
  string checksum = 1;
  // map of all queries that should be executed, checksum => query
  map<string,ExecutionQuery> queries = 2;
}

/*
  A query which is part of an ExecutionJob
  Reduced to the bare minimum for the execution
*/
message ExecutionQuery {
  string query = 1;
  string checksum = 2;
  // mapping from name => datapoint checksum, which is in the execution job
  map<string,string> properties = 3;
  // list of checksums that we collect as data points
  repeated string datapoints = 4;
  cnquery.llx.CodeBundle code = 5;
}

/*
  The scoring job used by the collector, to know what happens with all
  individual scores that the asset sends.
  - Checksum helps deduplicate this job
  - Every score points to a reporting job
  - For optimization, assets may have multiple scoring jobs
*/
message CollectorJob {
  string checksum = 1;
  // links incoming score/query-checksum to reporting job
  map<string,ReportingJob> reporting_jobs = 2;
  // maps a query checksum (llx) to a list of query objects (uuid)
  map<string,StringArray> reporting_queries = 3;
  // maps a query datapoint checksum (llx) to its type and reporting jobs (uuids)
  map<string,DataQueryInfo> datapoints = 4;
}

message StringArray {
  repeated string items = 1;
}

message DataQueryInfo {
  string type = 1;
  repeated string notify = 2;
}

/*
  Reporting jobs help build reports from all the scores they receive
  1. When a query score arrives, it is first reported to the CollectorJob.
  2. It picks the first reportingJob and fills the result in, no additional
     specs need to be called. However, it notifies all other reporting jobs.
  3. Once a notified reporting job runs, it looks at alal the specs and collects
     their values and scores them. Repeat this step for all notified reports.
  - uuid specifies the query or policy
  - spec has all the other results that need to be pulled and their scorings
*/
message ReportingJob {
  // FIXME: DEPRECATED, remove in v9.0 vv
  // This is replaced by the new spec, which now references cnquery
  map<string,DeprecatedV7_ScoringSpec> deprecated_v7_spec = 4;
  // ^^

  string checksum = 1;
  string qr_id = 2;
  string uuid = 3;
  repeated string notify = 5;
  cnquery.explorer.ScoringSystem scoring_system = 6;
  map<string,bool> datapoints = 7;
  bool is_data = 8;
  map<string,cnquery.explorer.Impact> child_jobs = 9;
}

// **********       Reporting         **************

message Report {
  string scoring_mrn = 1;
  string entity_mrn = 2;
  Score score = 3;
  map<string,Score> scores = 4;
  map<string, cnquery.llx.Result> data = 5;
  Stats stats = 6;

  int64 created = 20;
  int64 modified = 21;
  Stats ignored_stats = 22;

  Cvss cvss_score = 30;
  map<string,Cvss> cvss_scores = 31;
  CvssStats cvss_stats = 32;

  string resolved_policy_version = 33;
  string url = 34;
}

message Reports {
  repeated Report reports = 1;
}

message ReportCollection {
  map<string, Asset> assets = 1;
  Bundle bundle = 2;
  map<string,  Report> reports = 3;
  map<string,  string> errors = 4;
  map<string, ResolvedPolicy> resolved_policies = 5;
}

/*
  Cvss scores are specific to CVEs
*/
message Cvss {
  string id = 1;
  string checksum = 2;
  int32 score = 3;
  string vector = 4;
  string source = 5;
}

message CvssStats {
  uint32 total = 1;
  uint32 critical = 2; // 9.0 <= .. <= 10.0
  uint32 high = 3;     // 7.0 <= .. < 9.0
  uint32 medium = 4;   // 4.0 <= .. < 7.0
  uint32 low = 5;      // 0.0 < .. < 4.0
  uint32 none = 6;     // 0.0
  uint32 unscored = 7; // no value
  uint32 worst = 8;
}

/*
  Scores are numeric values with weith that provide a summary about the asset
*/
message Score {
  string qr_id = 2;
  uint32 type = 3;
  uint32 value = 4;
  uint32 weight = 7;
  uint32 score_completion = 5;
  uint32 data_total = 9;
  uint32 data_completion = 6;
  string message = 8;
  // captures the timestamp when the score value was last modified
  int64 value_modified_time = 10;
  // captures when the score first failed (non-100 value)
  // a value of 0 indicates that this field is not set
  int64 failure_time = 11;
}

message Stats {
  uint32 total = 1;
  uint32 incomplete = 8;
  uint32 skipped = 10;
  uint32 worst = 11;
  uint32 unknown = 12;
  ScoreDistribution failed = 14;
  ScoreDistribution passed = 15;
  ScoreDistribution errors = 16;
}

message ScoreDistribution {
  uint32 total = 1;
  uint32 a = 2;
  uint32 b = 3;
  uint32 c = 4;
  uint32 d = 5;
  uint32 f = 6;
  uint32 error = 7;
  uint32 unrated = 8;
}

// **********       Policy Hub        **************

service PolicyHub {
  rpc SetBundle(Bundle) returns (Empty) {}
  rpc ValidateBundle(Bundle) returns (Empty) {}
  rpc GetBundle(Mrn) returns (Bundle) {}
  rpc GetPolicy(Mrn) returns (Policy) {}
  rpc DeletePolicy(Mrn) returns (Empty) {}
  rpc GetPolicyFilters(Mrn) returns (Mqueries) {}
  rpc List(ListReq) returns (Policies) {}
  rpc DefaultPolicies(DefaultPoliciesReq) returns (URLs) {}
}

message Empty {}

// MRNs are used to uniquely identify resources. They are globally unique.
message Mrn {
  string mrn = 1;
}

message Mqueries {
  // FIXME: DEPRECATED, remove in v9.0 vv
  // just uses the old datatype and moved to the new one below
  repeated DeprecatedV7_Mquery deprecated_v7_items = 1;
  // ^

  repeated cnquery.explorer.Mquery items = 2;
}

message ListReq {
  string owner_mrn = 1;
  string name = 2;
}

message DefaultPoliciesReq {
  string kind = 1;
  string platform = 2;
  string runtime = 3;
  string version = 4;
  repeated string family = 5;
}

message URLs {
  repeated string urls = 1;
}


// **********       Policy Resolver        **************

service PolicyResolver {
  rpc Assign(PolicyAssignment) returns (Empty) {}
  rpc Unassign(PolicyAssignment) returns (Empty) {}
  rpc SetProps(cnquery.explorer.PropsReq) returns (cnquery.explorer.Empty) {}

  rpc Resolve(ResolveReq) returns (ResolvedPolicy) {}
  // UpdateAssetJobs is used to update the resolved policy of an asset
  rpc UpdateAssetJobs(UpdateAssetJobsReq) returns (Empty) {}
  // ResolveAndUpdate is used to update the resolved policy of an asset and return it
  rpc ResolveAndUpdateJobs(UpdateAssetJobsReq) returns (ResolvedPolicy) {}
  // GetResolvedPolicy retrieves the current resolved policy for the given asset
  rpc GetResolvedPolicy(Mrn) returns (ResolvedPolicy) {}

  rpc StoreResults(StoreResultsReq) returns (Empty) {}

  rpc GetReport(EntityScoreReq) returns (Report) {}
  rpc GetScore(EntityScoreReq) returns (Report) {}

  rpc SynchronizeAssets(SynchronizeAssetsReq) returns (SynchronizeAssetsResp) {}
  rpc PurgeAssets(PurgeAssetsRequest) returns (PurgeAssetsConfirmation) {}
}

message PolicyAssignment {
  string asset_mrn = 1;
  repeated string policy_mrns = 2;
}

message PolicyMutationDelta {
  string policy_mrn = 1;
  map<string,PolicyDelta> policy_deltas = 2;
}

message PolicyDelta {
  string policy_mrn = 1;
  enum PolicyAssignmentActionType {
    ADD = 0;
    DELETE = 1;
  }
  PolicyAssignmentActionType action = 2;
}

message ResolveReq {
  string policy_mrn = 1;
  repeated cnquery.explorer.Mquery asset_filters = 2;
}

message UpdateAssetJobsReq {
  string asset_mrn = 1;
  repeated cnquery.explorer.Mquery asset_filters = 2;
}

message StoreResultsReq {
  string asset_mrn = 1;
  repeated Score scores = 2; // in this context, Scores only carry their checksum, not their ID
  // combination of query-checksum + result (which has entrypoint checksum):
  // TODO: remove the string-map, we don't need it anymore; the llx result contains everything we need (the CodeID)
  map<string, cnquery.llx.Result> data = 3;
  repeated Cvss cvssScores = 20;
  bool is_preprocessed = 21;
  repeated string notify_updates = 22;
}

message EntityScoreReq {
  string entity_mrn = 1;
  string score_mrn = 2;
}

enum ScoreRating {
  unrated = 0;
  aPlus = 1;
  a = 2;
  aMinus = 3;
  bPlus = 4;
  b = 5;
  bMinus = 6;
  cPlus = 7;
  c = 8;
  cMinus = 9;
  dPlus = 10;
  d = 11;
  dMinus = 12;
  failed = 13;
  error = 14;
  skip = 15;
}

message SynchronizeAssetsReq {
  string space_mrn = 1;
  repeated cnquery.motor.asset.v1.Asset list = 2;
}

message SynchronizeAssetsRespAssetDetail {
  string platform_mrn = 1;
  string asset_mrn = 2;
  string url = 3;
}

message SynchronizeAssetsResp {
  map<string, SynchronizeAssetsRespAssetDetail> details = 1;
}

message PurgeAssetsRequest {
  string spaceMrn = 1;
  repeated string asset_mrns = 2;
  bool purge_all = 3; // if you want to purge all assets in the space
  DateFilter date_filter = 4;
  string managed_by = 5;
  string platform_runtime = 6;
}

message DateFilter {
  string timestamp = 1; // RFC3339
  Comparison comparison = 2;
  DateFilterField field = 3;
}

enum Comparison {
  GREATER_THAN = 0;
  LESS_THAN = 1;
}

enum DateFilterField {
  FILTER_LAST_UPDATED = 0;
  FILTER_CREATED = 1;
}

message PurgeAssetsConfirmation {
  repeated string asset_mrns = 1;
  map<string, string> errors = 2;
}

