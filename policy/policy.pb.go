// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: policy.proto

package policy

import (
	llx "go.mondoo.com/cnquery/llx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScoringSystem that determines how individual scores come together
type ScoringSystem int32

const (
	ScoringSystem_AVERAGE  ScoringSystem = 0
	ScoringSystem_WEIGHTED ScoringSystem = 1
	ScoringSystem_WORST    ScoringSystem = 2
)

// Enum value maps for ScoringSystem.
var (
	ScoringSystem_name = map[int32]string{
		0: "AVERAGE",
		1: "WEIGHTED",
		2: "WORST",
	}
	ScoringSystem_value = map[string]int32{
		"AVERAGE":  0,
		"WEIGHTED": 1,
		"WORST":    2,
	}
)

func (x ScoringSystem) Enum() *ScoringSystem {
	p := new(ScoringSystem)
	*p = x
	return p
}

func (x ScoringSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoringSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[0].Descriptor()
}

func (ScoringSystem) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[0]
}

func (x ScoringSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoringSystem.Descriptor instead.
func (ScoringSystem) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

type QueryAction int32

const (
	QueryAction_UNSPECIFIED QueryAction = 0
	QueryAction_MODIFY      QueryAction = 1
	QueryAction_DEACTIVATE  QueryAction = 2
	QueryAction_ACTIVATE    QueryAction = 3
)

// Enum value maps for QueryAction.
var (
	QueryAction_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MODIFY",
		2: "DEACTIVATE",
		3: "ACTIVATE",
	}
	QueryAction_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MODIFY":      1,
		"DEACTIVATE":  2,
		"ACTIVATE":    3,
	}
)

func (x QueryAction) Enum() *QueryAction {
	p := new(QueryAction)
	*p = x
	return p
}

func (x QueryAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryAction) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[1].Descriptor()
}

func (QueryAction) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[1]
}

func (x QueryAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryAction.Descriptor instead.
func (QueryAction) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

type ScoreRating int32

const (
	ScoreRating_unrated ScoreRating = 0
	ScoreRating_aPlus   ScoreRating = 1
	ScoreRating_a       ScoreRating = 2
	ScoreRating_aMinus  ScoreRating = 3
	ScoreRating_bPlus   ScoreRating = 4
	ScoreRating_b       ScoreRating = 5
	ScoreRating_bMinus  ScoreRating = 6
	ScoreRating_cPlus   ScoreRating = 7
	ScoreRating_c       ScoreRating = 8
	ScoreRating_cMinus  ScoreRating = 9
	ScoreRating_dPlus   ScoreRating = 10
	ScoreRating_d       ScoreRating = 11
	ScoreRating_dMinus  ScoreRating = 12
	ScoreRating_failed  ScoreRating = 13
	ScoreRating_error   ScoreRating = 14
	ScoreRating_skip    ScoreRating = 15
)

// Enum value maps for ScoreRating.
var (
	ScoreRating_name = map[int32]string{
		0:  "unrated",
		1:  "aPlus",
		2:  "a",
		3:  "aMinus",
		4:  "bPlus",
		5:  "b",
		6:  "bMinus",
		7:  "cPlus",
		8:  "c",
		9:  "cMinus",
		10: "dPlus",
		11: "d",
		12: "dMinus",
		13: "failed",
		14: "error",
		15: "skip",
	}
	ScoreRating_value = map[string]int32{
		"unrated": 0,
		"aPlus":   1,
		"a":       2,
		"aMinus":  3,
		"bPlus":   4,
		"b":       5,
		"bMinus":  6,
		"cPlus":   7,
		"c":       8,
		"cMinus":  9,
		"dPlus":   10,
		"d":       11,
		"dMinus":  12,
		"failed":  13,
		"error":   14,
		"skip":    15,
	}
)

func (x ScoreRating) Enum() *ScoreRating {
	p := new(ScoreRating)
	*p = x
	return p
}

func (x ScoreRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreRating) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[2].Descriptor()
}

func (ScoreRating) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[2]
}

func (x ScoreRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreRating.Descriptor instead.
func (ScoreRating) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

type PolicyDelta_PolicyAssignmentActionType int32

const (
	PolicyDelta_ADD    PolicyDelta_PolicyAssignmentActionType = 0
	PolicyDelta_DELETE PolicyDelta_PolicyAssignmentActionType = 1
)

// Enum value maps for PolicyDelta_PolicyAssignmentActionType.
var (
	PolicyDelta_PolicyAssignmentActionType_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
	}
	PolicyDelta_PolicyAssignmentActionType_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
	}
)

func (x PolicyDelta_PolicyAssignmentActionType) Enum() *PolicyDelta_PolicyAssignmentActionType {
	p := new(PolicyDelta_PolicyAssignmentActionType)
	*p = x
	return p
}

func (x PolicyDelta_PolicyAssignmentActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyDelta_PolicyAssignmentActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[3].Descriptor()
}

func (PolicyDelta_PolicyAssignmentActionType) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[3]
}

func (x PolicyDelta_PolicyAssignmentActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyDelta_PolicyAssignmentActionType.Descriptor instead.
func (PolicyDelta_PolicyAssignmentActionType) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{37, 0}
}

// PolicySpec specifies and overrides a policy and all its queries and referenced policies.
// - Queries have UUIDs across all policies, so these overrides reach across policies.
// - Policies are targeted via UUID as well and may override their scoring behavior.
// - PolicySpecs can be time-limited
// - PolicySpecs can be limited to a subset of assets
type PolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies       map[string]*ScoringSpec `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScoringQueries map[string]*ScoringSpec `protobuf:"bytes,2,rep,name=scoring_queries,json=scoringQueries,proto3" json:"scoring_queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataQueries    map[string]QueryAction  `protobuf:"bytes,3,rep,name=data_queries,json=dataQueries,proto3" json:"data_queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cnspec.policy.QueryAction"`
	// filter for the assets this applies to
	AssetFilter *Mquery `protobuf:"bytes,20,opt,name=asset_filter,json=assetFilter,proto3" json:"asset_filter,omitempty"`
	// the timeline during which this scoring spec is active and reminders will be sent
	StartDate    int64 `protobuf:"varint,21,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      int64 `protobuf:"varint,22,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ReminderDate int64 `protobuf:"varint,23,opt,name=reminder_date,json=reminderDate,proto3" json:"reminder_date,omitempty"`
	// metadata
	Title    string          `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	Docs     *PolicySpecDocs `protobuf:"bytes,25,opt,name=docs,proto3" json:"docs,omitempty"`
	Created  int64           `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified int64           `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *PolicySpec) Reset() {
	*x = PolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySpec) ProtoMessage() {}

func (x *PolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySpec.ProtoReflect.Descriptor instead.
func (*PolicySpec) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicySpec) GetPolicies() map[string]*ScoringSpec {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PolicySpec) GetScoringQueries() map[string]*ScoringSpec {
	if x != nil {
		return x.ScoringQueries
	}
	return nil
}

func (x *PolicySpec) GetDataQueries() map[string]QueryAction {
	if x != nil {
		return x.DataQueries
	}
	return nil
}

func (x *PolicySpec) GetAssetFilter() *Mquery {
	if x != nil {
		return x.AssetFilter
	}
	return nil
}

func (x *PolicySpec) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *PolicySpec) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *PolicySpec) GetReminderDate() int64 {
	if x != nil {
		return x.ReminderDate
	}
	return 0
}

func (x *PolicySpec) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PolicySpec) GetDocs() *PolicySpecDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *PolicySpec) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PolicySpec) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

// Policy definition, re-usable or assigned to the user's environment
// - Contains all policies and overrides
// - Can limit to what it supports
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn     string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"` // will be filled from UID on upload
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// checksums are grouped into:
	// local... meaning this policy, not policy dependencies
	// graph... meaning this and all dependent policies
	// content... meaning all the content in the policy, everything there is
	// execution... meaning everything that changes the resolved policy
	LocalContentChecksum   string             `protobuf:"bytes,37,opt,name=local_content_checksum,json=localContentChecksum,proto3" json:"local_content_checksum,omitempty"`
	GraphContentChecksum   string             `protobuf:"bytes,38,opt,name=graph_content_checksum,json=graphContentChecksum,proto3" json:"graph_content_checksum,omitempty"`
	LocalExecutionChecksum string             `protobuf:"bytes,39,opt,name=local_execution_checksum,json=localExecutionChecksum,proto3" json:"local_execution_checksum,omitempty"`
	GraphExecutionChecksum string             `protobuf:"bytes,40,opt,name=graph_execution_checksum,json=graphExecutionChecksum,proto3" json:"graph_execution_checksum,omitempty"`
	Specs                  []*PolicySpec      `protobuf:"bytes,6,rep,name=specs,proto3" json:"specs,omitempty"`
	AssetFilters           map[string]*Mquery `protobuf:"bytes,7,rep,name=asset_filters,json=assetFilters,proto3" json:"asset_filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key == checksum
	OwnerMrn               string             `protobuf:"bytes,8,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	IsPublic               bool               `protobuf:"varint,9,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	ScoringSystem          ScoringSystem      `protobuf:"varint,10,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnspec.policy.ScoringSystem" json:"scoring_system,omitempty"`
	Authors                []*Author          `protobuf:"bytes,30,rep,name=authors,proto3" json:"authors,omitempty"`
	Created                int64              `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	Modified               int64              `protobuf:"varint,33,opt,name=modified,proto3" json:"modified,omitempty"`
	Tags                   map[string]string  `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// mapping query ref => target; target may be empty if not overwriting
	Props map[string]string `protobuf:"bytes,35,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// user-defined uid, which is used to generate the MRN
	Uid         string       `protobuf:"bytes,36,opt,name=uid,proto3" json:"uid,omitempty"`
	Docs        *PolicyDocs  `protobuf:"bytes,41,opt,name=docs,proto3" json:"docs,omitempty"`
	QueryCounts *QueryCounts `protobuf:"bytes,42,opt,name=query_counts,json=queryCounts,proto3" json:"query_counts,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Policy) GetLocalContentChecksum() string {
	if x != nil {
		return x.LocalContentChecksum
	}
	return ""
}

func (x *Policy) GetGraphContentChecksum() string {
	if x != nil {
		return x.GraphContentChecksum
	}
	return ""
}

func (x *Policy) GetLocalExecutionChecksum() string {
	if x != nil {
		return x.LocalExecutionChecksum
	}
	return ""
}

func (x *Policy) GetGraphExecutionChecksum() string {
	if x != nil {
		return x.GraphExecutionChecksum
	}
	return ""
}

func (x *Policy) GetSpecs() []*PolicySpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Policy) GetAssetFilters() map[string]*Mquery {
	if x != nil {
		return x.AssetFilters
	}
	return nil
}

func (x *Policy) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *Policy) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Policy) GetScoringSystem() ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return ScoringSystem_AVERAGE
}

func (x *Policy) GetAuthors() []*Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Policy) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Policy) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Policy) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Policy) GetProps() map[string]string {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Policy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Policy) GetDocs() *PolicyDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Policy) GetQueryCounts() *QueryCounts {
	if x != nil {
		return x.QueryCounts
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Policy `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policies) GetItems() []*Policy {
	if x != nil {
		return x.Items
	}
	return nil
}

// ScoringSpec defines how a query or policy will be scored
type ScoringSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // id of the policy or query, can also be an mrn
	// weight: 0 means the result has no weight and will be ignored
	// if weight_is_percentage, this value must be in 0 - 100 range
	Weight             uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightIsPercentage bool   `protobuf:"varint,3,opt,name=weight_is_percentage,json=weightIsPercentage,proto3" json:"weight_is_percentage,omitempty"`
	// only ever relevant when multiple scores bubble up into this spec
	// the default is average if not specified
	ScoringSystem ScoringSystem  `protobuf:"varint,4,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnspec.policy.ScoringSystem" json:"scoring_system,omitempty"`
	Action        QueryAction    `protobuf:"varint,6,opt,name=action,proto3,enum=cnspec.policy.QueryAction" json:"action,omitempty"`
	Severity      *SeverityValue `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *ScoringSpec) Reset() {
	*x = ScoringSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoringSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoringSpec) ProtoMessage() {}

func (x *ScoringSpec) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoringSpec.ProtoReflect.Descriptor instead.
func (*ScoringSpec) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{3}
}

func (x *ScoringSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScoringSpec) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ScoringSpec) GetWeightIsPercentage() bool {
	if x != nil {
		return x.WeightIsPercentage
	}
	return false
}

func (x *ScoringSpec) GetScoringSystem() ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return ScoringSystem_AVERAGE
}

func (x *ScoringSpec) GetAction() QueryAction {
	if x != nil {
		return x.Action
	}
	return QueryAction_UNSPECIFIED
}

func (x *ScoringSpec) GetSeverity() *SeverityValue {
	if x != nil {
		return x.Severity
	}
	return nil
}

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{4}
}

func (x *Author) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Author) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type QueryCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoringCount int64 `protobuf:"varint,1,opt,name=scoring_count,json=scoringCount,proto3" json:"scoring_count,omitempty"`
	DataCount    int64 `protobuf:"varint,2,opt,name=data_count,json=dataCount,proto3" json:"data_count,omitempty"`
	TotalCount   int64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *QueryCounts) Reset() {
	*x = QueryCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCounts) ProtoMessage() {}

func (x *QueryCounts) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCounts.ProtoReflect.Descriptor instead.
func (*QueryCounts) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{5}
}

func (x *QueryCounts) GetScoringCount() int64 {
	if x != nil {
		return x.ScoringCount
	}
	return 0
}

func (x *QueryCounts) GetDataCount() int64 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *QueryCounts) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerMrn string      `protobuf:"bytes,1,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Policies []*Policy   `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	Props    []*Mquery   `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	Queries  []*Mquery   `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
	Docs     *PolicyDocs `protobuf:"bytes,5,opt,name=docs,proto3" json:"docs,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{6}
}

func (x *Bundle) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *Bundle) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Bundle) GetProps() []*Mquery {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Bundle) GetQueries() []*Mquery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Bundle) GetDocs() *PolicyDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

type PolicySpecDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PolicySpecDocs) Reset() {
	*x = PolicySpecDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySpecDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySpecDocs) ProtoMessage() {}

func (x *PolicySpecDocs) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySpecDocs.ProtoReflect.Descriptor instead.
func (*PolicySpecDocs) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{7}
}

func (x *PolicySpecDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PolicyDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PolicyDocs) Reset() {
	*x = PolicyDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDocs) ProtoMessage() {}

func (x *PolicyDocs) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDocs.ProtoReflect.Descriptor instead.
func (*PolicyDocs) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{8}
}

func (x *PolicyDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// Mqueries are Mondoo queries.
type Mquery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	CodeId   string `protobuf:"bytes,2,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Checksum string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Mrn      string `protobuf:"bytes,4,opt,name=mrn,proto3" json:"mrn,omitempty"`
	// UID is only needed on Mquery upload, when the MRN is computed.
	// It will not be persisted.
	Uid      string            `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Type     string            `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Severity *SeverityValue    `protobuf:"bytes,19,opt,name=severity,proto3" json:"severity,omitempty"`
	Title    string            `protobuf:"bytes,20,opt,name=title,proto3" json:"title,omitempty"`
	Docs     *MqueryDocs       `protobuf:"bytes,21,opt,name=docs,proto3" json:"docs,omitempty"`
	Refs     []*MqueryRef      `protobuf:"bytes,22,rep,name=refs,proto3" json:"refs,omitempty"`
	Tags     map[string]string `protobuf:"bytes,34,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Mquery) Reset() {
	*x = Mquery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mquery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mquery) ProtoMessage() {}

func (x *Mquery) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mquery.ProtoReflect.Descriptor instead.
func (*Mquery) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{9}
}

func (x *Mquery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Mquery) GetCodeId() string {
	if x != nil {
		return x.CodeId
	}
	return ""
}

func (x *Mquery) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Mquery) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Mquery) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Mquery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Mquery) GetSeverity() *SeverityValue {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *Mquery) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Mquery) GetDocs() *MqueryDocs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Mquery) GetRefs() []*MqueryRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Mquery) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SeverityValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SeverityValue) Reset() {
	*x = SeverityValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeverityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeverityValue) ProtoMessage() {}

func (x *SeverityValue) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeverityValue.ProtoReflect.Descriptor instead.
func (*SeverityValue) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{10}
}

func (x *SeverityValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MqueryDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc        string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Audit       string `protobuf:"bytes,2,opt,name=audit,proto3" json:"audit,omitempty"`
	Remediation string `protobuf:"bytes,3,opt,name=remediation,proto3" json:"remediation,omitempty"`
}

func (x *MqueryDocs) Reset() {
	*x = MqueryDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MqueryDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqueryDocs) ProtoMessage() {}

func (x *MqueryDocs) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqueryDocs.ProtoReflect.Descriptor instead.
func (*MqueryDocs) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{11}
}

func (x *MqueryDocs) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MqueryDocs) GetAudit() string {
	if x != nil {
		return x.Audit
	}
	return ""
}

func (x *MqueryDocs) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

type MqueryRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MqueryRef) Reset() {
	*x = MqueryRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MqueryRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqueryRef) ProtoMessage() {}

func (x *MqueryRef) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqueryRef.ProtoReflect.Descriptor instead.
func (*MqueryRef) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{12}
}

func (x *MqueryRef) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MqueryRef) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Asset is a lean layer of information about an asset
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn  string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Name string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{13}
}

func (x *Asset) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Once a policy has been                     , it can easily be retrieved.
// We will store the different ways in which policies are resolved in the DB
// for fast retrieval.
type ResolvedPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionJob           *ExecutionJob `protobuf:"bytes,2,opt,name=execution_job,json=executionJob,proto3" json:"execution_job,omitempty"`
	CollectorJob           *CollectorJob `protobuf:"bytes,3,opt,name=collector_job,json=collectorJob,proto3" json:"collector_job,omitempty"`
	Filters                []*Mquery     `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	GraphExecutionChecksum string        `protobuf:"bytes,7,opt,name=graph_execution_checksum,json=graphExecutionChecksum,proto3" json:"graph_execution_checksum,omitempty"`
	FiltersChecksum        string        `protobuf:"bytes,20,opt,name=filters_checksum,json=filtersChecksum,proto3" json:"filters_checksum,omitempty"`
	ReportingJobUuid       string        `protobuf:"bytes,21,opt,name=reporting_job_uuid,json=reportingJobUuid,proto3" json:"reporting_job_uuid,omitempty"`
}

func (x *ResolvedPolicy) Reset() {
	*x = ResolvedPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedPolicy) ProtoMessage() {}

func (x *ResolvedPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedPolicy.ProtoReflect.Descriptor instead.
func (*ResolvedPolicy) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{14}
}

func (x *ResolvedPolicy) GetExecutionJob() *ExecutionJob {
	if x != nil {
		return x.ExecutionJob
	}
	return nil
}

func (x *ResolvedPolicy) GetCollectorJob() *CollectorJob {
	if x != nil {
		return x.CollectorJob
	}
	return nil
}

func (x *ResolvedPolicy) GetFilters() []*Mquery {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ResolvedPolicy) GetGraphExecutionChecksum() string {
	if x != nil {
		return x.GraphExecutionChecksum
	}
	return ""
}

func (x *ResolvedPolicy) GetFiltersChecksum() string {
	if x != nil {
		return x.FiltersChecksum
	}
	return ""
}

func (x *ResolvedPolicy) GetReportingJobUuid() string {
	if x != nil {
		return x.ReportingJobUuid
	}
	return ""
}

// The list of queries that an asset needs to execute
// May be identical amongst multiple individual policies
// - Checksum helps deduplicate this job
// - Queries have a map from query checksum to query query contents
type ExecutionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// map of all queries that should be executed, checksum => query
	Queries map[string]*ExecutionQuery `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionJob) Reset() {
	*x = ExecutionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionJob) ProtoMessage() {}

func (x *ExecutionJob) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionJob.ProtoReflect.Descriptor instead.
func (*ExecutionJob) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{15}
}

func (x *ExecutionJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ExecutionJob) GetQueries() map[string]*ExecutionQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// A query which is part of an ExecutionJob
// Reduced to the bare minimum for the execution
type ExecutionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// mapping from name => checksum, which is in the execution job
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// list of checksums that we collect as data points
	Datapoints []string        `protobuf:"bytes,4,rep,name=datapoints,proto3" json:"datapoints,omitempty"`
	Code       *llx.CodeBundle `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecutionQuery) Reset() {
	*x = ExecutionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionQuery) ProtoMessage() {}

func (x *ExecutionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionQuery.ProtoReflect.Descriptor instead.
func (*ExecutionQuery) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{16}
}

func (x *ExecutionQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecutionQuery) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ExecutionQuery) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExecutionQuery) GetDatapoints() []string {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

func (x *ExecutionQuery) GetCode() *llx.CodeBundle {
	if x != nil {
		return x.Code
	}
	return nil
}

// The scoring job used by the collector, to know what happens with all
// individual scores that the asset sends.
// - Checksum helps deduplicate this job
// - Every score points to a reporting job
// - For optimization, assets may have multiple scoring jobs
type CollectorJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// links incoming score/query-checksum to reporting job
	ReportingJobs map[string]*ReportingJob `protobuf:"bytes,2,rep,name=reporting_jobs,json=reportingJobs,proto3" json:"reporting_jobs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps a query checksum (llx) to a list of query objects (uuid)
	ReportingQueries map[string]*StringArray `protobuf:"bytes,3,rep,name=reporting_queries,json=reportingQueries,proto3" json:"reporting_queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps a query datapoint checksum (llx) to its type and reporting jobs (uuids)
	Datapoints map[string]*DataQueryInfo `protobuf:"bytes,4,rep,name=datapoints,proto3" json:"datapoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectorJob) Reset() {
	*x = CollectorJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorJob) ProtoMessage() {}

func (x *CollectorJob) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorJob.ProtoReflect.Descriptor instead.
func (*CollectorJob) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{17}
}

func (x *CollectorJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *CollectorJob) GetReportingJobs() map[string]*ReportingJob {
	if x != nil {
		return x.ReportingJobs
	}
	return nil
}

func (x *CollectorJob) GetReportingQueries() map[string]*StringArray {
	if x != nil {
		return x.ReportingQueries
	}
	return nil
}

func (x *CollectorJob) GetDatapoints() map[string]*DataQueryInfo {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{18}
}

func (x *StringArray) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type DataQueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Notify []string `protobuf:"bytes,2,rep,name=notify,proto3" json:"notify,omitempty"`
}

func (x *DataQueryInfo) Reset() {
	*x = DataQueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQueryInfo) ProtoMessage() {}

func (x *DataQueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQueryInfo.ProtoReflect.Descriptor instead.
func (*DataQueryInfo) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{19}
}

func (x *DataQueryInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataQueryInfo) GetNotify() []string {
	if x != nil {
		return x.Notify
	}
	return nil
}

// Reporting jobs help build reports from all the scores they receive
// 1. When a query score arrives, it is first reported to the CollectorJob.
// 2. It picks the first reportingJob and fills the result in, no additional
// specs need to be called. However, it notifies all other reporting jobs.
// 3. Once a notified reporting job runs, it looks at alal the specs and collects
// their values and scores them. Repeat this step for all notified reports.
// - uuid specifies the query or policy
// - spec has all the other results that need to be pulled and their scorings
type ReportingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum      string                  `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	QrId          string                  `protobuf:"bytes,2,opt,name=qr_id,json=qrId,proto3" json:"qr_id,omitempty"`
	Uuid          string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Spec          map[string]*ScoringSpec `protobuf:"bytes,4,rep,name=spec,proto3" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Notify        []string                `protobuf:"bytes,5,rep,name=notify,proto3" json:"notify,omitempty"`
	ScoringSystem ScoringSystem           `protobuf:"varint,6,opt,name=scoring_system,json=scoringSystem,proto3,enum=cnspec.policy.ScoringSystem" json:"scoring_system,omitempty"`
	Datapoints    map[string]bool         `protobuf:"bytes,7,rep,name=datapoints,proto3" json:"datapoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsData        bool                    `protobuf:"varint,8,opt,name=is_data,json=isData,proto3" json:"is_data,omitempty"`
}

func (x *ReportingJob) Reset() {
	*x = ReportingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingJob) ProtoMessage() {}

func (x *ReportingJob) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingJob.ProtoReflect.Descriptor instead.
func (*ReportingJob) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{20}
}

func (x *ReportingJob) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ReportingJob) GetQrId() string {
	if x != nil {
		return x.QrId
	}
	return ""
}

func (x *ReportingJob) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReportingJob) GetSpec() map[string]*ScoringSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ReportingJob) GetNotify() []string {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *ReportingJob) GetScoringSystem() ScoringSystem {
	if x != nil {
		return x.ScoringSystem
	}
	return ScoringSystem_AVERAGE
}

func (x *ReportingJob) GetDatapoints() map[string]bool {
	if x != nil {
		return x.Datapoints
	}
	return nil
}

func (x *ReportingJob) GetIsData() bool {
	if x != nil {
		return x.IsData
	}
	return false
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoringMrn            string                 `protobuf:"bytes,1,opt,name=scoring_mrn,json=scoringMrn,proto3" json:"scoring_mrn,omitempty"`
	EntityMrn             string                 `protobuf:"bytes,2,opt,name=entity_mrn,json=entityMrn,proto3" json:"entity_mrn,omitempty"`
	Score                 *Score                 `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Scores                map[string]*Score      `protobuf:"bytes,4,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                  map[string]*llx.Result `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stats                 *Stats                 `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Created               int64                  `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Modified              int64                  `protobuf:"varint,21,opt,name=modified,proto3" json:"modified,omitempty"`
	IgnoredStats          *Stats                 `protobuf:"bytes,22,opt,name=ignored_stats,json=ignoredStats,proto3" json:"ignored_stats,omitempty"`
	CvssScore             *Cvss                  `protobuf:"bytes,30,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	CvssScores            map[string]*Cvss       `protobuf:"bytes,31,rep,name=cvss_scores,json=cvssScores,proto3" json:"cvss_scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CvssStats             *CvssStats             `protobuf:"bytes,32,opt,name=cvss_stats,json=cvssStats,proto3" json:"cvss_stats,omitempty"`
	ResolvedPolicyVersion string                 `protobuf:"bytes,33,opt,name=resolved_policy_version,json=resolvedPolicyVersion,proto3" json:"resolved_policy_version,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{21}
}

func (x *Report) GetScoringMrn() string {
	if x != nil {
		return x.ScoringMrn
	}
	return ""
}

func (x *Report) GetEntityMrn() string {
	if x != nil {
		return x.EntityMrn
	}
	return ""
}

func (x *Report) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *Report) GetScores() map[string]*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Report) GetData() map[string]*llx.Result {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Report) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Report) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Report) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Report) GetIgnoredStats() *Stats {
	if x != nil {
		return x.IgnoredStats
	}
	return nil
}

func (x *Report) GetCvssScore() *Cvss {
	if x != nil {
		return x.CvssScore
	}
	return nil
}

func (x *Report) GetCvssScores() map[string]*Cvss {
	if x != nil {
		return x.CvssScores
	}
	return nil
}

func (x *Report) GetCvssStats() *CvssStats {
	if x != nil {
		return x.CvssStats
	}
	return nil
}

func (x *Report) GetResolvedPolicyVersion() string {
	if x != nil {
		return x.ResolvedPolicyVersion
	}
	return ""
}

type Reports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *Reports) Reset() {
	*x = Reports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reports) ProtoMessage() {}

func (x *Reports) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reports.ProtoReflect.Descriptor instead.
func (*Reports) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{22}
}

func (x *Reports) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ReportCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets           map[string]*Asset          `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bundle           *Bundle                    `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Reports          map[string]*Report         `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors           map[string]string          `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResolvedPolicies map[string]*ResolvedPolicy `protobuf:"bytes,5,rep,name=resolved_policies,json=resolvedPolicies,proto3" json:"resolved_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportCollection) Reset() {
	*x = ReportCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCollection) ProtoMessage() {}

func (x *ReportCollection) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCollection.ProtoReflect.Descriptor instead.
func (*ReportCollection) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{23}
}

func (x *ReportCollection) GetAssets() map[string]*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ReportCollection) GetBundle() *Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ReportCollection) GetReports() map[string]*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ReportCollection) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ReportCollection) GetResolvedPolicies() map[string]*ResolvedPolicy {
	if x != nil {
		return x.ResolvedPolicies
	}
	return nil
}

// Cvss scores are specific to CVEs
type Cvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Score    int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Vector   string `protobuf:"bytes,4,opt,name=vector,proto3" json:"vector,omitempty"`
	Source   string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Cvss) Reset() {
	*x = Cvss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cvss) ProtoMessage() {}

func (x *Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cvss.ProtoReflect.Descriptor instead.
func (*Cvss) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{24}
}

func (x *Cvss) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cvss) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Cvss) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Cvss) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *Cvss) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type CvssStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Critical uint32 `protobuf:"varint,2,opt,name=critical,proto3" json:"critical,omitempty"` // 9.0 <= .. <= 10.0
	High     uint32 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`         // 7.0 <= .. < 9.0
	Medium   uint32 `protobuf:"varint,4,opt,name=medium,proto3" json:"medium,omitempty"`     // 4.0 <= .. < 7.0
	Low      uint32 `protobuf:"varint,5,opt,name=low,proto3" json:"low,omitempty"`           // 0.0 < .. < 4.0
	None     uint32 `protobuf:"varint,6,opt,name=none,proto3" json:"none,omitempty"`         // 0.0
	Unscored uint32 `protobuf:"varint,7,opt,name=unscored,proto3" json:"unscored,omitempty"` // no value
	Worst    uint32 `protobuf:"varint,8,opt,name=worst,proto3" json:"worst,omitempty"`
}

func (x *CvssStats) Reset() {
	*x = CvssStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvssStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvssStats) ProtoMessage() {}

func (x *CvssStats) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvssStats.ProtoReflect.Descriptor instead.
func (*CvssStats) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{25}
}

func (x *CvssStats) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CvssStats) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *CvssStats) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *CvssStats) GetMedium() uint32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *CvssStats) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *CvssStats) GetNone() uint32 {
	if x != nil {
		return x.None
	}
	return 0
}

func (x *CvssStats) GetUnscored() uint32 {
	if x != nil {
		return x.Unscored
	}
	return 0
}

func (x *CvssStats) GetWorst() uint32 {
	if x != nil {
		return x.Worst
	}
	return 0
}

// Scores are numeric values with weith that provide a summary about the asset
type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrId            string `protobuf:"bytes,2,opt,name=qr_id,json=qrId,proto3" json:"qr_id,omitempty"`
	Type            uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Value           uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Weight          uint32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	ScoreCompletion uint32 `protobuf:"varint,5,opt,name=score_completion,json=scoreCompletion,proto3" json:"score_completion,omitempty"`
	DataTotal       uint32 `protobuf:"varint,9,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	DataCompletion  uint32 `protobuf:"varint,6,opt,name=data_completion,json=dataCompletion,proto3" json:"data_completion,omitempty"`
	Message         string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// captures the timestamp when the score value was last modified
	ValueModifiedTime int64 `protobuf:"varint,10,opt,name=value_modified_time,json=valueModifiedTime,proto3" json:"value_modified_time,omitempty"`
	// captures when the score first failed (non-100 value)
	// a value of 0 indicates that this field is not set
	FailureTime int64 `protobuf:"varint,11,opt,name=failure_time,json=failureTime,proto3" json:"failure_time,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{26}
}

func (x *Score) GetQrId() string {
	if x != nil {
		return x.QrId
	}
	return ""
}

func (x *Score) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Score) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Score) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Score) GetScoreCompletion() uint32 {
	if x != nil {
		return x.ScoreCompletion
	}
	return 0
}

func (x *Score) GetDataTotal() uint32 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *Score) GetDataCompletion() uint32 {
	if x != nil {
		return x.DataCompletion
	}
	return 0
}

func (x *Score) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Score) GetValueModifiedTime() int64 {
	if x != nil {
		return x.ValueModifiedTime
	}
	return 0
}

func (x *Score) GetFailureTime() int64 {
	if x != nil {
		return x.FailureTime
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ^^
	Incomplete uint32             `protobuf:"varint,8,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	Skipped    uint32             `protobuf:"varint,10,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Worst      uint32             `protobuf:"varint,11,opt,name=worst,proto3" json:"worst,omitempty"`
	Unknown    uint32             `protobuf:"varint,12,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Failed     *ScoreDistribution `protobuf:"bytes,14,opt,name=failed,proto3" json:"failed,omitempty"`
	Passed     *ScoreDistribution `protobuf:"bytes,15,opt,name=passed,proto3" json:"passed,omitempty"`
	Errors     *ScoreDistribution `protobuf:"bytes,16,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{27}
}

func (x *Stats) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Stats) GetIncomplete() uint32 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

func (x *Stats) GetSkipped() uint32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *Stats) GetWorst() uint32 {
	if x != nil {
		return x.Worst
	}
	return 0
}

func (x *Stats) GetUnknown() uint32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *Stats) GetFailed() *ScoreDistribution {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Stats) GetPassed() *ScoreDistribution {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *Stats) GetErrors() *ScoreDistribution {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ScoreDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	A     uint32 `protobuf:"varint,2,opt,name=a,proto3" json:"a,omitempty"`
	B     uint32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	C     uint32 `protobuf:"varint,4,opt,name=c,proto3" json:"c,omitempty"`
	D     uint32 `protobuf:"varint,5,opt,name=d,proto3" json:"d,omitempty"`
	F     uint32 `protobuf:"varint,6,opt,name=f,proto3" json:"f,omitempty"`
}

func (x *ScoreDistribution) Reset() {
	*x = ScoreDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreDistribution) ProtoMessage() {}

func (x *ScoreDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreDistribution.ProtoReflect.Descriptor instead.
func (*ScoreDistribution) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{28}
}

func (x *ScoreDistribution) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ScoreDistribution) GetA() uint32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *ScoreDistribution) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *ScoreDistribution) GetC() uint32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *ScoreDistribution) GetD() uint32 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *ScoreDistribution) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{29}
}

// MRNs are used to uniquely identify resources. They are globally unique.
type Mrn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
}

func (x *Mrn) Reset() {
	*x = Mrn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mrn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mrn) ProtoMessage() {}

func (x *Mrn) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mrn.ProtoReflect.Descriptor instead.
func (*Mrn) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{30}
}

func (x *Mrn) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

type Mqueries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Mquery `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Mqueries) Reset() {
	*x = Mqueries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mqueries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mqueries) ProtoMessage() {}

func (x *Mqueries) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mqueries.ProtoReflect.Descriptor instead.
func (*Mqueries) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{31}
}

func (x *Mqueries) GetItems() []*Mquery {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerMrn string `protobuf:"bytes,1,opt,name=owner_mrn,json=ownerMrn,proto3" json:"owner_mrn,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{32}
}

func (x *ListReq) GetOwnerMrn() string {
	if x != nil {
		return x.OwnerMrn
	}
	return ""
}

func (x *ListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DefaultPoliciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Platform string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Runtime  string   `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Version  string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Family   []string `protobuf:"bytes,5,rep,name=family,proto3" json:"family,omitempty"`
}

func (x *DefaultPoliciesReq) Reset() {
	*x = DefaultPoliciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultPoliciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultPoliciesReq) ProtoMessage() {}

func (x *DefaultPoliciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultPoliciesReq.ProtoReflect.Descriptor instead.
func (*DefaultPoliciesReq) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{33}
}

func (x *DefaultPoliciesReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DefaultPoliciesReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DefaultPoliciesReq) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *DefaultPoliciesReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DefaultPoliciesReq) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

type URLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *URLs) Reset() {
	*x = URLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLs) ProtoMessage() {}

func (x *URLs) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLs.ProtoReflect.Descriptor instead.
func (*URLs) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{34}
}

func (x *URLs) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type PolicyAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn   string   `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	PolicyMrns []string `protobuf:"bytes,2,rep,name=policy_mrns,json=policyMrns,proto3" json:"policy_mrns,omitempty"`
}

func (x *PolicyAssignment) Reset() {
	*x = PolicyAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAssignment) ProtoMessage() {}

func (x *PolicyAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAssignment.ProtoReflect.Descriptor instead.
func (*PolicyAssignment) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{35}
}

func (x *PolicyAssignment) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *PolicyAssignment) GetPolicyMrns() []string {
	if x != nil {
		return x.PolicyMrns
	}
	return nil
}

type PolicyMutationDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn    string                  `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	PolicyDeltas map[string]*PolicyDelta `protobuf:"bytes,2,rep,name=policy_deltas,json=policyDeltas,proto3" json:"policy_deltas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyMutationDelta) Reset() {
	*x = PolicyMutationDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMutationDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMutationDelta) ProtoMessage() {}

func (x *PolicyMutationDelta) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMutationDelta.ProtoReflect.Descriptor instead.
func (*PolicyMutationDelta) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{36}
}

func (x *PolicyMutationDelta) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *PolicyMutationDelta) GetPolicyDeltas() map[string]*PolicyDelta {
	if x != nil {
		return x.PolicyDeltas
	}
	return nil
}

type PolicyDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn string                                 `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	Action    PolicyDelta_PolicyAssignmentActionType `protobuf:"varint,2,opt,name=action,proto3,enum=cnspec.policy.PolicyDelta_PolicyAssignmentActionType" json:"action,omitempty"`
}

func (x *PolicyDelta) Reset() {
	*x = PolicyDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDelta) ProtoMessage() {}

func (x *PolicyDelta) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDelta.ProtoReflect.Descriptor instead.
func (*PolicyDelta) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{37}
}

func (x *PolicyDelta) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *PolicyDelta) GetAction() PolicyDelta_PolicyAssignmentActionType {
	if x != nil {
		return x.Action
	}
	return PolicyDelta_ADD
}

type ResolveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyMrn    string    `protobuf:"bytes,1,opt,name=policy_mrn,json=policyMrn,proto3" json:"policy_mrn,omitempty"`
	AssetFilters []*Mquery `protobuf:"bytes,2,rep,name=asset_filters,json=assetFilters,proto3" json:"asset_filters,omitempty"`
}

func (x *ResolveReq) Reset() {
	*x = ResolveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveReq) ProtoMessage() {}

func (x *ResolveReq) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveReq.ProtoReflect.Descriptor instead.
func (*ResolveReq) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{38}
}

func (x *ResolveReq) GetPolicyMrn() string {
	if x != nil {
		return x.PolicyMrn
	}
	return ""
}

func (x *ResolveReq) GetAssetFilters() []*Mquery {
	if x != nil {
		return x.AssetFilters
	}
	return nil
}

type UpdateAssetJobsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn     string    `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	AssetFilters []*Mquery `protobuf:"bytes,2,rep,name=asset_filters,json=assetFilters,proto3" json:"asset_filters,omitempty"`
}

func (x *UpdateAssetJobsReq) Reset() {
	*x = UpdateAssetJobsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetJobsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetJobsReq) ProtoMessage() {}

func (x *UpdateAssetJobsReq) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetJobsReq.ProtoReflect.Descriptor instead.
func (*UpdateAssetJobsReq) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateAssetJobsReq) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *UpdateAssetJobsReq) GetAssetFilters() []*Mquery {
	if x != nil {
		return x.AssetFilters
	}
	return nil
}

type StoreResultsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrn string   `protobuf:"bytes,1,opt,name=asset_mrn,json=assetMrn,proto3" json:"asset_mrn,omitempty"`
	Scores   []*Score `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"` // in this context, Scores only carry their checksum, not their ID
	// combination of query-checksum + result (which has entrypoint checksum):
	// TODO: remove the string-map, we don't need it anymore; the llx result contains everything we need (the CodeID)
	Data           map[string]*llx.Result `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CvssScores     []*Cvss                `protobuf:"bytes,20,rep,name=cvssScores,proto3" json:"cvssScores,omitempty"`
	IsPreprocessed bool                   `protobuf:"varint,21,opt,name=is_preprocessed,json=isPreprocessed,proto3" json:"is_preprocessed,omitempty"`
	NotifyUpdates  []string               `protobuf:"bytes,22,rep,name=notify_updates,json=notifyUpdates,proto3" json:"notify_updates,omitempty"`
}

func (x *StoreResultsReq) Reset() {
	*x = StoreResultsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResultsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResultsReq) ProtoMessage() {}

func (x *StoreResultsReq) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResultsReq.ProtoReflect.Descriptor instead.
func (*StoreResultsReq) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{40}
}

func (x *StoreResultsReq) GetAssetMrn() string {
	if x != nil {
		return x.AssetMrn
	}
	return ""
}

func (x *StoreResultsReq) GetScores() []*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *StoreResultsReq) GetData() map[string]*llx.Result {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StoreResultsReq) GetCvssScores() []*Cvss {
	if x != nil {
		return x.CvssScores
	}
	return nil
}

func (x *StoreResultsReq) GetIsPreprocessed() bool {
	if x != nil {
		return x.IsPreprocessed
	}
	return false
}

func (x *StoreResultsReq) GetNotifyUpdates() []string {
	if x != nil {
		return x.NotifyUpdates
	}
	return nil
}

type EntityScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityMrn string `protobuf:"bytes,1,opt,name=entity_mrn,json=entityMrn,proto3" json:"entity_mrn,omitempty"`
	ScoreMrn  string `protobuf:"bytes,2,opt,name=score_mrn,json=scoreMrn,proto3" json:"score_mrn,omitempty"`
}

func (x *EntityScoreRequest) Reset() {
	*x = EntityScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityScoreRequest) ProtoMessage() {}

func (x *EntityScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityScoreRequest.ProtoReflect.Descriptor instead.
func (*EntityScoreRequest) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{41}
}

func (x *EntityScoreRequest) GetEntityMrn() string {
	if x != nil {
		return x.EntityMrn
	}
	return ""
}

func (x *EntityScoreRequest) GetScoreMrn() string {
	if x != nil {
		return x.ScoreMrn
	}
	return ""
}

var File_policy_proto protoreflect.FileDescriptor

var file_policy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x15, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6c, 0x6c, 0x78, 0x2f, 0x6c, 0x6c, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x06, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x57, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5d, 0x0a, 0x13, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5a, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x08, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x16,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x18,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d,
	0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9a, 0x02, 0x0a,
	0x0b, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x73, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x32, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x72, 0x0a,
	0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22,
	0x20, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x22, 0xa6, 0x03, 0x0a, 0x06, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x2c,
	0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x0d, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x58, 0x0a, 0x0a, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x09, 0x4d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x2d, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xd8, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x6c, 0x6c, 0x78, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a,
	0x6f, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xe5, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09, 0x53, 0x70,
	0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1,
	0x06, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x09, 0x63, 0x76, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x63, 0x76,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x4f, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6c, 0x6c, 0x78, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52,
	0x0a, 0x0f, 0x43, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xba,
	0x05, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x04, 0x43,
	0x76, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x43, 0x76, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x71, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0d,
	0x10, 0x0e, 0x22, 0x6f, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0c, 0x0a,
	0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x66, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x0a, 0x03,
	0x4d, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x72, 0x6e, 0x22, 0x37, 0x0a, 0x08, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3a,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x1a, 0x0a,
	0x04, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x13,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x72, 0x6e, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x1a, 0x5b, 0x0a,
	0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x67, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4d, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x0a, 0x63, 0x76, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6c, 0x6c,
	0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4d, 0x72, 0x6e, 0x2a, 0x35, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x4f, 0x52, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xb3, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x01, 0x12, 0x05,
	0x0a, 0x01, 0x61, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x04, 0x12, 0x05, 0x0a, 0x01,
	0x62, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x63, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x07, 0x12, 0x05, 0x0a, 0x01, 0x63, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x05, 0x0a, 0x01, 0x64, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x06, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x10, 0x0f, 0x32, 0xfd, 0x03, 0x0a,
	0x03, 0x48, 0x75, 0x62, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x15,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x72, 0x6e, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x55, 0x52, 0x4c, 0x73, 0x22, 0x00, 0x32, 0xdc, 0x04, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x63,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x21,
	0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x67,
	0x6f, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_policy_proto_rawDescOnce sync.Once
	file_policy_proto_rawDescData = file_policy_proto_rawDesc
)

func file_policy_proto_rawDescGZIP() []byte {
	file_policy_proto_rawDescOnce.Do(func() {
		file_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_proto_rawDescData)
	})
	return file_policy_proto_rawDescData
}

var file_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_policy_proto_goTypes = []interface{}{
	(ScoringSystem)(0), // 0: cnspec.policy.ScoringSystem
	(QueryAction)(0),   // 1: cnspec.policy.QueryAction
	(ScoreRating)(0),   // 2: cnspec.policy.ScoreRating
	(PolicyDelta_PolicyAssignmentActionType)(0), // 3: cnspec.policy.PolicyDelta.PolicyAssignmentActionType
	(*PolicySpec)(nil),                          // 4: cnspec.policy.PolicySpec
	(*Policy)(nil),                              // 5: cnspec.policy.Policy
	(*Policies)(nil),                            // 6: cnspec.policy.Policies
	(*ScoringSpec)(nil),                         // 7: cnspec.policy.ScoringSpec
	(*Author)(nil),                              // 8: cnspec.policy.Author
	(*QueryCounts)(nil),                         // 9: cnspec.policy.QueryCounts
	(*Bundle)(nil),                              // 10: cnspec.policy.Bundle
	(*PolicySpecDocs)(nil),                      // 11: cnspec.policy.PolicySpecDocs
	(*PolicyDocs)(nil),                          // 12: cnspec.policy.PolicyDocs
	(*Mquery)(nil),                              // 13: cnspec.policy.Mquery
	(*SeverityValue)(nil),                       // 14: cnspec.policy.SeverityValue
	(*MqueryDocs)(nil),                          // 15: cnspec.policy.MqueryDocs
	(*MqueryRef)(nil),                           // 16: cnspec.policy.MqueryRef
	(*Asset)(nil),                               // 17: cnspec.policy.Asset
	(*ResolvedPolicy)(nil),                      // 18: cnspec.policy.ResolvedPolicy
	(*ExecutionJob)(nil),                        // 19: cnspec.policy.ExecutionJob
	(*ExecutionQuery)(nil),                      // 20: cnspec.policy.ExecutionQuery
	(*CollectorJob)(nil),                        // 21: cnspec.policy.CollectorJob
	(*StringArray)(nil),                         // 22: cnspec.policy.StringArray
	(*DataQueryInfo)(nil),                       // 23: cnspec.policy.DataQueryInfo
	(*ReportingJob)(nil),                        // 24: cnspec.policy.ReportingJob
	(*Report)(nil),                              // 25: cnspec.policy.Report
	(*Reports)(nil),                             // 26: cnspec.policy.Reports
	(*ReportCollection)(nil),                    // 27: cnspec.policy.ReportCollection
	(*Cvss)(nil),                                // 28: cnspec.policy.Cvss
	(*CvssStats)(nil),                           // 29: cnspec.policy.CvssStats
	(*Score)(nil),                               // 30: cnspec.policy.Score
	(*Stats)(nil),                               // 31: cnspec.policy.Stats
	(*ScoreDistribution)(nil),                   // 32: cnspec.policy.ScoreDistribution
	(*Empty)(nil),                               // 33: cnspec.policy.Empty
	(*Mrn)(nil),                                 // 34: cnspec.policy.Mrn
	(*Mqueries)(nil),                            // 35: cnspec.policy.Mqueries
	(*ListReq)(nil),                             // 36: cnspec.policy.ListReq
	(*DefaultPoliciesReq)(nil),                  // 37: cnspec.policy.DefaultPoliciesReq
	(*URLs)(nil),                                // 38: cnspec.policy.URLs
	(*PolicyAssignment)(nil),                    // 39: cnspec.policy.PolicyAssignment
	(*PolicyMutationDelta)(nil),                 // 40: cnspec.policy.PolicyMutationDelta
	(*PolicyDelta)(nil),                         // 41: cnspec.policy.PolicyDelta
	(*ResolveReq)(nil),                          // 42: cnspec.policy.ResolveReq
	(*UpdateAssetJobsReq)(nil),                  // 43: cnspec.policy.UpdateAssetJobsReq
	(*StoreResultsReq)(nil),                     // 44: cnspec.policy.StoreResultsReq
	(*EntityScoreRequest)(nil),                  // 45: cnspec.policy.EntityScoreRequest
	nil,                                         // 46: cnspec.policy.PolicySpec.PoliciesEntry
	nil,                                         // 47: cnspec.policy.PolicySpec.ScoringQueriesEntry
	nil,                                         // 48: cnspec.policy.PolicySpec.DataQueriesEntry
	nil,                                         // 49: cnspec.policy.Policy.AssetFiltersEntry
	nil,                                         // 50: cnspec.policy.Policy.TagsEntry
	nil,                                         // 51: cnspec.policy.Policy.PropsEntry
	nil,                                         // 52: cnspec.policy.Mquery.TagsEntry
	nil,                                         // 53: cnspec.policy.ExecutionJob.QueriesEntry
	nil,                                         // 54: cnspec.policy.ExecutionQuery.PropertiesEntry
	nil,                                         // 55: cnspec.policy.CollectorJob.ReportingJobsEntry
	nil,                                         // 56: cnspec.policy.CollectorJob.ReportingQueriesEntry
	nil,                                         // 57: cnspec.policy.CollectorJob.DatapointsEntry
	nil,                                         // 58: cnspec.policy.ReportingJob.SpecEntry
	nil,                                         // 59: cnspec.policy.ReportingJob.DatapointsEntry
	nil,                                         // 60: cnspec.policy.Report.ScoresEntry
	nil,                                         // 61: cnspec.policy.Report.DataEntry
	nil,                                         // 62: cnspec.policy.Report.CvssScoresEntry
	nil,                                         // 63: cnspec.policy.ReportCollection.AssetsEntry
	nil,                                         // 64: cnspec.policy.ReportCollection.ReportsEntry
	nil,                                         // 65: cnspec.policy.ReportCollection.ErrorsEntry
	nil,                                         // 66: cnspec.policy.ReportCollection.ResolvedPoliciesEntry
	nil,                                         // 67: cnspec.policy.PolicyMutationDelta.PolicyDeltasEntry
	nil,                                         // 68: cnspec.policy.StoreResultsReq.DataEntry
	(*llx.CodeBundle)(nil),                      // 69: cnquery.llx.CodeBundle
	(*llx.Result)(nil),                          // 70: cnquery.llx.Result
}
var file_policy_proto_depIdxs = []int32{
	46, // 0: cnspec.policy.PolicySpec.policies:type_name -> cnspec.policy.PolicySpec.PoliciesEntry
	47, // 1: cnspec.policy.PolicySpec.scoring_queries:type_name -> cnspec.policy.PolicySpec.ScoringQueriesEntry
	48, // 2: cnspec.policy.PolicySpec.data_queries:type_name -> cnspec.policy.PolicySpec.DataQueriesEntry
	13, // 3: cnspec.policy.PolicySpec.asset_filter:type_name -> cnspec.policy.Mquery
	11, // 4: cnspec.policy.PolicySpec.docs:type_name -> cnspec.policy.PolicySpecDocs
	4,  // 5: cnspec.policy.Policy.specs:type_name -> cnspec.policy.PolicySpec
	49, // 6: cnspec.policy.Policy.asset_filters:type_name -> cnspec.policy.Policy.AssetFiltersEntry
	0,  // 7: cnspec.policy.Policy.scoring_system:type_name -> cnspec.policy.ScoringSystem
	8,  // 8: cnspec.policy.Policy.authors:type_name -> cnspec.policy.Author
	50, // 9: cnspec.policy.Policy.tags:type_name -> cnspec.policy.Policy.TagsEntry
	51, // 10: cnspec.policy.Policy.props:type_name -> cnspec.policy.Policy.PropsEntry
	12, // 11: cnspec.policy.Policy.docs:type_name -> cnspec.policy.PolicyDocs
	9,  // 12: cnspec.policy.Policy.query_counts:type_name -> cnspec.policy.QueryCounts
	5,  // 13: cnspec.policy.Policies.items:type_name -> cnspec.policy.Policy
	0,  // 14: cnspec.policy.ScoringSpec.scoring_system:type_name -> cnspec.policy.ScoringSystem
	1,  // 15: cnspec.policy.ScoringSpec.action:type_name -> cnspec.policy.QueryAction
	14, // 16: cnspec.policy.ScoringSpec.severity:type_name -> cnspec.policy.SeverityValue
	5,  // 17: cnspec.policy.Bundle.policies:type_name -> cnspec.policy.Policy
	13, // 18: cnspec.policy.Bundle.props:type_name -> cnspec.policy.Mquery
	13, // 19: cnspec.policy.Bundle.queries:type_name -> cnspec.policy.Mquery
	12, // 20: cnspec.policy.Bundle.docs:type_name -> cnspec.policy.PolicyDocs
	14, // 21: cnspec.policy.Mquery.severity:type_name -> cnspec.policy.SeverityValue
	15, // 22: cnspec.policy.Mquery.docs:type_name -> cnspec.policy.MqueryDocs
	16, // 23: cnspec.policy.Mquery.refs:type_name -> cnspec.policy.MqueryRef
	52, // 24: cnspec.policy.Mquery.tags:type_name -> cnspec.policy.Mquery.TagsEntry
	19, // 25: cnspec.policy.ResolvedPolicy.execution_job:type_name -> cnspec.policy.ExecutionJob
	21, // 26: cnspec.policy.ResolvedPolicy.collector_job:type_name -> cnspec.policy.CollectorJob
	13, // 27: cnspec.policy.ResolvedPolicy.filters:type_name -> cnspec.policy.Mquery
	53, // 28: cnspec.policy.ExecutionJob.queries:type_name -> cnspec.policy.ExecutionJob.QueriesEntry
	54, // 29: cnspec.policy.ExecutionQuery.properties:type_name -> cnspec.policy.ExecutionQuery.PropertiesEntry
	69, // 30: cnspec.policy.ExecutionQuery.code:type_name -> cnquery.llx.CodeBundle
	55, // 31: cnspec.policy.CollectorJob.reporting_jobs:type_name -> cnspec.policy.CollectorJob.ReportingJobsEntry
	56, // 32: cnspec.policy.CollectorJob.reporting_queries:type_name -> cnspec.policy.CollectorJob.ReportingQueriesEntry
	57, // 33: cnspec.policy.CollectorJob.datapoints:type_name -> cnspec.policy.CollectorJob.DatapointsEntry
	58, // 34: cnspec.policy.ReportingJob.spec:type_name -> cnspec.policy.ReportingJob.SpecEntry
	0,  // 35: cnspec.policy.ReportingJob.scoring_system:type_name -> cnspec.policy.ScoringSystem
	59, // 36: cnspec.policy.ReportingJob.datapoints:type_name -> cnspec.policy.ReportingJob.DatapointsEntry
	30, // 37: cnspec.policy.Report.score:type_name -> cnspec.policy.Score
	60, // 38: cnspec.policy.Report.scores:type_name -> cnspec.policy.Report.ScoresEntry
	61, // 39: cnspec.policy.Report.data:type_name -> cnspec.policy.Report.DataEntry
	31, // 40: cnspec.policy.Report.stats:type_name -> cnspec.policy.Stats
	31, // 41: cnspec.policy.Report.ignored_stats:type_name -> cnspec.policy.Stats
	28, // 42: cnspec.policy.Report.cvss_score:type_name -> cnspec.policy.Cvss
	62, // 43: cnspec.policy.Report.cvss_scores:type_name -> cnspec.policy.Report.CvssScoresEntry
	29, // 44: cnspec.policy.Report.cvss_stats:type_name -> cnspec.policy.CvssStats
	25, // 45: cnspec.policy.Reports.reports:type_name -> cnspec.policy.Report
	63, // 46: cnspec.policy.ReportCollection.assets:type_name -> cnspec.policy.ReportCollection.AssetsEntry
	10, // 47: cnspec.policy.ReportCollection.bundle:type_name -> cnspec.policy.Bundle
	64, // 48: cnspec.policy.ReportCollection.reports:type_name -> cnspec.policy.ReportCollection.ReportsEntry
	65, // 49: cnspec.policy.ReportCollection.errors:type_name -> cnspec.policy.ReportCollection.ErrorsEntry
	66, // 50: cnspec.policy.ReportCollection.resolved_policies:type_name -> cnspec.policy.ReportCollection.ResolvedPoliciesEntry
	32, // 51: cnspec.policy.Stats.failed:type_name -> cnspec.policy.ScoreDistribution
	32, // 52: cnspec.policy.Stats.passed:type_name -> cnspec.policy.ScoreDistribution
	32, // 53: cnspec.policy.Stats.errors:type_name -> cnspec.policy.ScoreDistribution
	13, // 54: cnspec.policy.Mqueries.items:type_name -> cnspec.policy.Mquery
	67, // 55: cnspec.policy.PolicyMutationDelta.policy_deltas:type_name -> cnspec.policy.PolicyMutationDelta.PolicyDeltasEntry
	3,  // 56: cnspec.policy.PolicyDelta.action:type_name -> cnspec.policy.PolicyDelta.PolicyAssignmentActionType
	13, // 57: cnspec.policy.ResolveReq.asset_filters:type_name -> cnspec.policy.Mquery
	13, // 58: cnspec.policy.UpdateAssetJobsReq.asset_filters:type_name -> cnspec.policy.Mquery
	30, // 59: cnspec.policy.StoreResultsReq.scores:type_name -> cnspec.policy.Score
	68, // 60: cnspec.policy.StoreResultsReq.data:type_name -> cnspec.policy.StoreResultsReq.DataEntry
	28, // 61: cnspec.policy.StoreResultsReq.cvssScores:type_name -> cnspec.policy.Cvss
	7,  // 62: cnspec.policy.PolicySpec.PoliciesEntry.value:type_name -> cnspec.policy.ScoringSpec
	7,  // 63: cnspec.policy.PolicySpec.ScoringQueriesEntry.value:type_name -> cnspec.policy.ScoringSpec
	1,  // 64: cnspec.policy.PolicySpec.DataQueriesEntry.value:type_name -> cnspec.policy.QueryAction
	13, // 65: cnspec.policy.Policy.AssetFiltersEntry.value:type_name -> cnspec.policy.Mquery
	20, // 66: cnspec.policy.ExecutionJob.QueriesEntry.value:type_name -> cnspec.policy.ExecutionQuery
	24, // 67: cnspec.policy.CollectorJob.ReportingJobsEntry.value:type_name -> cnspec.policy.ReportingJob
	22, // 68: cnspec.policy.CollectorJob.ReportingQueriesEntry.value:type_name -> cnspec.policy.StringArray
	23, // 69: cnspec.policy.CollectorJob.DatapointsEntry.value:type_name -> cnspec.policy.DataQueryInfo
	7,  // 70: cnspec.policy.ReportingJob.SpecEntry.value:type_name -> cnspec.policy.ScoringSpec
	30, // 71: cnspec.policy.Report.ScoresEntry.value:type_name -> cnspec.policy.Score
	70, // 72: cnspec.policy.Report.DataEntry.value:type_name -> cnquery.llx.Result
	28, // 73: cnspec.policy.Report.CvssScoresEntry.value:type_name -> cnspec.policy.Cvss
	17, // 74: cnspec.policy.ReportCollection.AssetsEntry.value:type_name -> cnspec.policy.Asset
	25, // 75: cnspec.policy.ReportCollection.ReportsEntry.value:type_name -> cnspec.policy.Report
	18, // 76: cnspec.policy.ReportCollection.ResolvedPoliciesEntry.value:type_name -> cnspec.policy.ResolvedPolicy
	41, // 77: cnspec.policy.PolicyMutationDelta.PolicyDeltasEntry.value:type_name -> cnspec.policy.PolicyDelta
	70, // 78: cnspec.policy.StoreResultsReq.DataEntry.value:type_name -> cnquery.llx.Result
	10, // 79: cnspec.policy.Hub.SetBundle:input_type -> cnspec.policy.Bundle
	34, // 80: cnspec.policy.Hub.DeletePolicy:input_type -> cnspec.policy.Mrn
	10, // 81: cnspec.policy.Hub.ValidateBundle:input_type -> cnspec.policy.Bundle
	34, // 82: cnspec.policy.Hub.GetPolicy:input_type -> cnspec.policy.Mrn
	34, // 83: cnspec.policy.Hub.GetBundle:input_type -> cnspec.policy.Mrn
	34, // 84: cnspec.policy.Hub.GetPolicyFilters:input_type -> cnspec.policy.Mrn
	36, // 85: cnspec.policy.Hub.List:input_type -> cnspec.policy.ListReq
	37, // 86: cnspec.policy.Hub.DefaultPolicies:input_type -> cnspec.policy.DefaultPoliciesReq
	39, // 87: cnspec.policy.Resolver.Assign:input_type -> cnspec.policy.PolicyAssignment
	39, // 88: cnspec.policy.Resolver.Unassign:input_type -> cnspec.policy.PolicyAssignment
	42, // 89: cnspec.policy.Resolver.Resolve:input_type -> cnspec.policy.ResolveReq
	43, // 90: cnspec.policy.Resolver.UpdateAssetJobs:input_type -> cnspec.policy.UpdateAssetJobsReq
	43, // 91: cnspec.policy.Resolver.ResolveAndUpdateJobs:input_type -> cnspec.policy.UpdateAssetJobsReq
	44, // 92: cnspec.policy.Resolver.StoreResults:input_type -> cnspec.policy.StoreResultsReq
	45, // 93: cnspec.policy.Resolver.GetReport:input_type -> cnspec.policy.EntityScoreRequest
	45, // 94: cnspec.policy.Resolver.GetScore:input_type -> cnspec.policy.EntityScoreRequest
	33, // 95: cnspec.policy.Hub.SetBundle:output_type -> cnspec.policy.Empty
	33, // 96: cnspec.policy.Hub.DeletePolicy:output_type -> cnspec.policy.Empty
	33, // 97: cnspec.policy.Hub.ValidateBundle:output_type -> cnspec.policy.Empty
	5,  // 98: cnspec.policy.Hub.GetPolicy:output_type -> cnspec.policy.Policy
	10, // 99: cnspec.policy.Hub.GetBundle:output_type -> cnspec.policy.Bundle
	35, // 100: cnspec.policy.Hub.GetPolicyFilters:output_type -> cnspec.policy.Mqueries
	6,  // 101: cnspec.policy.Hub.List:output_type -> cnspec.policy.Policies
	38, // 102: cnspec.policy.Hub.DefaultPolicies:output_type -> cnspec.policy.URLs
	33, // 103: cnspec.policy.Resolver.Assign:output_type -> cnspec.policy.Empty
	33, // 104: cnspec.policy.Resolver.Unassign:output_type -> cnspec.policy.Empty
	18, // 105: cnspec.policy.Resolver.Resolve:output_type -> cnspec.policy.ResolvedPolicy
	33, // 106: cnspec.policy.Resolver.UpdateAssetJobs:output_type -> cnspec.policy.Empty
	18, // 107: cnspec.policy.Resolver.ResolveAndUpdateJobs:output_type -> cnspec.policy.ResolvedPolicy
	33, // 108: cnspec.policy.Resolver.StoreResults:output_type -> cnspec.policy.Empty
	25, // 109: cnspec.policy.Resolver.GetReport:output_type -> cnspec.policy.Report
	25, // 110: cnspec.policy.Resolver.GetScore:output_type -> cnspec.policy.Report
	95, // [95:111] is the sub-list for method output_type
	79, // [79:95] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_policy_proto_init() }
func file_policy_proto_init() {
	if File_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoringSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpecDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mquery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeverityValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MqueryDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MqueryRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataQueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cvss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvssStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mrn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mqueries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultPoliciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMutationDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetJobsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreResultsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_policy_proto_goTypes,
		DependencyIndexes: file_policy_proto_depIdxs,
		EnumInfos:         file_policy_proto_enumTypes,
		MessageInfos:      file_policy_proto_msgTypes,
	}.Build()
	File_policy_proto = out.File
	file_policy_proto_rawDesc = nil
	file_policy_proto_goTypes = nil
	file_policy_proto_depIdxs = nil
}
